
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package com.bwz6jk2227esl89ahj34;


/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\003\002\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\004\000\002\006\003\000\002\006\003\000" +
    "\002\007\006\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\004\000" +
    "\002\010\005\000\002\010\005\000\002\014\003\000\002" +
    "\014\003\000\002\017\006\000\002\017\003\000\002\020" +
    "\005\000\002\020\003\000\002\015\004\000\002\016\005" +
    "\000\002\016\003\000\002\021\005\000\002\023\005\000" +
    "\002\023\003\000\002\024\006\000\002\024\005\000\002" +
    "\024\006\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\005\000\002\026\003\000\002\027\005" +
    "\000\002\027\005\000\002\030\007\000\002\030\011\000" +
    "\002\031\007\000\002\032\004\000\002\032\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\036\003\000\002\036\004" +
    "\000\002\042\006\000\002\034\005\000\002\034\003\000" +
    "\002\034\003\000\002\035\004\000\002\035\003\000\002" +
    "\040\011\000\002\040\007\000\002\041\004\000\002\041" +
    "\003\000\002\004\005\000\002\004\003\000\002\002\004" +
    "" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\010\002\000\004\000\021\005\001\002\000" +
    "\006\002\000\004\013\001\002\000\004\004\011\001\002" +
    "\000\004\002\010\001\002\000\006\002\uffaf\004\uffaf\001" +
    "\002\000\004\002\001\001\002\000\010\002\000\004\000" +
    "\021\005\001\002\000\006\002\uffb0\004\uffb0\001\002\000" +
    "\004\044\020\001\002\000\004\002\uffae\001\002\000\004" +
    "\002\uffb1\001\002\000\006\002\000\004\013\001\002\000" +
    "\004\002\uffb2\001\002\000\004\004\021\001\002\000\004" +
    "\050\157\001\002\000\004\045\026\001\002\000\006\045" +
    "\uffd1\051\024\001\002\000\004\004\021\001\002\000\004" +
    "\045\uffd2\001\002\000\004\050\030\001\002\000\006\002" +
    "\uffb3\004\uffb3\001\002\000\006\012\035\013\033\001\002" +
    "\000\010\042\042\045\000\051\000\001\002\000\004\051" +
    "\037\001\002\000\010\042\uffdb\045\uffdb\051\uffdb\001\002" +
    "\000\002\001\002\000\010\042\uffdc\045\uffdc\051\uffdc\001" +
    "\002\000\006\002\uffb4\004\uffb4\001\002\000\006\012\035" +
    "\013\033\001\002\000\002\001\002\000\006\045\uffd6\051" +
    "\uffd6\001\002\000\032\004\065\005\063\006\046\007\053" +
    "\010\052\011\064\022\050\024\054\030\057\043\051\044" +
    "\060\046\061\001\002\000\006\045\uffd9\051\uffd9\001\002" +
    "\000\006\045\uffd7\051\uffd7\001\002\000\004\043\155\001" +
    "\002\000\012\043\uffe8\045\uffe8\047\uffe8\051\uffe8\001\002" +
    "\000\012\043\uffe4\045\uffe4\047\uffe4\051\uffe4\001\002\000" +
    "\004\044\152\001\002\000\010\042\150\045\000\051\000" +
    "\001\002\000\032\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\043\uffed\045\uffed\047\uffed" +
    "\051\uffed\001\002\000\026\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\043\ufff7\045\ufff7\047\ufff7\051\ufff7\054\ufff7" +
    "\001\002\000\010\007\053\024\054\044\060\001\002\000" +
    "\032\031\133\032\135\033\136\034\127\035\132\036\130" +
    "\037\131\040\134\043\uffe6\045\uffe6\047\uffe6\051\uffe6\001" +
    "\002\000\012\043\uffe3\045\uffe3\047\uffe3\051\uffe3\001\002" +
    "\000\010\010\052\011\064\030\057\001\002\000\010\007" +
    "\053\024\054\044\060\001\002\000\030\004\065\005\063" +
    "\006\046\007\053\010\052\011\064\022\050\024\054\030" +
    "\057\044\060\046\061\001\002\000\026\023\104\024\105" +
    "\025\101\026\106\027\103\043\uffe7\045\uffe7\047\uffe7\051" +
    "\uffe7\054\102\001\002\000\012\043\uffe9\045\uffe9\047\uffe9" +
    "\051\uffe9\001\002\000\032\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\043\uffec\045\uffec" +
    "\047\uffec\051\uffec\001\002\000\016\042\070\043\uffea\044" +
    "\067\045\uffea\047\uffea\051\uffea\001\002\000\012\043\uffe5" +
    "\045\uffe5\047\uffe5\051\uffe5\001\002\000\032\004\065\005" +
    "\063\006\046\007\053\010\052\011\064\022\050\024\054" +
    "\030\057\044\060\045\075\046\061\001\002\000\030\004" +
    "\065\005\063\006\046\007\053\010\052\011\064\022\050" +
    "\024\054\030\057\044\060\046\061\001\002\000\004\043" +
    "\072\001\002\000\012\043\uffeb\045\uffeb\047\uffeb\051\uffeb" +
    "\001\002\000\006\045\uffe1\051\077\001\002\000\004\045" +
    "\076\001\002\000\012\043\uffcf\045\uffcf\047\uffcf\051\uffcf" +
    "\001\002\000\012\043\uffd0\045\uffd0\047\uffd0\051\uffd0\001" +
    "\002\000\030\004\065\005\063\006\046\007\053\010\052" +
    "\011\064\022\050\024\054\030\057\044\060\046\061\001" +
    "\002\000\006\045\uffe2\047\uffe2\001\002\000\010\007\053" +
    "\024\054\044\060\001\002\000\010\007\053\024\054\044" +
    "\060\001\002\000\010\007\053\024\054\044\060\001\002" +
    "\000\010\007\053\024\054\044\060\001\002\000\010\007" +
    "\053\024\054\044\060\001\002\000\010\007\053\024\054" +
    "\044\060\001\002\000\026\023\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\027\ufffc\043\ufffc\045\ufffc\047\ufffc\051\ufffc\054\ufffc" +
    "\001\002\000\026\023\ufffe\024\ufffe\025\101\026\106\027" +
    "\103\043\ufffe\045\ufffe\047\ufffe\051\ufffe\054\102\001\002" +
    "\000\026\023\uffff\024\uffff\025\101\026\106\027\103\043" +
    "\uffff\045\uffff\047\uffff\051\uffff\054\102\001\002\000\026" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\043\ufffb\045" +
    "\ufffb\047\ufffb\051\ufffb\054\ufffb\001\002\000\026\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\043\ufffa\045\ufffa\047" +
    "\ufffa\051\ufffa\054\ufffa\001\002\000\026\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\043\ufffd\045\ufffd\047\ufffd\051" +
    "\ufffd\054\ufffd\001\002\000\006\047\uffe1\051\122\001\002" +
    "\000\004\047\121\001\002\000\004\047\120\001\002\000" +
    "\012\043\uffdd\045\uffdd\047\uffdd\051\uffdd\001\002\000\012" +
    "\043\uffde\045\uffde\047\uffde\051\uffde\001\002\000\032\004" +
    "\065\005\063\006\046\007\053\010\052\011\064\022\050" +
    "\024\054\030\057\044\060\046\061\047\uffdf\001\002\000" +
    "\004\047\uffe0\001\002\000\020\023\104\024\105\025\101" +
    "\026\106\027\103\045\125\054\102\001\002\000\026\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\043\ufff8\045\ufff8" +
    "\047\ufff8\051\ufff8\054\ufff8\001\002\000\032\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\043\uffee\045\uffee\047\uffee\051\uffee\001\002\000\010\010" +
    "\052\011\064\030\057\001\002\000\010\010\052\011\064" +
    "\030\057\001\002\000\010\010\052\011\064\030\057\001" +
    "\002\000\010\010\052\011\064\030\057\001\002\000\010" +
    "\010\052\011\064\030\057\001\002\000\010\010\052\011" +
    "\064\030\057\001\002\000\010\010\052\011\064\030\057" +
    "\001\002\000\010\010\052\011\064\030\057\001\002\000" +
    "\032\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\043\ufff0\045\ufff0\047\ufff0\051\ufff0\001" +
    "\002\000\032\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\043\ufff1\045\ufff1\047\ufff1\051" +
    "\ufff1\001\002\000\032\031\133\032\135\033\136\034\127" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\043\ufff3\045\ufff3\047" +
    "\ufff3\051\ufff3\001\002\000\032\031\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\043\ufff2\045" +
    "\ufff2\047\ufff2\051\ufff2\001\002\000\032\031\133\032\135" +
    "\033\136\034\127\035\ufff6\036\ufff6\037\131\040\134\043" +
    "\ufff6\045\ufff6\047\ufff6\051\ufff6\001\002\000\032\031\133" +
    "\032\135\033\136\034\127\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\043\ufff4\045\ufff4\047\ufff4\051\ufff4\001\002\000\032" +
    "\031\133\032\135\033\136\034\127\035\132\036\ufff5\037" +
    "\131\040\134\043\ufff5\045\ufff5\047\ufff5\051\ufff5\001\002" +
    "\000\032\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\043\uffef\045\uffef\047\uffef\051\uffef" +
    "\001\002\000\026\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\043\ufff9\045\ufff9\047\ufff9\051\ufff9\054\ufff9\001\002" +
    "\000\004\043\051\001\002\000\006\045\uffd8\051\uffd8\001" +
    "\002\000\030\004\065\005\063\006\046\007\053\010\052" +
    "\011\064\022\050\024\054\030\057\044\060\046\061\001" +
    "\002\000\004\045\154\001\002\000\012\043\uffce\045\uffce" +
    "\047\uffce\051\uffce\001\002\000\010\042\042\045\000\051" +
    "\000\001\002\000\006\045\uffda\051\uffda\001\002\000\006" +
    "\012\035\013\033\001\002\000\006\045\uffd3\051\uffd3\001" +
    "\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\010\002\005\003\006\004\003\001\001\000" +
    "\010\003\014\040\015\041\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\006\004\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\014\040\015\041\016\001\001\000\002\001\001\000\006" +
    "\021\022\023\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\022\023\024\001\001" +
    "\000\002\001\001\000\004\043\026\001\001\000\002\001" +
    "\001\000\010\014\030\015\031\016\033\001\001\000\010" +
    "\003\043\017\040\020\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\030\015\031\016\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\061" +
    "\006\054\007\065\010\055\011\044\024\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\043\020\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\125\001\001\000\004\005\123\001\001" +
    "\000\022\005\061\006\054\007\065\010\055\011\114\012" +
    "\115\013\116\024\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\061\006\054\007\065\010\055\011\072" +
    "\012\073\024\046\001\001\000\016\005\061\006\054\007" +
    "\065\010\055\011\070\024\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\061\006\054" +
    "\007\065\010\055\011\072\012\077\024\046\001\001\000" +
    "\002\001\001\000\004\005\113\001\001\000\004\005\112" +
    "\001\001\000\004\005\111\001\001\000\004\005\110\001" +
    "\001\000\004\005\107\001\001\000\004\005\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\061\006\054\007\065" +
    "\010\055\011\114\012\077\013\122\024\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\145\001\001\000\004\006\144\001" +
    "\001\000\004\006\143\001\001\000\004\006\142\001\001" +
    "\000\004\006\141\001\001\000\004\006\140\001\001\000" +
    "\004\006\137\001\001\000\004\006\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\061\006\054\007\065\010\055" +
    "\011\152\024\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\043\017\155\020\042\001\001\000\002" +
    "\001\001\000\006\014\030\015\157\001\001\000\002\001" +
    "\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 83. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // empty ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // oExpr ::= oExpr PLUS oExpr 
            {
                Integer RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Integer e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Integer> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Integer e2 = CUP$parser$stack.peek().<Integer> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("oExpr",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // oExpr ::= oExpr MINUS oExpr 
            {
                Integer RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Integer e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Integer> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Integer e2 = CUP$parser$stack.peek().<Integer> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("oExpr",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // oExpr ::= oExpr TIMES oExpr 
            {
                Integer RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Integer e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Integer> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Integer e2 = CUP$parser$stack.peek().<Integer> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("oExpr",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // oExpr ::= oExpr DIVIDE oExpr 
            {
                Integer RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Integer e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Integer> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Integer e2 = CUP$parser$stack.peek().<Integer> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("oExpr",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // oExpr ::= oExpr MODULO oExpr 
            {
                Integer RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Integer e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Integer> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Integer e2 = CUP$parser$stack.peek().<Integer> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("oExpr",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // oExpr ::= oExpr HIGH_MULT oExpr 
            {
                Integer RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Integer e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Integer> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Integer e2 = CUP$parser$stack.peek().<Integer> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("oExpr",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // oExpr ::= MINUS oExpr 
            {
                Integer RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Integer e = CUP$parser$stack.peek().<Integer> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("oExpr",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // oExpr ::= OPEN_PAREN oExpr CLOSE_PAREN 
            {
                Integer RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Integer e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Integer> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("oExpr",3, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // oExpr ::= INTEGER_LITERAL 
            {
                Integer RESULT = null;
                int nleft = CUP$parser$stack.peek().left;
                int nright = CUP$parser$stack.peek().right;
                Integer n = CUP$parser$stack.peek().<Integer> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("oExpr",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // bExpr ::= bExpr AND bExpr 
            {
                Boolean RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Boolean e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Boolean> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Boolean e2 = CUP$parser$stack.peek().<Boolean> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // bExpr ::= bExpr OR bExpr 
            {
                Boolean RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Boolean e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Boolean> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Boolean e2 = CUP$parser$stack.peek().<Boolean> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // bExpr ::= bExpr EQUAL bExpr 
            {
                Boolean RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Boolean e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Boolean> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Boolean e2 = CUP$parser$stack.peek().<Boolean> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // bExpr ::= bExpr NOT_EQUAL bExpr 
            {
                Boolean RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Boolean e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Boolean> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Boolean e2 = CUP$parser$stack.peek().<Boolean> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // bExpr ::= bExpr LT bExpr 
            {
                Boolean RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Boolean e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Boolean> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Boolean e2 = CUP$parser$stack.peek().<Boolean> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // bExpr ::= bExpr LEQ bExpr 
            {
                Boolean RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Boolean e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Boolean> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Boolean e2 = CUP$parser$stack.peek().<Boolean> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // bExpr ::= bExpr GT bExpr 
            {
                Boolean RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Boolean e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Boolean> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Boolean e2 = CUP$parser$stack.peek().<Boolean> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // bExpr ::= bExpr GEQ bExpr 
            {
                Boolean RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Boolean e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Boolean> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Boolean e2 = CUP$parser$stack.peek().<Boolean> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // bExpr ::= NOT bExpr 
            {
                Boolean RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Boolean e = CUP$parser$stack.peek().<Boolean> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // bExpr ::= TRUE 
            {
                Boolean RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // bExpr ::= FALSE 
            {
                Boolean RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bExpr",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // arrayIndex ::= IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIndex",5, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // expression ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // expression ::= STRING_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // expression ::= CHARACTER_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // expression ::= oExpr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // expression ::= bExpr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // expression ::= arrayIndex 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // expression ::= function_call 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // expression ::= arrayObj 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // expression_list ::= expression COMMA expression_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // expression_list ::= expression 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // expression_list_trailing_comma ::= expression COMMA expression_list_trailing_comma 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // expression_list_trailing_comma ::= expression COMMA 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // arrayObj ::= OPEN_BRACE expression_list CLOSE_BRACE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayObj",6, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // arrayObj ::= OPEN_BRACE expression_list_trailing_comma CLOSE_BRACE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayObj",6, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // basicType ::= INT 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("basicType",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // basicType ::= BOOL 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("basicType",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // arraySized ::= OPEN_BRACKET expression CLOSE_BRACKET arraySized 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arraySized",13, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // arraySized ::= arrayEmpty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arraySized",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // arrayEmpty ::= OPEN_BRACKET CLOSE_BRACKET arrayEmpty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayEmpty",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // arrayEmpty ::= empty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayEmpty",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // varType ::= basicType arraySized 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("varType",11, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // varTypes ::= varType COMMA varTypes 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("varTypes",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // varTypes ::= varType 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("varTypes",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // type_declaration ::= IDENTIFIER COLON varType 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // type_declaration_list ::= type_declaration COMMA type_declaration_list 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_list",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // type_declaration_list ::= type_declaration 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_list",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // function_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",18, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // function_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // function_call ::= LENGTH OPEN_PAREN expression CLOSE_PAREN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",18, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // assignment_lhs ::= IDENTIFIER 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // assignment_lhs ::= type_declaration 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // assignment_lhs ::= UNDERSCORE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // assignment_lhs_list ::= assignment_lhs COMMA assignment_lhs_list 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_list",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // assignment_lhs_list ::= assignment_lhs 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_list",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // assignment ::= assignment_lhs GETS expression 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // assignment ::= assignment_lhs_list GETS function_call 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",22, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block ELSE block 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",22, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // while_statement ::= WHILE OPEN_PAREN expression CLOSE_PAREN block 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",23, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // return_statement ::= RETURN expression_list 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",24, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // return_statement ::= RETURN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // statement_no_semicolon ::= if_statement 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // statement_no_semicolon ::= while_statement 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // statement_no_semicolon ::= procedure_call 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // statement_no_semicolon ::= type_declaration_list 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // statement_no_semicolon ::= assignment 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // statement ::= statement_no_semicolon 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // statement ::= statement_no_semicolon SEMICOLON 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // function_block ::= OPEN_BRACE blocks return_statement CLOSE_BRACE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",32, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // block ::= OPEN_BRACE blocks CLOSE_BRACE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // block ::= function_block 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // block ::= statement 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // blocks ::= block blocks 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // blocks ::= empty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // function_declaration ::= IDENTIFIER OPEN_PAREN type_declaration_list CLOSE_PAREN COLON varTypes function_body 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // function_declaration ::= IDENTIFIER OPEN_PAREN type_declaration_list CLOSE_PAREN function_body 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // function_declarations ::= function_declaration function_declarations 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declarations",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // function_declarations ::= empty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declarations",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // use_block ::= USE IDENTIFIER use_block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // use_block ::= empty 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // program ::= use_block function_declarations 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
