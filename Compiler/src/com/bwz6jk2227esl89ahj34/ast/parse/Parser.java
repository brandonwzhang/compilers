
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package com.bwz6jk2227esl89ahj34.ast.parse;

import com.bwz6jk2227esl89ahj34.ast.*;
import com.bwz6jk2227esl89ahj34.ast.type.*;
import com.bwz6jk2227esl89ahj34.util.Util;
import com.bwz6jk2227esl89ahj34.util.prettyprint.Pair;
import com.bwz6jk2227esl89ahj34.util.Triple;
import java.util.AbstractMap.SimpleEntry;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

/** CUP v0.11b 20150326 generated parser.
  */
public class Parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return ParserSym.class;
  }

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\004\000\002\003\002\000\002\004" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\007\004\000\002\007\004\000\002\022\003\000" +
    "\002\022\003\000\002\010\003\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\005\000\002\012\005\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\005\000" +
    "\002\017\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\006\000\002\021\003\000\002\021\003\000\002\021" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\004\000\002\021\003\000" +
    "\002\021\003\000\002\024\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\004\000\002\023" +
    "\005\000\002\023\005\000\002\023\004\000\002\027\003" +
    "\000\002\027\003\000\002\031\006\000\002\031\003\000" +
    "\002\032\005\000\002\032\003\000\002\030\004\000\002" +
    "\030\004\000\002\034\006\000\002\034\006\000\002\033" +
    "\006\000\002\033\006\000\002\035\006\000\002\035\005" +
    "\000\002\035\006\000\002\036\006\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\067\003\000\002\067\004\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\070\005\000\002\071\005\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\003\000\002\041\003\000\002\042\005\000\002\042\005" +
    "\000\002\043\005\000\002\043\005\000\002\044\007\000" +
    "\002\044\011\000\002\045\007\000\002\046\004\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\005" +
    "\000\002\053\003\000\002\052\003\000\002\052\004\000" +
    "\002\047\003\000\002\047\003\000\002\062\005\000\002" +
    "\062\005\000\002\050\004\000\002\050\004\000\002\050" +
    "\003\000\002\050\003\000\002\051\005\000\002\054\005" +
    "\000\002\054\003\000\002\055\005\000\002\056\005\000" +
    "\002\056\003\000\002\057\003\000\002\057\003\000\002" +
    "\060\013\000\002\060\011\000\002\061\006\000\002\061" +
    "\005\000\002\005\005\000\002\005\006\000\002\005\003" +
    "\000\002\063\003\000\002\063\003\000\002\064\004\000" +
    "\002\064\005\000\002\064\004\000\002\064\003\000\002" +
    "\065\007\000\002\065\011\000\002\066\004\000\002\066" +
    "\005\000\002\066\004\000\002\066\004\000\002\066\003" +
    "\000\002\073\003\000\002\073\003\000\002\074\005\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\002\004\000\002\002\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\014\002\000\003\007\004\000\021\005\056" +
    "\000\001\002\000\010\002\000\004\013\056\023\001\002" +
    "\000\004\004\013\001\002\000\004\002\011\001\002\000" +
    "\004\002\uff65\001\002\000\010\002\uff7a\004\uff7a\056\uff7a" +
    "\001\002\000\004\002\001\001\002\000\014\002\000\004" +
    "\000\021\005\051\015\056\000\001\002\000\122\002\uffff" +
    "\004\uffff\005\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020" +
    "\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff" +
    "\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036" +
    "\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff" +
    "\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053" +
    "\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\063\uffff" +
    "\001\002\000\010\002\uff7c\004\uff7c\056\uff7c\001\002\000" +
    "\012\002\000\004\000\021\005\056\000\001\002\000\010" +
    "\002\uff7b\004\uff7b\056\uff7b\001\002\000\004\040\u010d\001" +
    "\002\000\012\040\uff6c\043\057\047\322\050\056\001\002" +
    "\000\004\002\uff66\001\002\000\012\002\uff68\004\uff68\051" +
    "\uff68\056\uff68\001\002\000\004\004\013\001\002\000\010" +
    "\002\000\004\013\056\023\001\002\000\012\002\uff69\004" +
    "\uff69\051\uff69\056\uff69\001\002\000\004\040\uff6b\001\002" +
    "\000\012\002\000\004\013\051\035\056\023\001\002\000" +
    "\004\002\uff6d\001\002\000\012\002\uff67\004\uff67\051\uff67" +
    "\056\uff67\001\002\000\010\002\000\004\013\056\023\001" +
    "\002\000\004\002\uff6f\001\002\000\004\002\uff71\001\002" +
    "\000\010\002\000\004\013\056\023\001\002\000\004\002" +
    "\uff70\001\002\000\004\002\uff6e\001\002\000\006\045\042" +
    "\057\041\001\002\000\004\004\013\001\002\000\006\004" +
    "\013\046\000\001\002\000\004\046\u0108\001\002\000\010" +
    "\043\057\047\060\050\056\001\002\000\010\004\013\046" +
    "\000\051\054\001\002\000\010\004\uff79\046\uff79\051\uff79" +
    "\001\002\000\010\004\uff78\046\uff78\051\uff78\001\002\000" +
    "\006\004\013\046\000\001\002\000\004\046\uff74\001\002" +
    "\000\004\046\uff75\001\002\000\004\046\uff77\001\002\000" +
    "\006\004\013\046\000\001\002\000\004\046\uff76\001\002" +
    "\000\004\004\013\001\002\000\006\004\013\044\000\001" +
    "\002\000\010\004\013\012\064\013\062\001\002\000\042" +
    "\002\000\004\000\005\000\014\000\016\000\017\000\020" +
    "\000\041\067\045\000\046\000\051\000\052\000\055\000" +
    "\056\000\060\000\063\000\001\002\000\052\002\uffc7\004" +
    "\uffc7\005\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\040\uffc7\041\uffc7\044\uffc7\045\uffc7\046\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\055\uffc7\056\uffc7\060\uffc7\063\uffc7\001\002" +
    "\000\042\002\000\004\000\005\000\014\000\016\000\017" +
    "\000\020\000\041\067\045\000\046\000\051\000\052\000" +
    "\055\000\056\000\060\000\063\000\001\002\000\052\002" +
    "\uffc8\004\uffc8\005\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\040\uffc8\041\uffc8\044\uffc8\045\uffc8\046\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\055\uffc8\056\uffc8\060\uffc8\063\uffc8" +
    "\001\002\000\042\002\uffc5\004\uffc5\005\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\045\uffc5\046\uffc5\051\uffc5" +
    "\052\uffc5\055\uffc5\056\uffc5\060\uffc5\063\uffc5\001\002\000" +
    "\042\002\uffbe\004\uffbe\005\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\045\uffbe\046\uffbe\051\uffbe\052\uffbe\055" +
    "\uffbe\056\uffbe\060\uffbe\063\uffbe\001\002\000\040\004\013" +
    "\005\124\006\116\007\107\010\117\011\125\023\111\027" +
    "\120\042\106\043\121\045\112\055\102\060\072\062\114" +
    "\063\123\001\002\000\050\002\uffc3\004\uffc3\005\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\040\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\055\uffc3\056" +
    "\uffc3\060\uffc3\063\uffc3\001\002\000\052\002\uffd0\004\uffd0" +
    "\005\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\035" +
    "\131\042\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\055\uffd0\056\uffd0\060\uffd0\063\uffd0\001\002\000" +
    "\004\004\013\001\002\000\054\002\ufff7\004\ufff7\005\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\034\134\035" +
    "\ufff7\042\ufff7\044\ufff7\045\ufff7\046\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\055\ufff7\056\ufff7\060\ufff7\063\ufff7\001\002\000" +
    "\060\002\ufff5\004\ufff5\005\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\034\ufff5\035\ufff5\036\136\037\137\042" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\055\ufff5\056\ufff5\060\ufff5\063\ufff5\001\002\000\070\002" +
    "\ufff3\004\ufff3\005\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\030\142\031\143\032\144\033\141\034\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\042\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\055\ufff3\056\ufff3\060\ufff3\063" +
    "\ufff3\001\002\000\074\002\ufff0\004\ufff0\005\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\022\146\023\147\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\042\ufff0\044\ufff0\045\ufff0\046\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\055\ufff0\056\ufff0\060\ufff0\063\ufff0\001\002" +
    "\000\110\002\uffdc\004\uffdc\005\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056" +
    "\uffdc\060\uffdc\061\uffdc\063\uffdc\001\002\000\104\002\uffeb" +
    "\004\uffeb\005\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\022\uffeb\023\uffeb\024\151\025\154\026\153\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\042\uffeb\044\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\152\055\uffeb\056\uffeb\060\uffeb\063\uffeb\001" +
    "\002\000\104\002\uffe8\004\uffe8\005\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\042\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8" +
    "\060\uffe8\063\uffe8\001\002\000\004\043\224\001\002\000" +
    "\106\002\uffe3\004\uffe3\005\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\042\uffe3\044\uffe3\045\uffe3\046\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3\060\uffe3" +
    "\061\170\063\uffe3\001\002\000\110\002\uffda\004\uffda\005" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\041\uffda" +
    "\042\uffda\044\uffda\045\uffda\046\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\uffda\055\uffda\056\uffda\060\uffda\061\uffda\063\uffda" +
    "\001\002\000\110\002\uffe0\004\uffe0\005\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\041\221\042\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055" +
    "\uffe0\056\uffe0\060\uffe0\061\uffe0\063\uffe0\001\002\000\052" +
    "\002\000\004\000\005\000\014\000\015\000\016\000\017" +
    "\000\020\000\040\000\041\220\044\000\045\000\046\000" +
    "\050\000\051\000\052\000\055\000\056\000\060\000\063" +
    "\000\001\002\000\110\002\uffd9\004\uffd9\005\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\055\uffd9\056\uffd9\060\uffd9\061\uffd9\063\uffd9\001\002\000" +
    "\110\002\uffdd\004\uffdd\005\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd" +
    "\060\uffdd\061\uffdd\063\uffdd\001\002\000\036\004\013\005" +
    "\124\006\116\007\107\010\117\011\125\023\111\043\121" +
    "\045\112\054\215\055\102\060\072\062\114\063\123\001" +
    "\002\000\040\004\013\005\124\006\116\007\107\010\117" +
    "\011\125\023\111\027\120\043\121\045\112\046\204\055" +
    "\102\060\072\062\114\063\123\001\002\000\112\002\uffd7" +
    "\004\uffd7\005\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\041\uffd7\042\uffd7\043\173\044\uffd7\045\uffd7\046\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\056\uffd7\060" +
    "\uffd7\061\uffd7\063\uffd7\001\002\000\110\002\uffd2\004\uffd2" +
    "\005\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\041" +
    "\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\055\uffd2\056\uffd2\060\uffd2\061\uffd2\063" +
    "\uffd2\001\002\000\004\042\202\001\002\000\110\002\uffd5" +
    "\004\uffd5\005\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056\uffd5\060\uffd5\061" +
    "\uffd5\063\uffd5\001\002\000\110\002\ufff9\004\ufff9\005\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9\042" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\055\ufff9\056\ufff9\060\ufff9\061\ufff9\063\ufff9\001" +
    "\002\000\034\004\013\005\124\006\116\007\107\010\117" +
    "\011\125\027\120\043\121\045\112\055\102\060\072\062" +
    "\114\063\123\001\002\000\036\004\013\005\124\006\116" +
    "\007\107\010\117\011\125\023\111\027\120\043\121\045" +
    "\112\055\102\060\072\062\114\063\123\001\002\000\104" +
    "\002\uffe1\004\uffe1\005\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\042\uffe1\044\uffe1\045\uffe1\046\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\055\uffe1\056\uffe1\060\uffe1\063" +
    "\uffe1\001\002\000\110\002\uffd1\004\uffd1\005\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1\042\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\055\uffd1\056\uffd1\060\uffd1\061\uffd1\063\uffd1\001\002\000" +
    "\110\002\uffd6\004\uffd6\005\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\041\uffd6\042\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6" +
    "\060\uffd6\061\uffd6\063\uffd6\001\002\000\110\002\ufff8\004" +
    "\ufff8\005\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\041\ufff8\042\ufff8\044\ufff8\045\ufff8\046\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\060\ufff8\061\ufff8" +
    "\063\ufff8\001\002\000\110\002\uffd4\004\uffd4\005\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\063\uffd4\001\002" +
    "\000\104\002\uffe2\004\uffe2\005\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\042\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\060" +
    "\uffe2\063\uffe2\001\002\000\006\035\131\044\132\001\002" +
    "\000\036\004\013\005\124\006\116\007\107\010\117\011" +
    "\125\023\111\027\120\043\121\045\112\055\102\060\072" +
    "\062\114\063\123\001\002\000\110\002\uffd8\004\uffd8\005" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8" +
    "\042\uffd8\044\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\055\uffd8\056\uffd8\060\uffd8\061\uffd8\063\uffd8" +
    "\001\002\000\054\002\ufff6\004\ufff6\005\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\034\134\035\ufff6\042\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6\055" +
    "\ufff6\056\ufff6\060\ufff6\063\ufff6\001\002\000\036\004\013" +
    "\005\124\006\116\007\107\010\117\011\125\023\111\027" +
    "\120\043\121\045\112\055\102\060\072\062\114\063\123" +
    "\001\002\000\060\002\ufff4\004\ufff4\005\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\034\ufff4\035\ufff4\036\136" +
    "\037\137\042\ufff4\044\ufff4\045\ufff4\046\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\055\ufff4\056\ufff4\060\ufff4\063\ufff4\001\002" +
    "\000\036\004\013\005\124\006\116\007\107\010\117\011" +
    "\125\023\111\027\120\043\121\045\112\055\102\060\072" +
    "\062\114\063\123\001\002\000\036\004\013\005\124\006" +
    "\116\007\107\010\117\011\125\023\111\027\120\043\121" +
    "\045\112\055\102\060\072\062\114\063\123\001\002\000" +
    "\070\002\ufff1\004\ufff1\005\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\030\142\031\143\032\144\033\141\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\042\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\050\ufff1\051\ufff1\052\ufff1\055\ufff1\056\ufff1\060" +
    "\ufff1\063\ufff1\001\002\000\036\004\013\005\124\006\116" +
    "\007\107\010\117\011\125\023\111\027\120\043\121\045" +
    "\112\055\102\060\072\062\114\063\123\001\002\000\036" +
    "\004\013\005\124\006\116\007\107\010\117\011\125\023" +
    "\111\027\120\043\121\045\112\055\102\060\072\062\114" +
    "\063\123\001\002\000\036\004\013\005\124\006\116\007" +
    "\107\010\117\011\125\023\111\027\120\043\121\045\112" +
    "\055\102\060\072\062\114\063\123\001\002\000\036\004" +
    "\013\005\124\006\116\007\107\010\117\011\125\023\111" +
    "\027\120\043\121\045\112\055\102\060\072\062\114\063" +
    "\123\001\002\000\074\002\uffed\004\uffed\005\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\022\146\023\147\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\042\uffed\044\uffed\045\uffed\046\uffed\050\uffed\051" +
    "\uffed\052\uffed\055\uffed\056\uffed\060\uffed\063\uffed\001\002" +
    "\000\036\004\013\005\124\006\116\007\107\010\117\011" +
    "\125\023\111\027\120\043\121\045\112\055\102\060\072" +
    "\062\114\063\123\001\002\000\036\004\013\005\124\006" +
    "\116\007\107\010\117\011\125\023\111\027\120\043\121" +
    "\045\112\055\102\060\072\062\114\063\123\001\002\000" +
    "\104\002\uffe9\004\uffe9\005\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024\151\025\154\026" +
    "\153\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\042\uffe9\044\uffe9\045\uffe9\046\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\053\152\055\uffe9\056\uffe9\060\uffe9" +
    "\063\uffe9\001\002\000\036\004\013\005\124\006\116\007" +
    "\107\010\117\011\125\023\111\027\120\043\121\045\112" +
    "\055\102\060\072\062\114\063\123\001\002\000\036\004" +
    "\013\005\124\006\116\007\107\010\117\011\125\023\111" +
    "\027\120\043\121\045\112\055\102\060\072\062\114\063" +
    "\123\001\002\000\036\004\013\005\124\006\116\007\107" +
    "\010\117\011\125\023\111\027\120\043\121\045\112\055" +
    "\102\060\072\062\114\063\123\001\002\000\036\004\013" +
    "\005\124\006\116\007\107\010\117\011\125\023\111\027" +
    "\120\043\121\045\112\055\102\060\072\062\114\063\123" +
    "\001\002\000\104\002\uffe5\004\uffe5\005\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\042\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\056" +
    "\uffe5\060\uffe5\063\uffe5\001\002\000\104\002\uffe4\004\uffe4" +
    "\005\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\042" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\055\uffe4\056\uffe4\060\uffe4\063\uffe4\001\002\000" +
    "\104\002\uffe6\004\uffe6\005\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\042\uffe6\044\uffe6\045\uffe6\046\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6\060\uffe6" +
    "\063\uffe6\001\002\000\104\002\uffe7\004\uffe7\005\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\042\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\055" +
    "\uffe7\056\uffe7\060\uffe7\063\uffe7\001\002\000\104\002\uffea" +
    "\004\uffea\005\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\022\uffea\023\uffea\024\151\025\154\026\153\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\042\uffea\044\uffea\045\uffea\046\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\152\055\uffea\056\uffea\060\uffea\063\uffea\001" +
    "\002\000\074\002\uffee\004\uffee\005\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\022\146\023\147\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\042\uffee\044\uffee\045\uffee\046\uffee\050\uffee\051\uffee\052" +
    "\uffee\055\uffee\056\uffee\060\uffee\063\uffee\001\002\000\074" +
    "\002\uffef\004\uffef\005\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\022\146\023\147\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\042\uffef\044" +
    "\uffef\045\uffef\046\uffef\050\uffef\051\uffef\052\uffef\055\uffef" +
    "\056\uffef\060\uffef\063\uffef\001\002\000\074\002\uffec\004" +
    "\uffec\005\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\022\146\023\147\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\042\uffec\044\uffec\045\uffec" +
    "\046\uffec\050\uffec\051\uffec\052\uffec\055\uffec\056\uffec\060" +
    "\uffec\063\uffec\001\002\000\070\002\ufff2\004\ufff2\005\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\030\142\031" +
    "\143\032\144\033\141\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\042\ufff2\044\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\055\ufff2\056\ufff2\060\ufff2\063\ufff2\001\002\000\106" +
    "\002\ufffa\004\ufffa\005\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\042\ufffa\044\ufffa\045\ufffa\046\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\055\ufffa\056\ufffa\060\ufffa\061" +
    "\170\063\ufffa\001\002\000\104\002\ufffb\004\ufffb\005\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\042\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\055\ufffb\056\ufffb\060\ufffb\063\ufffb\001\002\000\006\004" +
    "\013\055\102\001\002\000\110\002\uffde\004\uffde\005\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\042\uffde\043" +
    "\173\044\uffde\045\uffde\046\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\055\uffde\056\uffde\060\uffde\061\uffde\063\uffde\001" +
    "\002\000\106\002\uffdf\004\uffdf\005\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\042\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf" +
    "\060\uffdf\061\uffdf\063\uffdf\001\002\000\040\004\013\005" +
    "\124\006\116\007\107\010\117\011\125\023\111\027\120" +
    "\043\121\044\176\045\112\055\102\060\072\062\114\063" +
    "\123\001\002\000\004\044\201\001\002\000\042\004\uffce" +
    "\005\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\044" +
    "\uffce\045\uffce\046\uffce\050\177\051\uffce\052\uffce\055\uffce" +
    "\060\uffce\063\uffce\001\002\000\110\002\uffbb\004\uffbb\005" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\041\uffbb" +
    "\042\uffbb\044\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\063\uffbb" +
    "\001\002\000\036\004\013\005\124\006\116\007\107\010" +
    "\117\011\125\023\111\027\120\043\121\045\112\055\102" +
    "\060\072\062\114\063\123\001\002\000\040\004\uffcf\005" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\051\uffcf\052\uffcf\055\uffcf\060\uffcf\063" +
    "\uffcf\001\002\000\110\002\uffbc\004\uffbc\005\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\055\uffbc\056\uffbc\060\uffbc\061\uffbc\063\uffbc\001\002\000" +
    "\044\002\000\004\000\005\000\014\000\015\000\016\000" +
    "\017\000\020\000\041\067\045\000\046\000\051\000\052" +
    "\000\055\000\056\000\060\000\063\000\001\002\000\042" +
    "\002\uffc6\004\uffc6\005\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\045\uffc6\046\uffc6\051\uffc6\052\uffc6\055\uffc6" +
    "\056\uffc6\060\uffc6\063\uffc6\001\002\000\110\002\uffc9\004" +
    "\uffc9\005\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\041\uffc9\042\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\060\uffc9\061\uffc9" +
    "\063\uffc9\001\002\000\004\046\213\001\002\000\004\046" +
    "\212\001\002\000\006\046\uffce\050\210\001\002\000\040" +
    "\004\013\005\124\006\116\007\107\010\117\011\125\023" +
    "\111\027\120\043\121\045\112\046\uffcc\055\102\060\072" +
    "\062\114\063\123\001\002\000\004\046\uffcd\001\002\000" +
    "\110\002\uffca\004\uffca\005\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\041\uffca\042\uffca\044\uffca\045\uffca\046" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056\uffca" +
    "\060\uffca\061\uffca\063\uffca\001\002\000\110\002\uffcb\004" +
    "\uffcb\005\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\041\uffcb\042\uffcb\044\uffcb\045\uffcb\046\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\060\uffcb\061\uffcb" +
    "\063\uffcb\001\002\000\106\002\ufffc\004\ufffc\005\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\042\ufffc\044\ufffc" +
    "\045\ufffc\046\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\055" +
    "\ufffc\056\ufffc\060\ufffc\061\170\063\ufffc\001\002\000\104" +
    "\002\ufffd\004\ufffd\005\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\042\ufffd\044\ufffd\045\ufffd\046\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\055\ufffd\056\ufffd\060\ufffd\063" +
    "\ufffd\001\002\000\104\002\ufffe\004\ufffe\005\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\042\ufffe\044\ufffe\045" +
    "\ufffe\046\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\055\ufffe" +
    "\056\ufffe\060\ufffe\063\ufffe\001\002\000\050\002\uffc4\004" +
    "\uffc4\005\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\040\uffc4\044\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\055\uffc4\056\uffc4\060\uffc4\063\uffc4\001\002\000\004" +
    "\042\106\001\002\000\036\004\013\005\124\006\116\007" +
    "\107\010\117\011\125\023\111\027\120\043\121\045\112" +
    "\055\102\060\072\062\114\063\123\001\002\000\006\035" +
    "\131\042\223\001\002\000\110\002\uffdb\004\uffdb\005\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb\042" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\063\uffdb\001" +
    "\002\000\036\004\013\005\124\006\116\007\107\010\117" +
    "\011\125\023\111\027\120\043\121\045\112\055\102\060" +
    "\072\062\114\063\123\001\002\000\004\044\226\001\002" +
    "\000\112\002\uffba\004\uffba\005\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\044\uffba" +
    "\045\uffba\046\uffba\050\uffba\051\uffba\052\uffba\053\uffba\055" +
    "\uffba\056\uffba\060\uffba\061\uffba\063\uffba\001\002\000\110" +
    "\002\uffd3\004\uffd3\005\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\041\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\060" +
    "\uffd3\061\uffd3\063\uffd3\001\002\000\042\002\uffbd\004\uffbd" +
    "\005\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\045" +
    "\uffbd\046\uffbd\051\uffbd\052\uffbd\055\uffbd\056\uffbd\060\uffbd" +
    "\063\uffbd\001\002\000\004\047\u0103\001\002\000\004\044" +
    "\240\001\002\000\004\044\uff82\001\002\000\006\044\uff83" +
    "\050\236\001\002\000\004\044\uff81\001\002\000\004\004" +
    "\013\001\002\000\004\044\uff84\001\002\000\006\045\241" +
    "\047\242\001\002\000\032\004\013\005\307\014\272\016" +
    "\306\017\266\020\264\045\265\046\000\052\253\055\102" +
    "\060\252\063\304\001\002\000\010\004\013\012\064\013" +
    "\062\001\002\000\012\041\220\044\000\045\000\050\000" +
    "\001\002\000\006\045\uff86\050\376\001\002\000\004\045" +
    "\250\001\002\000\012\041\220\044\000\045\000\050\000" +
    "\001\002\000\010\044\uffc2\045\uffc2\050\uffc2\001\002\000" +
    "\032\004\013\005\307\014\272\016\306\017\266\020\264" +
    "\045\265\046\000\052\253\055\102\060\252\063\304\001" +
    "\002\000\036\004\uff90\005\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\045\uff90\046\uff90\051\uff90\052\uff90\055" +
    "\uff90\060\uff90\063\uff90\001\002\000\004\004\013\001\002" +
    "\000\006\040\uffa7\050\uffa3\001\002\000\004\061\371\001" +
    "\002\000\010\040\uffa8\041\uffb8\061\uffb2\001\002\000\036" +
    "\004\uff98\005\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020" +
    "\uff98\045\uff98\046\uff98\051\uff98\052\uff98\055\uff98\060\uff98" +
    "\063\uff98\001\002\000\004\040\366\001\002\000\006\040" +
    "\uffa9\050\uffa4\001\002\000\010\040\uffaa\041\uffb5\061\uffb0" +
    "\001\002\000\004\046\uff89\001\002\000\004\041\363\001" +
    "\002\000\040\004\013\005\124\006\116\007\107\010\117" +
    "\011\125\023\111\027\120\043\121\045\112\046\uff8a\055" +
    "\102\060\072\062\114\063\123\001\002\000\032\004\013" +
    "\005\307\014\272\016\306\017\266\020\264\045\265\046" +
    "\000\052\253\055\102\060\252\063\304\001\002\000\036" +
    "\004\uff93\005\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020" +
    "\uff93\045\uff93\046\uff93\051\uff93\052\uff93\055\uff93\060\uff93" +
    "\063\uff93\001\002\000\036\004\uff8f\005\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\045\uff8f\046\uff8f\051\uff8f" +
    "\052\uff8f\055\uff8f\060\uff8f\063\uff8f\001\002\000\032\004" +
    "\013\005\307\014\272\016\306\017\266\020\264\045\265" +
    "\046\000\052\253\055\102\060\252\063\304\001\002\000" +
    "\036\004\uff99\005\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\045\uff99\046\uff99\051\uff99\052\uff99\055\uff99\060" +
    "\uff99\063\uff99\001\002\000\004\043\352\001\002\000\036" +
    "\004\uff95\005\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\045\uff95\046\uff95\051\uff95\052\uff95\055\uff95\060\uff95" +
    "\063\uff95\001\002\000\016\040\uffab\041\uffb6\043\321\047" +
    "\322\050\056\061\uffb4\001\002\000\004\050\337\001\002" +
    "\000\036\004\uff96\005\uff96\014\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\045\uff96\046\uff96\051\uff96\052\uff96\055\uff96" +
    "\060\uff96\063\uff96\001\002\000\004\040\335\001\002\000" +
    "\032\004\013\005\307\014\272\016\306\017\266\020\264" +
    "\045\265\046\000\052\253\055\102\060\252\063\304\001" +
    "\002\000\036\004\uff92\005\uff92\014\uff92\015\uff92\016\uff92" +
    "\017\uff92\020\uff92\045\uff92\046\uff92\051\333\052\uff92\055" +
    "\uff92\060\uff92\063\uff92\001\002\000\006\040\uffa6\061\uffb1" +
    "\001\002\000\006\040\uffa5\061\uffaf\001\002\000\004\061" +
    "\uffae\001\002\000\036\004\uff9a\005\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\045\uff9a\046\uff9a\051\uff9a\052" +
    "\uff9a\055\uff9a\060\uff9a\063\uff9a\001\002\000\004\043\313" +
    "\001\002\000\004\041\uffb7\001\002\000\004\046\312\001" +
    "\002\000\036\004\uff97\005\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\020\uff97\045\uff97\046\uff97\051\uff97\052\uff97\055" +
    "\uff97\060\uff97\063\uff97\001\002\000\012\002\uff80\004\uff80" +
    "\046\uff80\056\uff80\001\002\000\036\004\013\005\124\006" +
    "\116\007\107\010\117\011\125\023\111\027\120\043\121" +
    "\045\112\055\102\060\072\062\114\063\123\001\002\000" +
    "\004\044\315\001\002\000\030\004\013\005\307\014\272" +
    "\016\306\017\266\020\316\045\265\052\253\055\102\060" +
    "\252\063\304\001\002\000\036\004\013\005\124\006\116" +
    "\007\107\010\117\011\125\023\111\027\120\043\121\045" +
    "\112\055\102\060\072\062\114\063\123\001\002\000\036" +
    "\004\uff9c\005\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\045\uff9c\046\uff9c\051\uff9c\052\uff9c\055\uff9c\060\uff9c" +
    "\063\uff9c\001\002\000\014\040\uffab\041\uffb6\043\321\047" +
    "\322\061\uffb4\001\002\000\040\004\013\005\124\006\116" +
    "\007\107\010\117\011\125\023\111\027\120\043\121\044" +
    "\330\045\112\055\102\060\072\062\114\063\123\001\002" +
    "\000\010\004\013\012\064\013\062\001\002\000\050\002" +
    "\000\004\000\005\000\014\000\015\000\016\000\017\000" +
    "\020\000\040\000\041\067\045\000\046\000\050\000\051" +
    "\000\052\000\055\000\056\000\060\000\063\000\001\002" +
    "\000\050\002\000\004\000\005\000\014\000\015\000\016" +
    "\000\017\000\020\000\040\000\041\067\045\000\046\000" +
    "\050\000\051\000\052\000\055\000\056\000\060\000\063" +
    "\000\001\002\000\046\002\uffc5\004\uffc5\005\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\040\uffc0\045\uffc5\046" +
    "\uffc5\050\uffc0\051\uffc5\052\uffc5\055\uffc5\056\uffc5\060\uffc5" +
    "\063\uffc5\001\002\000\046\002\uffc5\004\uffc5\005\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\040\uffbf\045\uffc5" +
    "\046\uffc5\050\uffbf\051\uffc5\052\uffc5\055\uffc5\056\uffc5\060" +
    "\uffc5\063\uffc5\001\002\000\004\044\331\001\002\000\044" +
    "\004\uff7d\005\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020" +
    "\uff7d\040\uffbb\041\uffbb\045\uff7d\046\uff7d\051\uff7d\052\uff7d" +
    "\055\uff7d\060\uff7d\061\uffbb\063\uff7d\001\002\000\044\004" +
    "\uff7e\005\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e" +
    "\040\uffbc\041\uffbc\045\uff7e\046\uff7e\051\uff7e\052\uff7e\055" +
    "\uff7e\060\uff7e\061\uffbc\063\uff7e\001\002\000\036\004\uff9b" +
    "\005\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\045" +
    "\uff9b\046\uff9b\051\uff9b\052\uff9b\055\uff9b\060\uff9b\063\uff9b" +
    "\001\002\000\036\004\uff91\005\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\020\uff91\045\uff91\046\uff91\051\uff91\052\uff91" +
    "\055\uff91\060\uff91\063\uff91\001\002\000\004\046\uff8b\001" +
    "\002\000\036\004\013\005\124\006\116\007\107\010\117" +
    "\011\125\023\111\027\120\043\121\045\112\055\102\060" +
    "\072\062\114\063\123\001\002\000\036\004\uffa0\005\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\045\uffa0\046" +
    "\uffa0\051\uffa0\052\uffa0\055\uffa0\060\uffa0\063\uffa0\001\002" +
    "\000\006\004\013\052\341\001\002\000\004\047\345\001" +
    "\002\000\006\040\uffa3\050\uffa3\001\002\000\006\040\uffa1" +
    "\050\337\001\002\000\004\040\uffa2\001\002\000\006\040" +
    "\uffa4\050\uffa4\001\002\000\010\004\013\012\064\013\062" +
    "\001\002\000\010\040\000\041\220\050\000\001\002\000" +
    "\010\040\000\041\220\050\000\001\002\000\006\040\uffc0" +
    "\050\uffc0\001\002\000\006\040\uffbf\050\uffbf\001\002\000" +
    "\036\004\013\005\124\006\116\007\107\010\117\011\125" +
    "\023\111\027\120\043\121\045\112\055\102\060\072\062" +
    "\114\063\123\001\002\000\004\044\354\001\002\000\030" +
    "\004\013\005\307\014\272\016\306\017\266\020\316\045" +
    "\265\052\253\055\102\060\252\063\304\001\002\000\036" +
    "\004\uff9e\005\uff9e\014\uff9e\015\356\016\uff9e\017\uff9e\020" +
    "\uff9e\045\uff9e\046\uff9e\051\uff9e\052\uff9e\055\uff9e\060\uff9e" +
    "\063\uff9e\001\002\000\030\004\013\005\307\014\272\016" +
    "\306\017\266\020\316\045\265\052\253\055\102\060\252" +
    "\063\304\001\002\000\036\004\uff9d\005\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\045\uff9d\046\uff9d\051\uff9d" +
    "\052\uff9d\055\uff9d\060\uff9d\063\uff9d\001\002\000\004\046" +
    "\uff8c\001\002\000\004\046\362\001\002\000\036\004\uff88" +
    "\005\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\045" +
    "\uff88\046\uff88\051\uff88\052\uff88\055\uff88\060\uff88\063\uff88" +
    "\001\002\000\036\004\013\005\124\006\116\007\107\010" +
    "\117\011\125\023\111\027\120\043\121\045\112\055\102" +
    "\060\072\062\114\063\123\001\002\000\004\042\365\001" +
    "\002\000\010\040\uffb9\041\uffb9\061\uffb9\001\002\000\006" +
    "\004\013\055\102\001\002\000\004\043\173\001\002\000" +
    "\036\004\uff9f\005\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\045\uff9f\046\uff9f\051\uff9f\052\uff9f\055\uff9f\060" +
    "\uff9f\063\uff9f\001\002\000\006\004\013\055\102\001\002" +
    "\000\010\040\uffac\043\321\061\uffac\001\002\000\006\040" +
    "\uffad\061\uffad\001\002\000\036\004\uff94\005\uff94\014\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\045\uff94\046\uff94\051" +
    "\uff94\052\uff94\055\uff94\060\uff94\063\uff94\001\002\000\004" +
    "\061\uffb3\001\002\000\010\004\013\012\064\013\062\001" +
    "\002\000\004\045\uff87\001\002\000\010\044\uffc1\045\uffc1" +
    "\050\uffc1\001\002\000\004\046\u0102\001\002\000\012\002" +
    "\uff7f\004\uff7f\046\uff7f\056\uff7f\001\002\000\010\004\013" +
    "\012\064\013\062\001\002\000\006\044\uff85\050\uff85\001" +
    "\002\000\006\047\060\050\056\001\002\000\040\002\uff8d" +
    "\004\uff8d\005\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d\045" +
    "\uff8d\046\uff8d\051\uff8d\052\uff8d\055\uff8d\056\uff8d\060\uff8d" +
    "\063\uff8d\001\002\000\040\002\uff8e\004\uff8e\005\uff8e\014" +
    "\uff8e\016\uff8e\017\uff8e\020\uff8e\045\uff8e\046\uff8e\051\uff8e" +
    "\052\uff8e\055\uff8e\056\uff8e\060\uff8e\063\uff8e\001\002\000" +
    "\010\002\uff73\004\uff73\056\uff73\001\002\000\004\045\u010a" +
    "\001\002\000\006\004\013\046\000\001\002\000\004\046" +
    "\u010c\001\002\000\010\002\uff72\004\uff72\056\uff72\001\002" +
    "\000\036\004\013\005\124\006\116\007\107\010\117\011" +
    "\125\023\111\027\120\043\121\045\112\055\102\060\072" +
    "\062\114\063\123\001\002\000\012\002\uff6a\004\uff6a\051" +
    "\uff6a\056\uff6a\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\010\002\005\003\007\005\003\001\001\000" +
    "\030\003\027\004\017\033\030\034\025\060\031\062\024" +
    "\065\023\066\020\072\026\073\016\074\021\001\001\000" +
    "\004\004\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\007\005" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\007\005\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\037\001\001\000\030\003\027\004\017\033" +
    "\030\034\025\060\031\062\024\065\023\066\036\072\026" +
    "\073\016\074\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\027\004\017\033\030\034\025\060\031" +
    "\062\024\065\023\066\033\072\026\073\016\074\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\027" +
    "\004\017\033\030\034\025\060\031\062\024\065\023\066" +
    "\032\072\026\073\016\074\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\027\004\017\033\030\034" +
    "\025\060\031\062\024\065\023\066\035\072\026\073\016" +
    "\074\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u0108\001\001\000\020\003\050" +
    "\004\043\033\046\060\047\062\045\063\044\064\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\050" +
    "\004\043\033\046\060\047\062\045\063\044\064\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\050" +
    "\004\043\033\046\060\047\062\045\063\044\064\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\050\004\043\033\046\060\047\062\045\063" +
    "\044\064\054\001\001\000\002\001\001\000\010\004\u0104" +
    "\033\u0106\062\u0105\001\001\000\014\003\234\004\230\055" +
    "\233\056\232\057\231\001\001\000\006\004\060\027\062" +
    "\001\001\000\010\003\067\031\227\032\064\001\001\000" +
    "\002\001\001\000\010\003\067\031\065\032\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\112\006\121\007\126\010\070\011\072\012\073" +
    "\013\074\014\075\015\077\016\100\017\102\020\104\021" +
    "\107\022\103\023\125\024\114\035\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\067\032\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\112\006\215" +
    "\017\213\020\104\021\107\022\103\023\125\035\076\001" +
    "\001\000\050\004\112\006\121\007\126\010\070\011\072" +
    "\012\073\013\074\014\075\015\077\016\100\017\102\020" +
    "\104\021\107\022\103\023\125\024\206\025\204\026\205" +
    "\035\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\112\007\166\017\165\020\104\021\107\022\103\023" +
    "\125\035\076\001\001\000\042\004\112\006\121\007\126" +
    "\010\127\011\072\012\073\013\074\014\075\015\077\016" +
    "\100\017\102\020\104\021\107\022\103\023\125\035\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\112\006\121\007\126\011" +
    "\132\012\073\013\074\014\075\015\077\016\100\017\102" +
    "\020\104\021\107\022\103\023\125\035\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\112\006\121" +
    "\007\126\012\134\013\074\014\075\015\077\016\100\017" +
    "\102\020\104\021\107\022\103\023\125\035\076\001\001" +
    "\000\002\001\001\000\034\004\112\006\121\007\126\013" +
    "\164\014\075\015\077\016\100\017\102\020\104\021\107" +
    "\022\103\023\125\035\076\001\001\000\034\004\112\006" +
    "\121\007\126\013\137\014\075\015\077\016\100\017\102" +
    "\020\104\021\107\022\103\023\125\035\076\001\001\000" +
    "\002\001\001\000\032\004\112\006\121\007\126\014\163" +
    "\015\077\016\100\017\102\020\104\021\107\022\103\023" +
    "\125\035\076\001\001\000\032\004\112\006\121\007\126" +
    "\014\162\015\077\016\100\017\102\020\104\021\107\022" +
    "\103\023\125\035\076\001\001\000\032\004\112\006\121" +
    "\007\126\014\161\015\077\016\100\017\102\020\104\021" +
    "\107\022\103\023\125\035\076\001\001\000\032\004\112" +
    "\006\121\007\126\014\144\015\077\016\100\017\102\020" +
    "\104\021\107\022\103\023\125\035\076\001\001\000\002" +
    "\001\001\000\030\004\112\006\121\007\126\015\160\016" +
    "\100\017\102\020\104\021\107\022\103\023\125\035\076" +
    "\001\001\000\030\004\112\006\121\007\126\015\147\016" +
    "\100\017\102\020\104\021\107\022\103\023\125\035\076" +
    "\001\001\000\002\001\001\000\026\004\112\006\121\007" +
    "\126\016\157\017\102\020\104\021\107\022\103\023\125" +
    "\035\076\001\001\000\026\004\112\006\121\007\126\016" +
    "\156\017\102\020\104\021\107\022\103\023\125\035\076" +
    "\001\001\000\026\004\112\006\121\007\126\016\155\017" +
    "\102\020\104\021\107\022\103\023\125\035\076\001\001" +
    "\000\026\004\112\006\121\007\126\016\154\017\102\020" +
    "\104\021\107\022\103\023\125\035\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\170\035\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\112\006\121\007" +
    "\126\010\070\011\072\012\073\013\074\014\075\015\077" +
    "\016\100\017\102\020\104\021\107\022\103\023\125\024" +
    "\174\025\173\035\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\112\006\121\007" +
    "\126\010\070\011\072\012\073\013\074\014\075\015\077" +
    "\016\100\017\102\020\104\021\107\022\103\023\125\024" +
    "\174\025\177\035\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\067\031\202\032\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\004\112\006\121\007" +
    "\126\010\070\011\072\012\073\013\074\014\075\015\077" +
    "\016\100\017\102\020\104\021\107\022\103\023\125\024" +
    "\206\025\177\026\210\035\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\112\006\121\007\126\010\221\011" +
    "\072\012\073\013\074\014\075\015\077\016\100\017\102" +
    "\020\104\021\107\022\103\023\125\035\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\112\006\121" +
    "\007\126\010\070\011\072\012\073\013\074\014\075\015" +
    "\077\016\100\017\102\020\104\021\107\022\103\023\125" +
    "\024\174\025\224\035\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\230\055\233\056\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\261\004\273\033\310\034\257\035\254\036\260\037\262" +
    "\040\276\041\274\042\256\043\275\044\304\045\270\046" +
    "\272\047\267\050\u0100\051\250\052\266\053\300\061\255" +
    "\062\277\067\253\070\301\071\302\001\001\000\012\004" +
    "\242\027\245\030\243\054\244\001\001\000\006\003\067" +
    "\032\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\067\032\246\001\001\000\002\001\001\000\062" +
    "\003\261\004\273\033\310\034\257\035\254\036\260\037" +
    "\262\040\276\041\274\042\256\043\275\044\304\045\270" +
    "\046\272\047\267\050\307\051\250\052\266\053\300\061" +
    "\255\062\277\067\253\070\301\071\302\001\001\000\002" +
    "\001\001\000\004\004\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\112\006\121\007\126" +
    "\010\070\011\072\012\073\013\074\014\075\015\077\016" +
    "\100\017\102\020\104\021\107\022\103\023\125\024\174" +
    "\025\331\035\076\001\001\000\062\003\261\004\273\033" +
    "\310\034\257\035\254\036\260\037\262\040\276\041\274" +
    "\042\256\043\275\044\304\045\270\046\272\047\267\050" +
    "\360\051\250\052\266\053\300\061\255\062\277\067\253" +
    "\070\301\071\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\261\004\273\033\310\034\257\035\254" +
    "\036\260\037\262\040\276\041\274\042\256\043\275\044" +
    "\304\045\270\046\272\047\267\050\357\051\250\052\266" +
    "\053\300\061\255\062\277\067\253\070\301\071\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\261\004\273\033\310\034\257" +
    "\035\254\036\260\037\262\040\276\041\274\042\256\043" +
    "\275\044\304\045\270\046\272\047\267\050\333\051\250" +
    "\052\266\053\300\061\255\062\277\067\253\070\301\071" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\112\006\121\007\126\010" +
    "\070\011\072\012\073\013\074\014\075\015\077\016\100" +
    "\017\102\020\104\021\107\022\103\023\125\024\313\035" +
    "\076\001\001\000\002\001\001\000\054\004\317\033\310" +
    "\034\257\035\254\036\260\037\262\040\276\041\274\042" +
    "\256\043\275\044\304\045\270\046\272\047\316\051\250" +
    "\052\266\053\300\061\255\067\253\070\301\071\302\001" +
    "\001\000\046\004\112\006\121\007\126\010\070\011\072" +
    "\012\073\013\074\014\075\015\077\016\100\017\102\020" +
    "\104\021\107\022\103\023\125\024\174\025\331\035\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\112\006\121\007\126\010\070\011\072\012\073\013\074" +
    "\014\075\015\077\016\100\017\102\020\104\021\107\022" +
    "\103\023\125\024\174\025\326\035\076\001\001\000\006" +
    "\004\322\027\323\001\001\000\010\003\067\031\227\032" +
    "\325\001\001\000\010\003\067\031\065\032\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\112\006\121\007" +
    "\126\010\070\011\072\012\073\013\074\014\075\015\077" +
    "\016\100\017\102\020\104\021\107\022\103\023\125\024" +
    "\335\035\076\001\001\000\002\001\001\000\012\004\337" +
    "\034\343\041\341\042\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\345\027\346\001\001\000\006\003" +
    "\067\032\350\001\001\000\006\003\067\032\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\112\006" +
    "\121\007\126\010\070\011\072\012\073\013\074\014\075" +
    "\015\077\016\100\017\102\020\104\021\107\022\103\023" +
    "\125\024\352\035\076\001\001\000\002\001\001\000\054" +
    "\004\317\033\310\034\257\035\254\036\260\037\262\040" +
    "\276\041\274\042\256\043\275\044\304\045\270\046\272" +
    "\047\354\051\250\052\266\053\300\061\255\067\253\070" +
    "\301\071\302\001\001\000\002\001\001\000\054\004\317" +
    "\033\310\034\257\035\254\036\260\037\262\040\276\041" +
    "\274\042\256\043\275\044\304\045\270\046\272\047\356" +
    "\051\250\052\266\053\300\061\255\067\253\070\301\071" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\112\006\121\007" +
    "\126\010\070\011\072\012\073\013\074\014\075\015\077" +
    "\016\100\017\102\020\104\021\107\022\103\023\125\024" +
    "\363\035\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\366\035\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\371\035\372\061\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\242\027\245\030\243\054\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\242\027\245\030\u0103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\050\004\043\033\046\060\047\062\045\063" +
    "\044\064\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\112\006\121\007\126\010\070\011\072\012" +
    "\073\013\074\014\075\015\077\016\100\017\102\020\104" +
    "\021\107\022\103\023\125\024\u010d\035\076\001\001\000" +
    "\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}




    public boolean hasSyntaxError = false;
    public String syntaxErrMessage = "";

    public void syntax_error(java_cup.runtime.Symbol cur_token){
        hasSyntaxError = true;
        syntaxErrMessage = cur_token.left + ":" + cur_token.right +
          " error: Unexpected token " + Util.symbolTranslation.get(cur_token.sym);
        if (cur_token.value != null) {
            syntaxErrMessage += " " + cur_token.value;
        }
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
    private final Parser parser;

    /** Constructor */
    CUP$Parser$actions(Parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 156. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int start_valright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Program start_val = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // empty ::= 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",1, CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                String id = CUP$Parser$stack.peek().<String> value();
                 RESULT = new Identifier(id); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",2, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // minus_list ::= MINUS minus_list 
            {
                Expression RESULT = null;
                int mleft = CUP$Parser$stack.peek().left;
                int mright = CUP$Parser$stack.peek().right;
                Expression m = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, m); RESULT.setLocation(m); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // minus_list ::= MINUS NEGATIVE_INT_BOUND 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Object i = CUP$Parser$stack.peek().<Object> value();
                 RESULT = new Unary(UnaryOperator.MINUS, new IntegerLiteral("9223372036854775808")); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // minus_list ::= MINUS H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, h); RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // not_list ::= NOT not_list 
            {
                Expression RESULT = null;
                int nleft = CUP$Parser$stack.peek().left;
                int nright = CUP$Parser$stack.peek().right;
                Expression n = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, n); RESULT.setLocation(n); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_list",5, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // not_list ::= NOT H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, h); RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_list",5, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // boolean_literal ::= TRUE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(true); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",16, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // boolean_literal ::= FALSE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(false); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",16, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // A ::= B 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = b; RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",6, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // A ::= A OR B 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.OR, a,b); RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",6, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // B ::= C 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = c; RESULT.setLocation(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",7, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // B ::= B AND C 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression b = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.AND, b,c); RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",7, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // C ::= D 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = d; RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",8, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // C ::= C EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.EQUAL, c,d); RESULT.setLocation(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // C ::= C NOT_EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.NOT_EQUAL,c,d); RESULT.setLocation(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // D ::= E 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = e; RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // D ::= D LT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LT, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // D ::= D LEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LEQ, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // D ::= D GT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GT, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // D ::= D GEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GEQ, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // E ::= F 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = f; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // E ::= E PLUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.PLUS, e,f); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // E ::= E MINUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MINUS,e,f); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // F ::= G 
            {
                Expression RESULT = null;
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = g; RESULT.setLocation(g); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // F ::= F TIMES G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.TIMES, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // F ::= F HIGH_MULT G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.HIGH_MULT, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // F ::= F DIVIDE G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.DIVIDE, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // F ::= F MODULO G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MODULO, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // G ::= H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = h; RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // G ::= not_list 
            {
                Expression RESULT = null;
                int nleft = CUP$Parser$stack.peek().left;
                int nright = CUP$Parser$stack.peek().right;
                Expression n = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = n; RESULT.setLocation(n); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // G ::= minus_list 
            {
                Expression RESULT = null;
                int mleft = CUP$Parser$stack.peek().left;
                int mright = CUP$Parser$stack.peek().right;
                Expression m = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = m; RESULT.setLocation(m); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // H ::= I 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Expression i = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = i; RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // H ::= H PERIOD function_call 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int iright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression i = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = new ObjectFunctionCall(fc.getIdentifier(), i, fc.getArguments()); RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",13, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // H ::= H PERIOD identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int iright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression i = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = new ObjectField(i, id); RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",13, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // I ::= K 
            {
                Expression RESULT = null;
                int kleft = CUP$Parser$stack.peek().left;
                int kright = CUP$Parser$stack.peek().right;
                Expression k = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = k; RESULT.setLocation(k); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // I ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(fc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // I ::= I OPEN_BRACKET A CLOSE_BRACKET 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int hright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Expression h = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Expression> value();
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(h,a); RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // K ::= boolean_literal 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                BooleanLiteral b = CUP$Parser$stack.peek().<BooleanLiteral> value();
                 RESULT = b; RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // K ::= INTEGER_LITERAL 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                String i = CUP$Parser$stack.peek().<String> value();
                 RESULT = new IntegerLiteral(i); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // K ::= OPEN_PAREN A CLOSE_PAREN 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // K ::= identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Identifier i = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = i; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // K ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                String s = CUP$Parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // K ::= CHARACTER_LITERAL 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Character c = CUP$Parser$stack.peek().<Character> value();
                 RESULT = new CharacterLiteral(c); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // K ::= array_literal 
            {
                Expression RESULT = null;
                int alleft = CUP$Parser$stack.peek().left;
                int alright = CUP$Parser$stack.peek().right;
                ArrayLiteral al = CUP$Parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; RESULT.setLocation(al); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // K ::= NEW identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Identifier i = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = new ObjectInstantiation(i); RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // K ::= NULL 
            {
                Expression RESULT = null;
                 RESULT = new Null(); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // K ::= THIS 
            {
                Expression RESULT = null;
                 RESULT = new This(); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // expression ::= A 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Expression a = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // expression_list ::= expression COMMA expression_list 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",19, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // expression_list ::= expression 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",19, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // expression_list_trailing_comma ::= expression COMMA expression_list_trailing_comma 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",20, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // expression_list_trailing_comma ::= expression COMMA 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",20, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // array_literal ::= OPEN_BRACE expression_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",17, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // array_literal ::= OPEN_BRACE expression_list_trailing_comma CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",17, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // array_literal ::= OPEN_BRACE CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                 RESULT = new ArrayLiteral(new LinkedList<>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",17, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                 RESULT = new IntType(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",21, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                 RESULT = new BoolType(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",21, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // array_size_type ::= OPEN_BRACKET expression CLOSE_BRACKET array_size_type 
            {
                SimpleEntry<List<Expression>,Integer> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                SimpleEntry<List<Expression>,Integer> ast = CUP$Parser$stack.peek().<SimpleEntry<List<Expression>,Integer>> value();
                 ast.getKey().add(0, e); RESULT = ast; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",23, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // array_size_type ::= array_no_size_type 
            {
                SimpleEntry<List<Expression>,Integer> RESULT = null;
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new SimpleEntry<List<Expression>, Integer>(new LinkedList<>(), anst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",23, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // array_no_size_type ::= OPEN_BRACKET CLOSE_BRACKET array_no_size_type 
            {
                Integer RESULT = null;
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = anst + 1;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",24, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // array_no_size_type ::= empty 
            {
                Integer RESULT = null;
                 RESULT = 0; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",24, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // var_type ::= primitive_type array_no_size_type 
            {
                VariableType RESULT = null;
                int ptleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int ptright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType pt = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = VariableType.construct(pt, anst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",22, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // var_type ::= identifier array_no_size_type 
            {
                VariableType RESULT = null;
                int class_nameleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int class_nameright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Identifier class_name = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Identifier> value();
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = VariableType.construct(new ClassType(class_name), anst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",22, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // typed_declaration_no_size ::= identifier COLON primitive_type array_no_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                Integer ast = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new TypedDeclaration(id, VariableType.construct(t, ast), new LinkedList<Expression>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_no_size",26, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // typed_declaration_no_size ::= identifier COLON identifier array_no_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int class_nameleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int class_nameright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Identifier class_name = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Identifier> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                Integer ast = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new TypedDeclaration(id, VariableType.construct(new ClassType(class_name), ast), new LinkedList<Expression>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_no_size",26, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // typed_declaration ::= identifier COLON primitive_type array_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                SimpleEntry<List<Expression>,Integer> ast = CUP$Parser$stack.peek().<SimpleEntry<List<Expression>,Integer>> value();
                 RESULT = new TypedDeclaration(id, VariableType.construct(t, ast.getKey().size() + ast.getValue()), ast.getKey()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration",25, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // typed_declaration ::= identifier COLON identifier array_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int class_nameleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int class_nameright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Identifier class_name = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Identifier> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                SimpleEntry<List<Expression>,Integer> ast = CUP$Parser$stack.peek().<SimpleEntry<List<Expression>,Integer>> value();
                 RESULT = new TypedDeclaration(id, VariableType.construct(new ClassType(class_name), ast.getKey().size() + ast.getValue()), ast.getKey()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration",25, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // function_call ::= identifier OPEN_PAREN expression_list CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new FunctionCall(id, lst); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id, new LinkedList<Expression>()); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // function_call ::= LENGTH OPEN_PAREN expression_list CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Object id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Object> value();
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new FunctionCall(new Identifier("length"), lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // assignment_lhs_array_brackets ::= assignment_lhs_array OPEN_BRACKET expression CLOSE_BRACKET 
            {
                ArrayIndex RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Expression> value();
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(a,e); RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array_brackets",28, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // assignment_lhs_array ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(fc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // assignment_lhs_array ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                String s = CUP$Parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // assignment_lhs_array ::= identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Identifier i = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = i; RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // assignment_lhs_array ::= assignment_lhs_array_brackets 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                ArrayIndex a = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = a; RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // object_expression ::= identifier 
            {
                Expression RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = id; RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // object_expression ::= NEW identifier 
            {
                Expression RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = new ObjectInstantiation(id); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // object_expression ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc;  RESULT.setLocation(fc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // object_expression ::= object_function_call 
            {
                Expression RESULT = null;
                int ofcleft = CUP$Parser$stack.peek().left;
                int ofcright = CUP$Parser$stack.peek().right;
                ObjectFunctionCall ofc = CUP$Parser$stack.peek().<ObjectFunctionCall> value();
                 RESULT = ofc;RESULT.setLocation(ofc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // object_expression ::= assignment_lhs_array_brackets 
            {
                Expression RESULT = null;
                int aileft = CUP$Parser$stack.peek().left;
                int airight = CUP$Parser$stack.peek().right;
                ArrayIndex ai = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = ai; RESULT.setLocation(ai); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // object_expression ::= object_field 
            {
                Expression RESULT = null;
                int ofleft = CUP$Parser$stack.peek().left;
                int ofright = CUP$Parser$stack.peek().right;
                ObjectField of = CUP$Parser$stack.peek().<ObjectField> value();
                 RESULT = of; RESULT.setLocation(of); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // object_expression ::= THIS 
            {
                Expression RESULT = null;
                 RESULT = new This(); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // object_function_call ::= object_expression PERIOD function_call 
            {
                ObjectFunctionCall RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = new ObjectFunctionCall(fc.getIdentifier(), e, fc.getArguments()); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_function_call",54, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // object_field ::= object_expression PERIOD identifier 
            {
                ObjectField RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = new ObjectField(e, id); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_field",55, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // assignment_lhs ::= identifier 
            {
                Assignable RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = id; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // assignment_lhs ::= assignment_lhs_array_brackets 
            {
                Assignable RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                ArrayIndex a = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // assignment_lhs ::= typed_declaration_no_size 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // assignment_lhs ::= function_call 
            {
                Assignable RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // assignment_lhs ::= object_function_call 
            {
                Assignable RESULT = null;
                int ofcleft = CUP$Parser$stack.peek().left;
                int ofcright = CUP$Parser$stack.peek().right;
                ObjectFunctionCall ofc = CUP$Parser$stack.peek().<ObjectFunctionCall> value();
                 RESULT = ofc; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // assignment_lhs ::= object_field 
            {
                Assignable RESULT = null;
                int oleft = CUP$Parser$stack.peek().left;
                int oright = CUP$Parser$stack.peek().right;
                ObjectField o = CUP$Parser$stack.peek().<ObjectField> value();
                 RESULT = o; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // declaration_assignment_lhs ::= typed_declaration_no_size 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",31, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // declaration_assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",31, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA multiple_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dlleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dlright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dllleft = CUP$Parser$stack.peek().left;
                int dllright = CUP$Parser$stack.peek().right;
                List<Assignable> dll = CUP$Parser$stack.peek().<List<Assignable>> value();
                 dll.add(0, dl); RESULT = dll; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",32, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA declaration_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dl1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dl1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dl2left = CUP$Parser$stack.peek().left;
                int dl2right = CUP$Parser$stack.peek().right;
                Assignable dl2 = CUP$Parser$stack.peek().<Assignable> value();
                 LinkedList<Assignable> lst = new LinkedList<Assignable>(Arrays.asList(dl2)); lst.add(0, dl1); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",32, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // assignment ::= assignment_lhs GETS expression 
            {
                Assignment RESULT = null;
                int alleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int alright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable al = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Assignable> lst = new LinkedList<>(); lst.add(0, al); RESULT = new Assignment(lst, e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",33, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // assignment ::= multiple_assignment_lhs GETS function_call 
            {
                Assignment RESULT = null;
                int allleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int allright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                List<Assignable> all = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<List<Assignable>> value();
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = new Assignment(all, fc); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",33, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b, Optional.empty()); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",34, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block ELSE block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<Expression> value();
                int b1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int b1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Block b1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Block> value();
                int b2left = CUP$Parser$stack.peek().left;
                int b2right = CUP$Parser$stack.peek().right;
                Block b2 = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b1, Optional.of(b2)); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",34, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // while_statement ::= WHILE OPEN_PAREN expression CLOSE_PAREN block 
            {
                WhileStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new WhileStatement(e,b); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",35, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // return_statement ::= RETURN expression_list 
            {
                ReturnStatement RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 RESULT = new ReturnStatement(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",36, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // statement_no_semicolon ::= if_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                IfStatement s = CUP$Parser$stack.peek().<IfStatement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // statement_no_semicolon ::= while_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                WhileStatement s = CUP$Parser$stack.peek().<WhileStatement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // statement_no_semicolon ::= procedure_call 
            {
                Statement RESULT = null;
                int pcleft = CUP$Parser$stack.peek().left;
                int pcright = CUP$Parser$stack.peek().right;
                ProcedureCall pc = CUP$Parser$stack.peek().<ProcedureCall> value();
                 RESULT = pc; RESULT.setLocation(pc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // statement_no_semicolon ::= typed_declaration 
            {
                Statement RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(td); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // statement_no_semicolon ::= assignment 
            {
                Statement RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Assignment a = CUP$Parser$stack.peek().<Assignment> value();
                 RESULT = a; RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // statement_no_semicolon ::= return_statement 
            {
                Statement RESULT = null;
                int rleft = CUP$Parser$stack.peek().left;
                int rright = CUP$Parser$stack.peek().right;
                ReturnStatement r = CUP$Parser$stack.peek().<ReturnStatement> value();
                 RESULT = r; RESULT.setLocation(r); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // statement_no_semicolon ::= object_expression PERIOD procedure_call 
            {
                Statement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int pcleft = CUP$Parser$stack.peek().left;
                int pcright = CUP$Parser$stack.peek().right;
                ProcedureCall pc = CUP$Parser$stack.peek().<ProcedureCall> value();
                 RESULT = new ObjectProcedureCall(pc.getIdentifier(), e, pc.getArguments()); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // statement_no_semicolon ::= BREAK 
            {
                Statement RESULT = null;
                 RESULT = new Break(); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // statement ::= statement_no_semicolon 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",40, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // statement ::= statement_no_semicolon SEMICOLON 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int sright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Statement s = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Statement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",40, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // block ::= block_scope 
            {
                Block RESULT = null;
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 RESULT = bl; RESULT.setLocation(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",37, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // block ::= statement 
            {
                Block RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",37, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // typed_declaration_list ::= identifier COMMA typed_declaration 
            {
                List<TypedDeclaration> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 List<TypedDeclaration> f = new LinkedList<>(); f.add(td); f.add(0, new TypedDeclaration(id, td.getDeclarationType(), td.getArraySizes())); RESULT = f; RESULT.get(0).setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",48, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // typed_declaration_list ::= identifier COMMA typed_declaration_list 
            {
                List<TypedDeclaration> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                List<TypedDeclaration> f = CUP$Parser$stack.peek().<List<TypedDeclaration>> value();
                 TypedDeclaration temp = f.get(f.size()-1); f.add(0, new TypedDeclaration(id, temp.getDeclarationType(), temp.getArraySizes())); RESULT = f; RESULT.get(0).setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",48, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // block_list ::= block block_list 
            {
                BlockList RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Block b = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Block> value();
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 bl.getBlocks().add(0, b); RESULT = bl; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",38, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // block_list ::= typed_declaration_list block_list 
            {
                BlockList RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<TypedDeclaration> f = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<TypedDeclaration>> value();
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 for(TypedDeclaration td : f) { bl.getBlocks().add(0, td); } RESULT = bl; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",38, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // block_list ::= RETURN 
            {
                BlockList RESULT = null;
                 List<Block> bl = new LinkedList<>(); bl.add(0,new ReturnStatement(new LinkedList<>())); RESULT = new BlockList(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 120: // block_list ::= empty 
            {
                BlockList RESULT = null;
                 List<Block> bl = new LinkedList<>(); RESULT = new BlockList(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 121: // block_scope ::= OPEN_BRACE block_list CLOSE_BRACE 
            {
                BlockList RESULT = null;
                int blleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int blright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList bl = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 RESULT = bl; RESULT.setLocation(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_scope",39, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 122: // function_declaration_return_types ::= var_type COMMA function_declaration_return_types 
            {
                List<VariableType> RESULT = null;
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                VariableType t = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<VariableType> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<VariableType> lst = CUP$Parser$stack.peek().<List<VariableType>> value();
                 lst.add(0,t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_return_types",42, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 123: // function_declaration_return_types ::= var_type 
            {
                List<VariableType> RESULT = null;
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                VariableType t = CUP$Parser$stack.peek().<VariableType> value();
                 List<VariableType> lst = new LinkedList<>(); lst.add(0, t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_return_types",42, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 124: // function_declaration_argument_single ::= identifier COLON var_type 
            {
                SimpleEntry<Identifier,VariableType> RESULT = null;
                int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int iright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier i = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                VariableType t = CUP$Parser$stack.peek().<VariableType> value();
                 RESULT = new SimpleEntry<Identifier, VariableType>(i, t); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_single",43, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 125: // function_declaration_argument_list ::= function_declaration_argument_single COMMA function_declaration_argument_list 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int fdasleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fdasright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                SimpleEntry<Identifier,VariableType> fdas = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<SimpleEntry<Identifier,VariableType>> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<SimpleEntry<Identifier,VariableType>> lst = CUP$Parser$stack.peek().<List<SimpleEntry<Identifier,VariableType>>> value();
                 lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",44, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 126: // function_declaration_argument_list ::= function_declaration_argument_single 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int fdasleft = CUP$Parser$stack.peek().left;
                int fdasright = CUP$Parser$stack.peek().right;
                SimpleEntry<Identifier,VariableType> fdas = CUP$Parser$stack.peek().<SimpleEntry<Identifier,VariableType>> value();
                 List<SimpleEntry<Identifier, VariableType>> lst = new LinkedList<>(); lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",44, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 127: // function_declaration_argument ::= function_declaration_argument_list 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<SimpleEntry<Identifier,VariableType>> lst = CUP$Parser$stack.peek().<List<SimpleEntry<Identifier,VariableType>>> value();
                 RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",45, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 128: // function_declaration_argument ::= empty 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",45, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 129: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN COLON function_declaration_return_types OPEN_BRACE block_list CLOSE_BRACE 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-8).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-8).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-8).<Identifier> value();
                int argPairsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-6).left;
                int argPairsright = CUP$Parser$stack.elementAt(CUP$Parser$top-6).right;
                List<SimpleEntry<Identifier,VariableType>> argPairs = CUP$Parser$stack.elementAt(CUP$Parser$top-6).<List<SimpleEntry<Identifier,VariableType>>> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                List<VariableType> t = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<List<VariableType>> value();
                int fbleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fbright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList fb = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(id, new FunctionType(argTypes, new VariableTypeList(t)), args, fb); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",46, CUP$Parser$stack.elementAt(CUP$Parser$top-8), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 130: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN OPEN_BRACE block_list CLOSE_BRACE 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-6).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-6).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-6).<Identifier> value();
                int argPairsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int argPairsright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                List<SimpleEntry<Identifier,VariableType>> argPairs = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<List<SimpleEntry<Identifier,VariableType>>> value();
                int fbleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fbright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList fb = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(id, new FunctionType(argTypes, new VariableTypeList(new LinkedList<>())), args, fb); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",46, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 131: // procedure_call ::= identifier OPEN_PAREN expression_list CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int elistleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int elistright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> elist = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ProcedureCall(id, elist); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",47, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 132: // procedure_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                 RESULT = new ProcedureCall(id, new LinkedList<Expression>()); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",47, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 133: // use_block ::= USE identifier use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Identifier> value();
                int uleft = CUP$Parser$stack.peek().left;
                int uright = CUP$Parser$stack.peek().right;
                List<UseStatement> u = CUP$Parser$stack.peek().<List<UseStatement>> value();
                 u.add(0, new UseStatement(id)); RESULT = u; RESULT.get(0).setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",3, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 134: // use_block ::= USE identifier SEMICOLON use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int uleft = CUP$Parser$stack.peek().left;
                int uright = CUP$Parser$stack.peek().right;
                List<UseStatement> u = CUP$Parser$stack.peek().<List<UseStatement>> value();
                 u.add(0, new UseStatement(id)); RESULT = u; RESULT.get(0).setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",3, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 135: // use_block ::= empty 
            {
                List<UseStatement> RESULT = null;
                 RESULT = new LinkedList<UseStatement>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",3, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 136: // field ::= typed_declaration_list 
            {
                List<TypedDeclaration> RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                List<TypedDeclaration> td = CUP$Parser$stack.peek().<List<TypedDeclaration>> value();
                 RESULT = td; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",49, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 137: // field ::= typed_declaration 
            {
                List<TypedDeclaration> RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 List<TypedDeclaration> lst = new LinkedList<>(); lst.add(td); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",49, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 138: // class_declaration_body ::= field class_declaration_body 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<TypedDeclaration> f = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<TypedDeclaration>> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> c = CUP$Parser$stack.peek().<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 c.part1().addAll(f); RESULT = c ; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",50, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 139: // class_declaration_body ::= field SEMICOLON class_declaration_body 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                List<TypedDeclaration> f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<List<TypedDeclaration>> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> c = CUP$Parser$stack.peek().<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 c.part1().addAll(f); RESULT = c ; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",50, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 140: // class_declaration_body ::= function_declaration class_declaration_body 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                FunctionDeclaration f = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<FunctionDeclaration> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> c = CUP$Parser$stack.peek().<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 c.part2().add(f); RESULT = c; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",50, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 141: // class_declaration_body ::= empty 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                 Pair<List<TypedDeclaration>, List<FunctionDeclaration>> pair = new Pair<>(new LinkedList<>(), new LinkedList<>()); RESULT = pair; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",50, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 142: // class_declaration ::= CLASS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
            {
                ClassDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int bodyleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bodyright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> body = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 List<MethodDeclaration> methods = new LinkedList<>(); for(FunctionDeclaration fd : body.part2()) { methods.add(new MethodDeclaration(id, fd)); } RESULT = new ClassDeclaration(id, body.part1(), methods, Optional.empty()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration",51, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 143: // class_declaration ::= CLASS identifier EXTENDS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
            {
                ClassDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-5).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-5).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-5).<Identifier> value();
                int id2left = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int id2right = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id2 = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int bodyleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bodyright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> body = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 List<MethodDeclaration> methods = new LinkedList<>(); for(FunctionDeclaration fd : body.part2()) { methods.add(new MethodDeclaration(id, fd)); } RESULT = new ClassDeclaration(id, body.part1(), methods, Optional.of(id2)); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration",51, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 144: // program_body ::= global_variable program_body 
            {
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                int gleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int gright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Assignment> g = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Assignment>> value();
                int pleft = CUP$Parser$stack.peek().left;
                int pright = CUP$Parser$stack.peek().right;
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> p = CUP$Parser$stack.peek().<Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 p.getA().addAll(g); RESULT = p; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",52, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 145: // program_body ::= global_variable SEMICOLON program_body 
            {
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                int gleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int gright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                List<Assignment> g = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<List<Assignment>> value();
                int pleft = CUP$Parser$stack.peek().left;
                int pright = CUP$Parser$stack.peek().right;
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> p = CUP$Parser$stack.peek().<Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 p.getA().addAll(g); RESULT = p; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",52, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 146: // program_body ::= function_declaration program_body 
            {
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                int fdleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fdright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                FunctionDeclaration fd = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<FunctionDeclaration> value();
                int pleft = CUP$Parser$stack.peek().left;
                int pright = CUP$Parser$stack.peek().right;
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> p = CUP$Parser$stack.peek().<Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 p.getB().add(fd); RESULT = p; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",52, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 147: // program_body ::= class_declaration program_body 
            {
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                ClassDeclaration c = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<ClassDeclaration> value();
                int pleft = CUP$Parser$stack.peek().left;
                int pright = CUP$Parser$stack.peek().right;
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> p = CUP$Parser$stack.peek().<Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 p.getC().add(c); RESULT = p; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",52, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 148: // program_body ::= empty 
            {
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                 Triple<List<Assignment>, List<FunctionDeclaration>, List<ClassDeclaration>> body = new Triple<>(new LinkedList<>(), new LinkedList<>(), new LinkedList<>()); RESULT = body; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",52, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 149: // global_variable_assignable ::= identifier 
            {
                Assignable RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = id; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_variable_assignable",57, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 150: // global_variable_assignable ::= typed_declaration_no_size 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_variable_assignable",57, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 151: // global_variable_assignment ::= global_variable_assignable GETS expression 
            {
                Assignment RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable a = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                  RESULT = new Assignment(a, e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_variable_assignment",58, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 152: // global_variable ::= typed_declaration_list 
            {
                List<Assignment> RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<TypedDeclaration> lst = CUP$Parser$stack.peek().<List<TypedDeclaration>> value();
                 List<Assignment> assignments = new LinkedList<>(); for (TypedDeclaration td : lst) { if (td.getDeclarationType() instanceof IntType) { assignments.add(new Assignment(td, new IntegerLiteral("0"))); } else if (td.getDeclarationType() instanceof BoolType) { assignments.add(new Assignment(td, new BooleanLiteral(false))); } else { assignments.add(new Assignment(td, new Null())); } } RESULT = assignments; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_variable",56, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 153: // global_variable ::= global_variable_assignment 
            {
                List<Assignment> RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Assignment a = CUP$Parser$stack.peek().<Assignment> value();
                 List<Assignment> assignables = new LinkedList<>(); assignables.add(a); RESULT = assignables; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_variable",56, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 154: // global_variable ::= typed_declaration 
            {
                List<Assignment> RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                  List<Assignment> assignments = new LinkedList<>(); if (td.getDeclarationType() instanceof IntType) { assignments.add(new Assignment(td, new IntegerLiteral("0"))); } else if (td.getDeclarationType() instanceof BoolType) { assignments.add(new Assignment(td, new BooleanLiteral(false))); } else { assignments.add(new Assignment(td, new Null())); } RESULT = assignments; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_variable",56, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 155: // program ::= use_block program_body 
            {
                Program RESULT = null;
                int uleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int uright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<UseStatement> u = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<UseStatement>> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> b = CUP$Parser$stack.peek().<Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 RESULT = new Program(u, b.getA(), b.getB(), b.getC()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 156: // program ::= error 
            {
                Program RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$Parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                           CUP$Parser$act_num,
                           CUP$Parser$parser,
                           CUP$Parser$stack,
                           CUP$Parser$top);
    }
}

}
