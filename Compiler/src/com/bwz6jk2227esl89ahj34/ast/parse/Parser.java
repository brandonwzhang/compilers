
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package com.bwz6jk2227esl89ahj34.ast.parse;

import com.bwz6jk2227esl89ahj34.ast.*;
import com.bwz6jk2227esl89ahj34.ast.type.FunctionType;
import com.bwz6jk2227esl89ahj34.ast.type.IntType;
import com.bwz6jk2227esl89ahj34.ast.type.BoolType;
import com.bwz6jk2227esl89ahj34.ast.type.PrimitiveType;
import com.bwz6jk2227esl89ahj34.ast.type.ArrayType;
import com.bwz6jk2227esl89ahj34.ast.type.VariableType;
import com.bwz6jk2227esl89ahj34.ast.type.VariableTypeList;
import com.bwz6jk2227esl89ahj34.util.Util;
import com.bwz6jk2227esl89ahj34.util.prettyprint.Pair;
import java.util.AbstractMap.SimpleEntry;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

/** CUP v0.11b 20150326 generated parser.
  */
public class Parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return ParserSym.class;
  }

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\003\002\000\002\004" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\007\004\000\002\007\004\000\002\022\003\000" +
    "\002\022\003\000\002\010\003\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\005\000\002\012\005\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\006\000\002\020\003\000\002\020\005\000\002" +
    "\020\005\000\002\021\003\000\002\021\003\000\002\021" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\004\000\002\024\003\000" +
    "\002\025\005\000\002\025\003\000\002\026\005\000\002" +
    "\026\004\000\002\023\005\000\002\023\005\000\002\023" +
    "\004\000\002\027\003\000\002\027\003\000\002\031\006" +
    "\000\002\031\003\000\002\032\005\000\002\032\003\000" +
    "\002\030\004\000\002\034\006\000\002\033\006\000\002" +
    "\035\006\000\002\035\005\000\002\035\006\000\002\036" +
    "\006\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\067\003\000\002\067\004\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\070\005\000\002\071\005\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\041\003\000\002\041\003\000\002\042\005\000\002" +
    "\042\005\000\002\043\005\000\002\043\005\000\002\044" +
    "\007\000\002\044\011\000\002\045\007\000\002\046\004" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\052\003\000\002\052\004\000\002\047\003\000\002\047" +
    "\003\000\002\062\005\000\002\062\005\000\002\050\004" +
    "\000\002\050\004\000\002\050\003\000\002\050\003\000" +
    "\002\051\005\000\002\054\005\000\002\054\003\000\002" +
    "\055\005\000\002\056\005\000\002\056\003\000\002\057" +
    "\003\000\002\057\003\000\002\060\013\000\002\060\011" +
    "\000\002\061\006\000\002\061\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\003\000\002\063\003\000\002" +
    "\063\003\000\002\064\004\000\002\064\004\000\002\064" +
    "\003\000\002\065\007\000\002\065\011\000\002\066\004" +
    "\000\002\066\004\000\002\066\003\000\002\002\004\000" +
    "\002\002\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\014\002\000\003\007\004\000\021\005\056" +
    "\000\001\002\000\010\002\000\004\013\056\021\001\002" +
    "\000\004\004\013\001\002\000\004\002\011\001\002\000" +
    "\004\002\uff76\001\002\000\010\002\uff82\004\uff82\056\uff82" +
    "\001\002\000\004\002\001\001\002\000\014\002\000\004" +
    "\000\021\005\051\015\056\000\001\002\000\116\002\uffff" +
    "\004\uffff\005\uffff\014\uffff\015\uffff\016\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff" +
    "\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\055" +
    "\uffff\056\uffff\057\uffff\060\uffff\061\uffff\001\002\000\010" +
    "\002\uff84\004\uff84\056\uff84\001\002\000\012\002\000\004" +
    "\000\021\005\056\000\001\002\000\010\002\uff83\004\uff83" +
    "\056\uff83\001\002\000\004\043\044\001\002\000\004\002" +
    "\uff77\001\002\000\004\004\013\001\002\000\010\002\000" +
    "\004\013\056\021\001\002\000\004\002\uff78\001\002\000" +
    "\010\002\000\004\013\056\021\001\002\000\004\002\uff79" +
    "\001\002\000\004\002\uff7a\001\002\000\006\045\031\057" +
    "\030\001\002\000\004\004\013\001\002\000\006\004\013" +
    "\046\000\001\002\000\004\046\360\001\002\000\010\043" +
    "\044\047\045\050\043\001\002\000\006\004\013\046\000" +
    "\001\002\000\006\004\uff81\046\uff81\001\002\000\006\004" +
    "\uff80\046\uff80\001\002\000\004\046\uff7d\001\002\000\006" +
    "\004\013\046\000\001\002\000\004\046\uff7e\001\002\000" +
    "\004\046\uff7f\001\002\000\004\004\013\001\002\000\006" +
    "\004\013\044\000\001\002\000\006\012\050\013\046\001" +
    "\002\000\042\004\uffc9\005\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\020\uffc9\040\uffc9\041\uffc9\044\uffc9\045\uffc9\046\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\055\uffc9\060\uffc9\001\002\000\030" +
    "\004\000\005\000\014\000\016\000\020\000\041\053\045" +
    "\000\046\000\052\000\055\000\060\000\001\002\000\042" +
    "\004\uffca\005\uffca\014\uffca\015\uffca\016\uffca\020\uffca\040" +
    "\uffca\041\uffca\044\uffca\045\uffca\046\uffca\050\uffca\051\uffca" +
    "\052\uffca\055\uffca\060\uffca\001\002\000\032\004\uffc7\005" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\045\uffc7\046\uffc7" +
    "\051\uffc7\052\uffc7\055\uffc7\060\uffc7\001\002\000\032\004" +
    "\uffc2\005\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\045\uffc2" +
    "\046\uffc2\051\uffc2\052\uffc2\055\uffc2\060\uffc2\001\002\000" +
    "\034\004\013\005\106\006\101\007\073\010\102\011\107" +
    "\023\075\027\103\042\072\043\104\045\076\055\066\060" +
    "\056\001\002\000\040\004\uffc5\005\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\020\uffc5\040\uffc5\044\uffc5\045\uffc5\046\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\055\uffc5\060\uffc5\001\002\000\042" +
    "\004\uffd2\005\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\035" +
    "\113\042\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\055\uffd2\060\uffd2\001\002\000\004\004\013\001" +
    "\002\000\044\004\ufff7\005\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\020\ufff7\034\116\035\ufff7\042\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\055\ufff7\060\ufff7\001\002" +
    "\000\050\004\ufff5\005\ufff5\014\ufff5\015\ufff5\016\ufff5\020" +
    "\ufff5\034\ufff5\035\ufff5\036\120\037\121\042\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\050\ufff5\051\ufff5\052\ufff5\055\ufff5\060" +
    "\ufff5\001\002\000\060\004\ufff3\005\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\020\ufff3\030\124\031\125\032\126\033\123\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\042\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\050\ufff3\051\ufff3\052\ufff3\055\ufff3\060\ufff3\001" +
    "\002\000\064\004\ufff0\005\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\022\130\023\131\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\042\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\055\ufff0\060" +
    "\ufff0\001\002\000\076\004\uffdf\005\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\060\uffdf" +
    "\001\002\000\074\004\uffeb\005\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\020\uffeb\022\uffeb\023\uffeb\024\133\025\136\026\135" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\042\uffeb\044\uffeb\045\uffeb\046\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\134\055\uffeb\060\uffeb\001\002\000" +
    "\074\004\uffe8\005\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\042\uffe8\044\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\055\uffe8\060\uffe8\001\002\000\004\043\206" +
    "\001\002\000\076\004\uffe3\005\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\041\152\042\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\060\uffe3\001" +
    "\002\000\100\004\uffda\005\uffda\014\uffda\015\uffda\016\uffda" +
    "\020\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\041\uffda\042\uffda\044\uffda\045\uffda\046\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\055\uffda\060\uffda\061\uffda" +
    "\001\002\000\100\004\uffe0\005\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0\060\uffe0\061" +
    "\203\001\002\000\042\004\000\005\000\014\000\015\000" +
    "\016\000\020\000\040\000\041\202\044\000\045\000\046" +
    "\000\050\000\051\000\052\000\055\000\060\000\001\002" +
    "\000\100\004\uffd9\005\uffd9\014\uffd9\015\uffd9\016\uffd9\020" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\041\uffd9\042\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\055\uffd9\060\uffd9\061\uffd9\001" +
    "\002\000\100\004\uffdd\005\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\060\uffdd\061\uffdd" +
    "\001\002\000\032\004\013\005\106\006\101\007\073\010" +
    "\102\011\107\023\075\043\104\045\076\054\177\055\066" +
    "\060\056\001\002\000\034\004\013\005\106\006\101\007" +
    "\073\010\102\011\107\023\075\027\103\043\104\045\076" +
    "\046\166\055\066\060\056\001\002\000\102\004\uffd7\005" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7" +
    "\043\157\044\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\055\uffd7\060\uffd7\061\uffd7\001\002\000\004" +
    "\042\155\001\002\000\100\004\uffd5\005\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\020\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\060" +
    "\uffd5\061\uffd5\001\002\000\100\004\ufff9\005\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\037\ufff9\041\ufff9\042\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9" +
    "\060\ufff9\061\ufff9\001\002\000\030\004\013\005\106\006" +
    "\101\007\073\010\102\011\107\027\103\043\104\045\076" +
    "\055\066\060\056\001\002\000\032\004\013\005\106\006" +
    "\101\007\073\010\102\011\107\023\075\027\103\043\104" +
    "\045\076\055\066\060\056\001\002\000\074\004\uffe1\005" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\042\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055" +
    "\uffe1\060\uffe1\001\002\000\100\004\uffd6\005\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6" +
    "\060\uffd6\061\uffd6\001\002\000\100\004\ufff8\005\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\042\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\055" +
    "\ufff8\060\ufff8\061\ufff8\001\002\000\100\004\uffd4\005\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\020\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\055\uffd4\060\uffd4\061\uffd4\001\002\000\074\004\uffe2\005" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\042\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\055" +
    "\uffe2\060\uffe2\001\002\000\006\035\113\044\114\001\002" +
    "\000\032\004\013\005\106\006\101\007\073\010\102\011" +
    "\107\023\075\027\103\043\104\045\076\055\066\060\056" +
    "\001\002\000\100\004\uffd8\005\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\060\uffd8\061" +
    "\uffd8\001\002\000\044\004\ufff6\005\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\020\ufff6\034\116\035\ufff6\042\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6\055\ufff6\060\ufff6" +
    "\001\002\000\032\004\013\005\106\006\101\007\073\010" +
    "\102\011\107\023\075\027\103\043\104\045\076\055\066" +
    "\060\056\001\002\000\050\004\ufff4\005\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\020\ufff4\034\ufff4\035\ufff4\036\120\037\121" +
    "\042\ufff4\044\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\055\ufff4\060\ufff4\001\002\000\032\004\013\005\106" +
    "\006\101\007\073\010\102\011\107\023\075\027\103\043" +
    "\104\045\076\055\066\060\056\001\002\000\032\004\013" +
    "\005\106\006\101\007\073\010\102\011\107\023\075\027" +
    "\103\043\104\045\076\055\066\060\056\001\002\000\060" +
    "\004\ufff1\005\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\030" +
    "\124\031\125\032\126\033\123\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\042\ufff1\044\ufff1\045\ufff1\046\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\055\ufff1\060\ufff1\001\002\000\032\004\013" +
    "\005\106\006\101\007\073\010\102\011\107\023\075\027" +
    "\103\043\104\045\076\055\066\060\056\001\002\000\032" +
    "\004\013\005\106\006\101\007\073\010\102\011\107\023" +
    "\075\027\103\043\104\045\076\055\066\060\056\001\002" +
    "\000\032\004\013\005\106\006\101\007\073\010\102\011" +
    "\107\023\075\027\103\043\104\045\076\055\066\060\056" +
    "\001\002\000\032\004\013\005\106\006\101\007\073\010" +
    "\102\011\107\023\075\027\103\043\104\045\076\055\066" +
    "\060\056\001\002\000\064\004\uffed\005\uffed\014\uffed\015" +
    "\uffed\016\uffed\020\uffed\022\130\023\131\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\042" +
    "\uffed\044\uffed\045\uffed\046\uffed\050\uffed\051\uffed\052\uffed" +
    "\055\uffed\060\uffed\001\002\000\032\004\013\005\106\006" +
    "\101\007\073\010\102\011\107\023\075\027\103\043\104" +
    "\045\076\055\066\060\056\001\002\000\032\004\013\005" +
    "\106\006\101\007\073\010\102\011\107\023\075\027\103" +
    "\043\104\045\076\055\066\060\056\001\002\000\074\004" +
    "\uffe9\005\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\022\uffe9" +
    "\023\uffe9\024\133\025\136\026\135\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\042\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\053" +
    "\134\055\uffe9\060\uffe9\001\002\000\032\004\013\005\106" +
    "\006\101\007\073\010\102\011\107\023\075\027\103\043" +
    "\104\045\076\055\066\060\056\001\002\000\032\004\013" +
    "\005\106\006\101\007\073\010\102\011\107\023\075\027" +
    "\103\043\104\045\076\055\066\060\056\001\002\000\032" +
    "\004\013\005\106\006\101\007\073\010\102\011\107\023" +
    "\075\027\103\043\104\045\076\055\066\060\056\001\002" +
    "\000\032\004\013\005\106\006\101\007\073\010\102\011" +
    "\107\023\075\027\103\043\104\045\076\055\066\060\056" +
    "\001\002\000\074\004\uffe5\005\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\055\uffe5\060\uffe5\001\002\000" +
    "\074\004\uffe4\005\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\042\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\055\uffe4\060\uffe4\001\002\000\074\004\uffe6" +
    "\005\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\042\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\055\uffe6\060\uffe6\001\002\000\074\004\uffe7\005\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\042\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\060" +
    "\uffe7\001\002\000\074\004\uffea\005\uffea\014\uffea\015\uffea" +
    "\016\uffea\020\uffea\022\uffea\023\uffea\024\133\025\136\026" +
    "\135\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\042\uffea\044\uffea\045\uffea\046\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\134\055\uffea\060\uffea\001\002" +
    "\000\064\004\uffee\005\uffee\014\uffee\015\uffee\016\uffee\020" +
    "\uffee\022\130\023\131\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\042\uffee\044\uffee\045" +
    "\uffee\046\uffee\050\uffee\051\uffee\052\uffee\055\uffee\060\uffee" +
    "\001\002\000\064\004\uffef\005\uffef\014\uffef\015\uffef\016" +
    "\uffef\020\uffef\022\130\023\131\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\042\uffef\044" +
    "\uffef\045\uffef\046\uffef\050\uffef\051\uffef\052\uffef\055\uffef" +
    "\060\uffef\001\002\000\064\004\uffec\005\uffec\014\uffec\015" +
    "\uffec\016\uffec\020\uffec\022\130\023\131\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\042" +
    "\uffec\044\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052\uffec" +
    "\055\uffec\060\uffec\001\002\000\060\004\ufff2\005\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\020\ufff2\030\124\031\125\032\126" +
    "\033\123\034\ufff2\035\ufff2\036\ufff2\037\ufff2\042\ufff2\044" +
    "\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\052\ufff2\055\ufff2" +
    "\060\ufff2\001\002\000\076\004\ufffa\005\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\041\152\042\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\055\ufffa\060" +
    "\ufffa\001\002\000\074\004\ufffb\005\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\020\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\042\ufffb\044\ufffb\045\ufffb\046\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\060\ufffb\001\002" +
    "\000\032\004\013\005\106\006\101\007\073\010\102\011" +
    "\107\023\075\027\103\043\104\045\076\055\066\060\056" +
    "\001\002\000\006\035\113\042\154\001\002\000\076\004" +
    "\uffde\005\uffde\014\uffde\015\uffde\016\uffde\020\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\041\uffde" +
    "\042\uffde\044\uffde\045\uffde\046\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\055\uffde\060\uffde\001\002\000\034\004\000" +
    "\005\000\014\000\015\000\016\000\020\000\041\053\045" +
    "\000\046\000\051\000\052\000\055\000\060\000\001\002" +
    "\000\032\004\uffc8\005\uffc8\014\uffc8\015\uffc8\016\uffc8\020" +
    "\uffc8\045\uffc8\046\uffc8\051\uffc8\052\uffc8\055\uffc8\060\uffc8" +
    "\001\002\000\034\004\013\005\106\006\101\007\073\010" +
    "\102\011\107\023\075\027\103\043\104\044\162\045\076" +
    "\055\066\060\056\001\002\000\004\044\165\001\002\000" +
    "\036\004\uffd0\005\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\050\163\051\uffd0\052\uffd0\055" +
    "\uffd0\060\uffd0\001\002\000\102\004\uffc0\005\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\055\uffc0\060\uffc0\061\uffc0\001\002\000\032\004\013\005" +
    "\106\006\101\007\073\010\102\011\107\023\075\027\103" +
    "\043\104\045\076\055\066\060\056\001\002\000\034\004" +
    "\uffd1\005\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\051\uffd1\052\uffd1\055\uffd1\060\uffd1\001" +
    "\002\000\102\004\uffc1\005\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\020\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\060\uffc1" +
    "\061\uffc1\001\002\000\100\004\uffcb\005\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\060" +
    "\uffcb\061\uffcb\001\002\000\004\046\175\001\002\000\004" +
    "\046\174\001\002\000\006\046\uffd0\050\172\001\002\000" +
    "\034\004\013\005\106\006\101\007\073\010\102\011\107" +
    "\023\075\027\103\043\104\045\076\046\uffce\055\066\060" +
    "\056\001\002\000\004\046\uffcf\001\002\000\100\004\uffcc" +
    "\005\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc\042" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\055\uffcc\060\uffcc\061\uffcc\001\002\000\100\004" +
    "\uffcd\005\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\041\uffcd" +
    "\042\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\055\uffcd\060\uffcd\061\uffcd\001\002\000\076" +
    "\004\ufffc\005\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\041" +
    "\152\042\ufffc\044\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\055\ufffc\060\ufffc\001\002\000\074\004" +
    "\ufffd\005\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\042\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\055\ufffd\060\ufffd\001\002\000\074\004\ufffe\005\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\020\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\042\ufffe\044\ufffe\045" +
    "\ufffe\046\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\055\ufffe" +
    "\060\ufffe\001\002\000\040\004\uffc6\005\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\020\uffc6\040\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\055\uffc6\060\uffc6\001\002\000" +
    "\004\042\072\001\002\000\006\004\013\055\066\001\002" +
    "\000\102\004\uffdb\005\uffdb\014\uffdb\015\uffdb\016\uffdb\020" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\041\uffdb\042\uffdb\043\157\044\uffdb\045\uffdb\046\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb\060\uffdb\061" +
    "\uffdb\001\002\000\100\004\uffdc\005\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\041\uffdc\042\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\060\uffdc" +
    "\061\uffdc\001\002\000\032\004\013\005\106\006\101\007" +
    "\073\010\102\011\107\023\075\027\103\043\104\045\076" +
    "\055\066\060\056\001\002\000\004\044\210\001\002\000" +
    "\102\004\uffbf\005\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\044\uffbf\045\uffbf\046\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\060\uffbf\061\uffbf" +
    "\001\002\000\100\004\uffd3\005\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\041\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3\060\uffd3\061" +
    "\uffd3\001\002\000\004\047\353\001\002\000\004\044\221" +
    "\001\002\000\004\044\uff8a\001\002\000\006\044\uff8b\050" +
    "\217\001\002\000\004\044\uff89\001\002\000\004\004\013" +
    "\001\002\000\004\044\uff8c\001\002\000\006\045\222\047" +
    "\223\001\002\000\026\004\013\005\264\014\251\016\265" +
    "\020\244\045\245\046\000\052\233\055\066\060\231\001" +
    "\002\000\006\012\050\013\046\001\002\000\006\045\uff8e" +
    "\050\347\001\002\000\004\045\230\001\002\000\012\041" +
    "\202\044\000\045\000\050\000\001\002\000\010\044\uffc4" +
    "\045\uffc4\050\uffc4\001\002\000\026\004\013\005\264\014" +
    "\251\016\265\020\244\045\245\046\000\052\233\055\066" +
    "\060\231\001\002\000\004\004\013\001\002\000\032\004" +
    "\uff98\005\uff98\014\uff98\015\uff98\016\uff98\020\uff98\045\uff98" +
    "\046\uff98\051\uff98\052\uff98\055\uff98\060\uff98\001\002\000" +
    "\006\040\uffad\050\uffa9\001\002\000\004\061\343\001\002" +
    "\000\010\040\uffae\041\uffbd\061\uffb7\001\002\000\032\004" +
    "\uff9e\005\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e\045\uff9e" +
    "\046\uff9e\051\uff9e\052\uff9e\055\uff9e\060\uff9e\001\002\000" +
    "\004\040\340\001\002\000\006\040\uffaf\050\uffaa\001\002" +
    "\000\010\040\uffb0\041\uffba\061\uffb5\001\002\000\004\046" +
    "\uff91\001\002\000\004\041\335\001\002\000\034\004\013" +
    "\005\106\006\101\007\073\010\102\011\107\023\075\027" +
    "\103\043\104\045\076\046\uff92\055\066\060\056\001\002" +
    "\000\026\004\013\005\264\014\251\016\265\020\244\045" +
    "\245\046\000\052\233\055\066\060\231\001\002\000\032" +
    "\004\uff97\005\uff97\014\uff97\015\uff97\016\uff97\020\uff97\045" +
    "\uff97\046\uff97\051\uff97\052\uff97\055\uff97\060\uff97\001\002" +
    "\000\026\004\013\005\264\014\251\016\265\020\244\045" +
    "\245\046\000\052\233\055\066\060\231\001\002\000\032" +
    "\004\uff9f\005\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\045" +
    "\uff9f\046\uff9f\051\uff9f\052\uff9f\055\uff9f\060\uff9f\001\002" +
    "\000\004\043\324\001\002\000\032\004\uff9b\005\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\020\uff9b\045\uff9b\046\uff9b\051\uff9b" +
    "\052\uff9b\055\uff9b\060\uff9b\001\002\000\016\040\uffb1\041" +
    "\uffbb\043\277\047\300\050\043\061\uffb9\001\002\000\004" +
    "\050\313\001\002\000\032\004\uff9c\005\uff9c\014\uff9c\015" +
    "\uff9c\016\uff9c\020\uff9c\045\uff9c\046\uff9c\051\uff9c\052\uff9c" +
    "\055\uff9c\060\uff9c\001\002\000\004\040\311\001\002\000" +
    "\026\004\013\005\264\014\251\016\265\020\244\045\245" +
    "\046\000\052\233\055\066\060\231\001\002\000\032\004" +
    "\uff9a\005\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a\045\uff9a" +
    "\046\uff9a\051\307\052\uff9a\055\uff9a\060\uff9a\001\002\000" +
    "\006\040\uffac\061\uffb6\001\002\000\006\040\uffab\061\uffb4" +
    "\001\002\000\032\004\uffa0\005\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\020\uffa0\045\uffa0\046\uffa0\051\uffa0\052\uffa0\055\uffa0" +
    "\060\uffa0\001\002\000\004\041\uffbc\001\002\000\004\043" +
    "\271\001\002\000\004\046\270\001\002\000\032\004\uff9d" +
    "\005\uff9d\014\uff9d\015\uff9d\016\uff9d\020\uff9d\045\uff9d\046" +
    "\uff9d\051\uff9d\052\uff9d\055\uff9d\060\uff9d\001\002\000\012" +
    "\002\uff88\004\uff88\046\uff88\056\uff88\001\002\000\032\004" +
    "\013\005\106\006\101\007\073\010\102\011\107\023\075" +
    "\027\103\043\104\045\076\055\066\060\056\001\002\000" +
    "\004\044\273\001\002\000\024\004\013\005\264\014\251" +
    "\016\265\020\274\045\245\052\233\055\066\060\231\001" +
    "\002\000\032\004\013\005\106\006\101\007\073\010\102" +
    "\011\107\023\075\027\103\043\104\045\076\055\066\060" +
    "\056\001\002\000\032\004\uffa2\005\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\020\uffa2\045\uffa2\046\uffa2\051\uffa2\052\uffa2\055" +
    "\uffa2\060\uffa2\001\002\000\014\040\uffb1\041\uffbb\043\277" +
    "\047\300\061\uffb9\001\002\000\034\004\013\005\106\006" +
    "\101\007\073\010\102\011\107\023\075\027\103\043\104" +
    "\044\304\045\076\055\066\060\056\001\002\000\006\012" +
    "\050\013\046\001\002\000\040\004\000\005\000\014\000" +
    "\015\000\016\000\020\000\040\000\041\053\045\000\046" +
    "\000\050\000\051\000\052\000\055\000\060\000\001\002" +
    "\000\036\004\uffc7\005\uffc7\014\uffc7\015\uffc7\016\uffc7\020" +
    "\uffc7\040\uffc3\045\uffc7\046\uffc7\050\uffc3\051\uffc7\052\uffc7" +
    "\055\uffc7\060\uffc7\001\002\000\004\044\305\001\002\000" +
    "\040\004\uff85\005\uff85\014\uff85\015\uff85\016\uff85\020\uff85" +
    "\040\uffc0\041\uffc0\045\uff85\046\uff85\051\uff85\052\uff85\055" +
    "\uff85\060\uff85\061\uffc0\001\002\000\040\004\uff86\005\uff86" +
    "\014\uff86\015\uff86\016\uff86\020\uff86\040\uffc1\041\uffc1\045" +
    "\uff86\046\uff86\051\uff86\052\uff86\055\uff86\060\uff86\061\uffc1" +
    "\001\002\000\032\004\uffa1\005\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\020\uffa1\045\uffa1\046\uffa1\051\uffa1\052\uffa1\055\uffa1" +
    "\060\uffa1\001\002\000\032\004\uff99\005\uff99\014\uff99\015" +
    "\uff99\016\uff99\020\uff99\045\uff99\046\uff99\051\uff99\052\uff99" +
    "\055\uff99\060\uff99\001\002\000\004\046\uff93\001\002\000" +
    "\032\004\013\005\106\006\101\007\073\010\102\011\107" +
    "\023\075\027\103\043\104\045\076\055\066\060\056\001" +
    "\002\000\032\004\uffa6\005\uffa6\014\uffa6\015\uffa6\016\uffa6" +
    "\020\uffa6\045\uffa6\046\uffa6\051\uffa6\052\uffa6\055\uffa6\060" +
    "\uffa6\001\002\000\006\004\013\052\315\001\002\000\004" +
    "\047\321\001\002\000\006\040\uffa9\050\uffa9\001\002\000" +
    "\006\040\uffa7\050\313\001\002\000\004\040\uffa8\001\002" +
    "\000\006\040\uffaa\050\uffaa\001\002\000\006\012\050\013" +
    "\046\001\002\000\010\040\000\041\202\050\000\001\002" +
    "\000\006\040\uffc3\050\uffc3\001\002\000\032\004\013\005" +
    "\106\006\101\007\073\010\102\011\107\023\075\027\103" +
    "\043\104\045\076\055\066\060\056\001\002\000\004\044" +
    "\326\001\002\000\024\004\013\005\264\014\251\016\265" +
    "\020\274\045\245\052\233\055\066\060\231\001\002\000" +
    "\032\004\uffa4\005\uffa4\014\uffa4\015\330\016\uffa4\020\uffa4" +
    "\045\uffa4\046\uffa4\051\uffa4\052\uffa4\055\uffa4\060\uffa4\001" +
    "\002\000\024\004\013\005\264\014\251\016\265\020\274" +
    "\045\245\052\233\055\066\060\231\001\002\000\032\004" +
    "\uffa3\005\uffa3\014\uffa3\015\uffa3\016\uffa3\020\uffa3\045\uffa3" +
    "\046\uffa3\051\uffa3\052\uffa3\055\uffa3\060\uffa3\001\002\000" +
    "\004\046\uff94\001\002\000\004\046\334\001\002\000\032" +
    "\004\uff90\005\uff90\014\uff90\015\uff90\016\uff90\020\uff90\045" +
    "\uff90\046\uff90\051\uff90\052\uff90\055\uff90\060\uff90\001\002" +
    "\000\032\004\013\005\106\006\101\007\073\010\102\011" +
    "\107\023\075\027\103\043\104\045\076\055\066\060\056" +
    "\001\002\000\004\042\337\001\002\000\010\040\uffbe\041" +
    "\uffbe\061\uffbe\001\002\000\006\004\013\055\066\001\002" +
    "\000\004\043\157\001\002\000\032\004\uffa5\005\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\020\uffa5\045\uffa5\046\uffa5\051\uffa5" +
    "\052\uffa5\055\uffa5\060\uffa5\001\002\000\006\004\013\055" +
    "\066\001\002\000\010\040\uffb2\043\157\061\uffb2\001\002" +
    "\000\006\040\uffb3\061\uffb3\001\002\000\004\061\uffb8\001" +
    "\002\000\006\012\050\013\046\001\002\000\004\045\uff8f" +
    "\001\002\000\004\046\352\001\002\000\012\002\uff87\004" +
    "\uff87\046\uff87\056\uff87\001\002\000\006\012\050\013\046" +
    "\001\002\000\006\044\uff8d\050\uff8d\001\002\000\006\047" +
    "\045\050\043\001\002\000\026\004\uff96\005\uff96\014\uff96" +
    "\016\uff96\020\uff96\045\uff96\046\uff96\052\uff96\055\uff96\060" +
    "\uff96\001\002\000\026\004\uff95\005\uff95\014\uff95\016\uff95" +
    "\020\uff95\045\uff95\046\uff95\052\uff95\055\uff95\060\uff95\001" +
    "\002\000\010\002\uff7c\004\uff7c\056\uff7c\001\002\000\004" +
    "\045\362\001\002\000\006\004\013\046\000\001\002\000" +
    "\004\046\364\001\002\000\010\002\uff7b\004\uff7b\056\uff7b" +
    "\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\010\002\005\003\007\005\003\001\001\000" +
    "\014\003\022\004\016\060\023\065\021\066\017\001\001" +
    "\000\004\004\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\007" +
    "\005\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\007\005\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\026\001\001\000" +
    "\014\003\022\004\016\060\023\065\021\066\025\001\001" +
    "\000\002\001\001\000\014\003\022\004\016\060\023\065" +
    "\021\066\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\360\001\001\000\020\003" +
    "\036\004\032\033\035\060\037\062\034\063\033\064\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\036\004\032\033\035\060\037\062\034\063\033\064\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\036\004\032\033\035\060\037\062\034" +
    "\063\033\064\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\354\033\355\062\356\001\001\000\014" +
    "\003\215\004\211\055\214\056\213\057\212\001\001\000" +
    "\004\027\046\001\001\000\002\001\001\000\010\003\053" +
    "\031\051\032\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\076\006\104\007\110" +
    "\010\054\011\056\012\057\013\060\014\061\015\063\016" +
    "\064\017\066\020\070\021\073\022\067\023\107\024\077" +
    "\035\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\053\032\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\076\006\177\017\175\020\070\021\073\022" +
    "\067\023\107\035\062\001\001\000\050\004\076\006\104" +
    "\007\110\010\054\011\056\012\057\013\060\014\061\015" +
    "\063\016\064\017\066\020\070\021\073\022\067\023\107" +
    "\024\170\025\166\026\167\035\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\076\007\150\017\147\020\070\021\073\022" +
    "\067\023\107\035\062\001\001\000\042\004\076\006\104" +
    "\007\110\010\111\011\056\012\057\013\060\014\061\015" +
    "\063\016\064\017\066\020\070\021\073\022\067\023\107" +
    "\035\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\076\006\104\007\110\011\114\012" +
    "\057\013\060\014\061\015\063\016\064\017\066\020\070" +
    "\021\073\022\067\023\107\035\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\076\006\104\007\110" +
    "\012\116\013\060\014\061\015\063\016\064\017\066\020" +
    "\070\021\073\022\067\023\107\035\062\001\001\000\002" +
    "\001\001\000\034\004\076\006\104\007\110\013\146\014" +
    "\061\015\063\016\064\017\066\020\070\021\073\022\067" +
    "\023\107\035\062\001\001\000\034\004\076\006\104\007" +
    "\110\013\121\014\061\015\063\016\064\017\066\020\070" +
    "\021\073\022\067\023\107\035\062\001\001\000\002\001" +
    "\001\000\032\004\076\006\104\007\110\014\145\015\063" +
    "\016\064\017\066\020\070\021\073\022\067\023\107\035" +
    "\062\001\001\000\032\004\076\006\104\007\110\014\144" +
    "\015\063\016\064\017\066\020\070\021\073\022\067\023" +
    "\107\035\062\001\001\000\032\004\076\006\104\007\110" +
    "\014\143\015\063\016\064\017\066\020\070\021\073\022" +
    "\067\023\107\035\062\001\001\000\032\004\076\006\104" +
    "\007\110\014\126\015\063\016\064\017\066\020\070\021" +
    "\073\022\067\023\107\035\062\001\001\000\002\001\001" +
    "\000\030\004\076\006\104\007\110\015\142\016\064\017" +
    "\066\020\070\021\073\022\067\023\107\035\062\001\001" +
    "\000\030\004\076\006\104\007\110\015\131\016\064\017" +
    "\066\020\070\021\073\022\067\023\107\035\062\001\001" +
    "\000\002\001\001\000\026\004\076\006\104\007\110\016" +
    "\141\017\066\020\070\021\073\022\067\023\107\035\062" +
    "\001\001\000\026\004\076\006\104\007\110\016\140\017" +
    "\066\020\070\021\073\022\067\023\107\035\062\001\001" +
    "\000\026\004\076\006\104\007\110\016\137\017\066\020" +
    "\070\021\073\022\067\023\107\035\062\001\001\000\026" +
    "\004\076\006\104\007\110\016\136\017\066\020\070\021" +
    "\073\022\067\023\107\035\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\076\006\104\007\110\010\152\011\056" +
    "\012\057\013\060\014\061\015\063\016\064\017\066\020" +
    "\070\021\073\022\067\023\107\035\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\053\031\155\032" +
    "\050\001\001\000\002\001\001\000\046\004\076\006\104" +
    "\007\110\010\054\011\056\012\057\013\060\014\061\015" +
    "\063\016\064\017\066\020\070\021\073\022\067\023\107" +
    "\024\160\025\157\035\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\076\006\104" +
    "\007\110\010\054\011\056\012\057\013\060\014\061\015" +
    "\063\016\064\017\066\020\070\021\073\022\067\023\107" +
    "\024\160\025\163\035\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\004\076\006\104\007" +
    "\110\010\054\011\056\012\057\013\060\014\061\015\063" +
    "\016\064\017\066\020\070\021\073\022\067\023\107\024" +
    "\170\025\163\026\172\035\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\203\035\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\076\006\104\007\110" +
    "\010\054\011\056\012\057\013\060\014\061\015\063\016" +
    "\064\017\066\020\070\021\073\022\067\023\107\024\160" +
    "\025\206\035\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\211\055\214\056\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\241\004\252\033\266\034" +
    "\237\035\234\036\240\037\242\040\255\041\253\042\236" +
    "\043\254\044\262\045\247\046\251\047\246\050\350\051" +
    "\231\052\245\053\257\061\235\062\256\067\233\070\260" +
    "\071\261\001\001\000\010\027\225\030\223\054\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\053" +
    "\032\226\001\001\000\002\001\001\000\062\003\241\004" +
    "\252\033\266\034\237\035\234\036\240\037\242\040\255" +
    "\041\253\042\236\043\254\044\262\045\247\046\251\047" +
    "\246\050\265\051\231\052\245\053\257\061\235\062\256" +
    "\067\233\070\260\071\261\001\001\000\004\004\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\004\076\006\104\007\110\010\054\011" +
    "\056\012\057\013\060\014\061\015\063\016\064\017\066" +
    "\020\070\021\073\022\067\023\107\024\160\025\305\035" +
    "\062\001\001\000\062\003\241\004\252\033\266\034\237" +
    "\035\234\036\240\037\242\040\255\041\253\042\236\043" +
    "\254\044\262\045\247\046\251\047\246\050\332\051\231" +
    "\052\245\053\257\061\235\062\256\067\233\070\260\071" +
    "\261\001\001\000\002\001\001\000\062\003\241\004\252" +
    "\033\266\034\237\035\234\036\240\037\242\040\255\041" +
    "\253\042\236\043\254\044\262\045\247\046\251\047\246" +
    "\050\331\051\231\052\245\053\257\061\235\062\256\067" +
    "\233\070\260\071\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\241" +
    "\004\252\033\266\034\237\035\234\036\240\037\242\040" +
    "\255\041\253\042\236\043\254\044\262\045\247\046\251" +
    "\047\246\050\307\051\231\052\245\053\257\061\235\062" +
    "\256\067\233\070\260\071\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\076\006\104\007" +
    "\110\010\054\011\056\012\057\013\060\014\061\015\063" +
    "\016\064\017\066\020\070\021\073\022\067\023\107\024" +
    "\271\035\062\001\001\000\002\001\001\000\054\004\275" +
    "\033\266\034\237\035\234\036\240\037\242\040\255\041" +
    "\253\042\236\043\254\044\262\045\247\046\251\047\274" +
    "\051\231\052\245\053\257\061\235\067\233\070\260\071" +
    "\261\001\001\000\046\004\076\006\104\007\110\010\054" +
    "\011\056\012\057\013\060\014\061\015\063\016\064\017" +
    "\066\020\070\021\073\022\067\023\107\024\160\025\305" +
    "\035\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\076\006\104\007\110\010\054\011\056\012\057" +
    "\013\060\014\061\015\063\016\064\017\066\020\070\021" +
    "\073\022\067\023\107\024\160\025\302\035\062\001\001" +
    "\000\004\027\300\001\001\000\010\003\053\031\051\032" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\076\006\104\007\110" +
    "\010\054\011\056\012\057\013\060\014\061\015\063\016" +
    "\064\017\066\020\070\021\073\022\067\023\107\024\311" +
    "\035\062\001\001\000\002\001\001\000\012\004\313\034" +
    "\317\041\315\042\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\321\001\001\000\006\003\053\032\322" +
    "\001\001\000\002\001\001\000\044\004\076\006\104\007" +
    "\110\010\054\011\056\012\057\013\060\014\061\015\063" +
    "\016\064\017\066\020\070\021\073\022\067\023\107\024" +
    "\324\035\062\001\001\000\002\001\001\000\054\004\275" +
    "\033\266\034\237\035\234\036\240\037\242\040\255\041" +
    "\253\042\236\043\254\044\262\045\247\046\251\047\326" +
    "\051\231\052\245\053\257\061\235\067\233\070\260\071" +
    "\261\001\001\000\002\001\001\000\054\004\275\033\266" +
    "\034\237\035\234\036\240\037\242\040\255\041\253\042" +
    "\236\043\254\044\262\045\247\046\251\047\330\051\231" +
    "\052\245\053\257\061\235\067\233\070\260\071\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\076\006\104\007\110\010" +
    "\054\011\056\012\057\013\060\014\061\015\063\016\064" +
    "\017\066\020\070\021\073\022\067\023\107\024\335\035" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\340\035\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\343\035\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\225\030" +
    "\223\054\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\225\030\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\036\004\032\033\035\060\037\062\034\063\033\064\362" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}




    public boolean hasSyntaxError = false;
    public String syntaxErrMessage = "";

    public void syntax_error(java_cup.runtime.Symbol cur_token){
        hasSyntaxError = true;
        syntaxErrMessage = cur_token.left + ":" + cur_token.right +
          " error: Unexpected token " + Util.symbolTranslation.get(cur_token.sym);
        if (cur_token.value != null) {
            syntaxErrMessage += " " + cur_token.value;
        }
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
    private final Parser parser;

    /** Constructor */
    CUP$Parser$actions(Parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 139. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int start_valright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Program start_val = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // empty ::= 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",1, CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                String id = CUP$Parser$stack.peek().<String> value();
                 RESULT = new Identifier(id); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",2, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // minus_list ::= MINUS minus_list 
            {
                Expression RESULT = null;
                int mleft = CUP$Parser$stack.peek().left;
                int mright = CUP$Parser$stack.peek().right;
                Expression m = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, m); RESULT.setLocation(m); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // minus_list ::= MINUS NEGATIVE_INT_BOUND 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Object i = CUP$Parser$stack.peek().<Object> value();
                 RESULT = new Unary(UnaryOperator.MINUS, new IntegerLiteral("9223372036854775808")); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // minus_list ::= MINUS H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, h); RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // not_list ::= NOT not_list 
            {
                Expression RESULT = null;
                int nleft = CUP$Parser$stack.peek().left;
                int nright = CUP$Parser$stack.peek().right;
                Expression n = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, n); RESULT.setLocation(n); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_list",5, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // not_list ::= NOT H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, h); RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_list",5, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // boolean_literal ::= TRUE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(true); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",16, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // boolean_literal ::= FALSE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(false); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",16, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // A ::= B 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = b; RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",6, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // A ::= A OR B 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.OR, a,b); RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",6, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // B ::= C 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = c; RESULT.setLocation(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",7, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // B ::= B AND C 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression b = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.AND, b,c); RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",7, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // C ::= D 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = d; RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",8, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // C ::= C EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.EQUAL, c,d); RESULT.setLocation(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // C ::= C NOT_EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.NOT_EQUAL,c,d); RESULT.setLocation(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // D ::= E 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = e; RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // D ::= D LT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LT, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // D ::= D LEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LEQ, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // D ::= D GT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GT, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // D ::= D GEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GEQ, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // E ::= F 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = f; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // E ::= E PLUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.PLUS, e,f); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // E ::= E MINUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MINUS,e,f); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // F ::= G 
            {
                Expression RESULT = null;
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = g; RESULT.setLocation(g); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // F ::= F TIMES G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.TIMES, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // F ::= F HIGH_MULT G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.HIGH_MULT, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // F ::= F DIVIDE G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.DIVIDE, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // F ::= F MODULO G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MODULO, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // G ::= H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = h; RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // G ::= not_list 
            {
                Expression RESULT = null;
                int nleft = CUP$Parser$stack.peek().left;
                int nright = CUP$Parser$stack.peek().right;
                Expression n = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = n; RESULT.setLocation(n); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // G ::= minus_list 
            {
                Expression RESULT = null;
                int mleft = CUP$Parser$stack.peek().left;
                int mright = CUP$Parser$stack.peek().right;
                Expression m = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = m; RESULT.setLocation(m); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // H ::= I 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Expression i = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = i; RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // H ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(fc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // H ::= H OPEN_BRACKET A CLOSE_BRACKET 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int hright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Expression h = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Expression> value();
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(h,a); RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",13, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // I ::= K 
            {
                Expression RESULT = null;
                int kleft = CUP$Parser$stack.peek().left;
                int kright = CUP$Parser$stack.peek().right;
                Expression k = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = k; RESULT.setLocation(k); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // I ::= I PERIOD function_call 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int iright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression i = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = new ObjectFunctionCall(fc.getIdentifier(), i, fc.getArguments()); RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // I ::= I PERIOD identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int iright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression i = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = new ObjectField(i, id); RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // K ::= boolean_literal 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                BooleanLiteral b = CUP$Parser$stack.peek().<BooleanLiteral> value();
                 RESULT = b; RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // K ::= INTEGER_LITERAL 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                String i = CUP$Parser$stack.peek().<String> value();
                 RESULT = new IntegerLiteral(i); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // K ::= OPEN_PAREN A CLOSE_PAREN 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // K ::= identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Identifier i = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = i; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // K ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                String s = CUP$Parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // K ::= CHARACTER_LITERAL 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Character c = CUP$Parser$stack.peek().<Character> value();
                 RESULT = new CharacterLiteral(c); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // K ::= array_literal 
            {
                Expression RESULT = null;
                int alleft = CUP$Parser$stack.peek().left;
                int alright = CUP$Parser$stack.peek().right;
                ArrayLiteral al = CUP$Parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; RESULT.setLocation(al); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // K ::= NEW identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Identifier i = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = new ObjectInstantiation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",15, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // expression ::= A 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Expression a = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // expression_list ::= expression COMMA expression_list 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",19, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // expression_list ::= expression 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",19, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // expression_list_trailing_comma ::= expression COMMA expression_list_trailing_comma 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",20, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // expression_list_trailing_comma ::= expression COMMA 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",20, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // array_literal ::= OPEN_BRACE expression_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",17, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // array_literal ::= OPEN_BRACE expression_list_trailing_comma CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",17, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // array_literal ::= OPEN_BRACE CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                 RESULT = new ArrayLiteral(new LinkedList<>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",17, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                 RESULT = new IntType(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",21, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                 RESULT = new BoolType(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",21, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // array_size_type ::= OPEN_BRACKET expression CLOSE_BRACKET array_size_type 
            {
                SimpleEntry<List<Expression>,Integer> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                SimpleEntry<List<Expression>,Integer> ast = CUP$Parser$stack.peek().<SimpleEntry<List<Expression>,Integer>> value();
                 ast.getKey().add(0, e); RESULT = ast; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",23, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // array_size_type ::= array_no_size_type 
            {
                SimpleEntry<List<Expression>,Integer> RESULT = null;
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new SimpleEntry<List<Expression>, Integer>(new LinkedList<>(), anst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",23, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // array_no_size_type ::= OPEN_BRACKET CLOSE_BRACKET array_no_size_type 
            {
                Integer RESULT = null;
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = anst + 1; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",24, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // array_no_size_type ::= empty 
            {
                Integer RESULT = null;
                 RESULT = 0; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",24, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // var_type ::= primitive_type array_no_size_type 
            {
                VariableType RESULT = null;
                int ptleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int ptright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType pt = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = VariableType.construct(pt, anst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",22, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // typed_declaration_no_size ::= identifier COLON primitive_type array_no_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                Integer ast = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new TypedDeclaration(id, VariableType.construct(t, ast), new LinkedList<Expression>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_no_size",26, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // typed_declaration ::= identifier COLON primitive_type array_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                SimpleEntry<List<Expression>,Integer> ast = CUP$Parser$stack.peek().<SimpleEntry<List<Expression>,Integer>> value();
                 RESULT = new TypedDeclaration(id, VariableType.construct(t, ast.getKey().size() + ast.getValue()), ast.getKey()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration",25, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // function_call ::= identifier OPEN_PAREN expression_list CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new FunctionCall(id, lst); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id, new LinkedList<Expression>()); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // function_call ::= LENGTH OPEN_PAREN expression_list CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Object id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Object> value();
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new FunctionCall(new Identifier("length"), lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // assignment_lhs_array_brackets ::= assignment_lhs_array OPEN_BRACKET expression CLOSE_BRACKET 
            {
                ArrayIndex RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Expression> value();
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(a,e); RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array_brackets",28, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // assignment_lhs_array ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(fc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // assignment_lhs_array ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                String s = CUP$Parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // assignment_lhs_array ::= identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Identifier i = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = i; RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // assignment_lhs_array ::= assignment_lhs_array_brackets 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                ArrayIndex a = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = a; RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // object_expression ::= identifier 
            {
                Expression RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = id; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // object_expression ::= NEW identifier 
            {
                Expression RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = new ObjectInstantiation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // object_expression ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // object_expression ::= object_function_call 
            {
                Expression RESULT = null;
                int ofcleft = CUP$Parser$stack.peek().left;
                int ofcright = CUP$Parser$stack.peek().right;
                ObjectFunctionCall ofc = CUP$Parser$stack.peek().<ObjectFunctionCall> value();
                 RESULT = ofc;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // object_expression ::= assignment_lhs_array_brackets 
            {
                Expression RESULT = null;
                int aileft = CUP$Parser$stack.peek().left;
                int airight = CUP$Parser$stack.peek().right;
                ArrayIndex ai = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = ai; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // object_expression ::= object_field 
            {
                Expression RESULT = null;
                int ofleft = CUP$Parser$stack.peek().left;
                int ofright = CUP$Parser$stack.peek().right;
                ObjectField of = CUP$Parser$stack.peek().<ObjectField> value();
                 RESULT = of; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_expression",53, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // object_function_call ::= object_expression PERIOD function_call 
            {
                ObjectFunctionCall RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = new ObjectFunctionCall(fc.getIdentifier(), e, fc.getArguments()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_function_call",54, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // object_field ::= object_expression PERIOD identifier 
            {
                ObjectField RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = new ObjectField(e, id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_field",55, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // assignment_lhs ::= identifier 
            {
                Assignable RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = id; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // assignment_lhs ::= assignment_lhs_array_brackets 
            {
                Assignable RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                ArrayIndex a = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // assignment_lhs ::= typed_declaration_no_size 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // assignment_lhs ::= function_call 
            {
                Assignable RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // assignment_lhs ::= object_function_call 
            {
                Assignable RESULT = null;
                int ofcleft = CUP$Parser$stack.peek().left;
                int ofcright = CUP$Parser$stack.peek().right;
                ObjectFunctionCall ofc = CUP$Parser$stack.peek().<ObjectFunctionCall> value();
                 RESULT = ofc; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // assignment_lhs ::= object_field 
            {
                Assignable RESULT = null;
                int oleft = CUP$Parser$stack.peek().left;
                int oright = CUP$Parser$stack.peek().right;
                ObjectField o = CUP$Parser$stack.peek().<ObjectField> value();
                 RESULT = o; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // declaration_assignment_lhs ::= typed_declaration_no_size 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",31, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // declaration_assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",31, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA multiple_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dlleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dlright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dllleft = CUP$Parser$stack.peek().left;
                int dllright = CUP$Parser$stack.peek().right;
                List<Assignable> dll = CUP$Parser$stack.peek().<List<Assignable>> value();
                 dll.add(0, dl); RESULT = dll; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",32, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA declaration_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dl1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dl1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dl2left = CUP$Parser$stack.peek().left;
                int dl2right = CUP$Parser$stack.peek().right;
                Assignable dl2 = CUP$Parser$stack.peek().<Assignable> value();
                 LinkedList<Assignable> lst = new LinkedList<Assignable>(Arrays.asList(dl2)); lst.add(0, dl1); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",32, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // assignment ::= assignment_lhs GETS expression 
            {
                Assignment RESULT = null;
                int alleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int alright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable al = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Assignable> lst = new LinkedList<>(); lst.add(0, al); RESULT = new Assignment(lst, e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",33, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // assignment ::= multiple_assignment_lhs GETS function_call 
            {
                Assignment RESULT = null;
                int allleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int allright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                List<Assignable> all = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<List<Assignable>> value();
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = new Assignment(all, fc); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",33, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b, Optional.empty()); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",34, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block ELSE block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<Expression> value();
                int b1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int b1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Block b1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Block> value();
                int b2left = CUP$Parser$stack.peek().left;
                int b2right = CUP$Parser$stack.peek().right;
                Block b2 = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b1, Optional.of(b2)); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",34, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // while_statement ::= WHILE OPEN_PAREN expression CLOSE_PAREN block 
            {
                WhileStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new WhileStatement(e,b); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",35, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // return_statement ::= RETURN expression_list 
            {
                ReturnStatement RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 RESULT = new ReturnStatement(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",36, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // statement_no_semicolon ::= if_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                IfStatement s = CUP$Parser$stack.peek().<IfStatement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // statement_no_semicolon ::= while_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                WhileStatement s = CUP$Parser$stack.peek().<WhileStatement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // statement_no_semicolon ::= procedure_call 
            {
                Statement RESULT = null;
                int pcleft = CUP$Parser$stack.peek().left;
                int pcright = CUP$Parser$stack.peek().right;
                ProcedureCall pc = CUP$Parser$stack.peek().<ProcedureCall> value();
                 RESULT = pc; RESULT.setLocation(pc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // statement_no_semicolon ::= typed_declaration 
            {
                Statement RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(td); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // statement_no_semicolon ::= assignment 
            {
                Statement RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Assignment a = CUP$Parser$stack.peek().<Assignment> value();
                 RESULT = a; RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // statement_no_semicolon ::= return_statement 
            {
                Statement RESULT = null;
                int rleft = CUP$Parser$stack.peek().left;
                int rright = CUP$Parser$stack.peek().right;
                ReturnStatement r = CUP$Parser$stack.peek().<ReturnStatement> value();
                 RESULT = r; RESULT.setLocation(r); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // statement ::= statement_no_semicolon 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",40, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // statement ::= statement_no_semicolon SEMICOLON 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int sright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Statement s = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Statement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",40, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // block ::= block_scope 
            {
                Block RESULT = null;
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 RESULT = bl; RESULT.setLocation(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",37, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // block ::= statement 
            {
                Block RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",37, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // typed_declaration_list ::= identifier COMMA typed_declaration 
            {
                List<TypedDeclaration> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 List<TypedDeclaration> f = new LinkedList<>(); f.add(td); f.add(0, new TypedDeclaration(id, td.getDeclarationType(), td.getArraySizes())); RESULT = f; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",48, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // typed_declaration_list ::= identifier COMMA typed_declaration_list 
            {
                List<TypedDeclaration> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                List<TypedDeclaration> f = CUP$Parser$stack.peek().<List<TypedDeclaration>> value();
                 TypedDeclaration temp = f.get(f.size()-1); f.add(0, new TypedDeclaration(id, temp.getDeclarationType(), temp.getArraySizes())); RESULT = f; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",48, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // block_list ::= block block_list 
            {
                BlockList RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Block b = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Block> value();
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 bl.getBlocks().add(0, b); RESULT = bl; RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",38, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // block_list ::= typed_declaration_list block_list 
            {
                BlockList RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<TypedDeclaration> f = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<TypedDeclaration>> value();
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 for(TypedDeclaration td : f) { bl.getBlocks().add(0, td); } RESULT = bl; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",38, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // block_list ::= RETURN 
            {
                BlockList RESULT = null;
                 List<Block> bl = new LinkedList<>(); bl.add(0,new ReturnStatement(new LinkedList<>())); RESULT = new BlockList(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // block_list ::= empty 
            {
                BlockList RESULT = null;
                 List<Block> bl = new LinkedList<>(); RESULT = new BlockList(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // block_scope ::= OPEN_BRACE block_list CLOSE_BRACE 
            {
                BlockList RESULT = null;
                int blleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int blright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList bl = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 RESULT = bl; RESULT.setLocation(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_scope",39, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // function_declaration_return_types ::= var_type COMMA function_declaration_return_types 
            {
                List<VariableType> RESULT = null;
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                VariableType t = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<VariableType> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<VariableType> lst = CUP$Parser$stack.peek().<List<VariableType>> value();
                 lst.add(0,t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_return_types",42, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // function_declaration_return_types ::= var_type 
            {
                List<VariableType> RESULT = null;
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                VariableType t = CUP$Parser$stack.peek().<VariableType> value();
                 List<VariableType> lst = new LinkedList<>(); lst.add(0, t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_return_types",42, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // function_declaration_argument_single ::= identifier COLON var_type 
            {
                SimpleEntry<Identifier,VariableType> RESULT = null;
                int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int iright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier i = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                VariableType t = CUP$Parser$stack.peek().<VariableType> value();
                 RESULT = new SimpleEntry<Identifier, VariableType>(i, t); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_single",43, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // function_declaration_argument_list ::= function_declaration_argument_single COMMA function_declaration_argument_list 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int fdasleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fdasright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                SimpleEntry<Identifier,VariableType> fdas = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<SimpleEntry<Identifier,VariableType>> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<SimpleEntry<Identifier,VariableType>> lst = CUP$Parser$stack.peek().<List<SimpleEntry<Identifier,VariableType>>> value();
                 lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",44, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // function_declaration_argument_list ::= function_declaration_argument_single 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int fdasleft = CUP$Parser$stack.peek().left;
                int fdasright = CUP$Parser$stack.peek().right;
                SimpleEntry<Identifier,VariableType> fdas = CUP$Parser$stack.peek().<SimpleEntry<Identifier,VariableType>> value();
                 List<SimpleEntry<Identifier, VariableType>> lst = new LinkedList<>(); lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",44, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // function_declaration_argument ::= function_declaration_argument_list 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<SimpleEntry<Identifier,VariableType>> lst = CUP$Parser$stack.peek().<List<SimpleEntry<Identifier,VariableType>>> value();
                 RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",45, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 120: // function_declaration_argument ::= empty 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",45, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 121: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN COLON function_declaration_return_types OPEN_BRACE block_list CLOSE_BRACE 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-8).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-8).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-8).<Identifier> value();
                int argPairsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-6).left;
                int argPairsright = CUP$Parser$stack.elementAt(CUP$Parser$top-6).right;
                List<SimpleEntry<Identifier,VariableType>> argPairs = CUP$Parser$stack.elementAt(CUP$Parser$top-6).<List<SimpleEntry<Identifier,VariableType>>> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                List<VariableType> t = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<List<VariableType>> value();
                int fbleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fbright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList fb = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(id, new FunctionType(argTypes, new VariableTypeList(t)), args, fb); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",46, CUP$Parser$stack.elementAt(CUP$Parser$top-8), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 122: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN OPEN_BRACE block_list CLOSE_BRACE 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-6).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-6).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-6).<Identifier> value();
                int argPairsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int argPairsright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                List<SimpleEntry<Identifier,VariableType>> argPairs = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<List<SimpleEntry<Identifier,VariableType>>> value();
                int fbleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fbright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList fb = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(id, new FunctionType(argTypes, new VariableTypeList(new LinkedList<>())), args, fb); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",46, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 123: // procedure_call ::= identifier OPEN_PAREN expression_list CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int elistleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int elistright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> elist = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ProcedureCall(id, elist); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",47, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 124: // procedure_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                 RESULT = new ProcedureCall(id, new LinkedList<Expression>()); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",47, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 125: // use_block ::= USE identifier use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Identifier> value();
                int uleft = CUP$Parser$stack.peek().left;
                int uright = CUP$Parser$stack.peek().right;
                List<UseStatement> u = CUP$Parser$stack.peek().<List<UseStatement>> value();
                 u.add(0, new UseStatement(id)); RESULT = u; RESULT.get(0).setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",3, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 126: // use_block ::= USE identifier SEMICOLON use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int uleft = CUP$Parser$stack.peek().left;
                int uright = CUP$Parser$stack.peek().right;
                List<UseStatement> u = CUP$Parser$stack.peek().<List<UseStatement>> value();
                 u.add(0, new UseStatement(id)); RESULT = u; RESULT.get(0).setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",3, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 127: // use_block ::= empty 
            {
                List<UseStatement> RESULT = null;
                 RESULT = new LinkedList<UseStatement>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",3, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 128: // field ::= typed_declaration_list 
            {
                List<TypedDeclaration> RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                List<TypedDeclaration> td = CUP$Parser$stack.peek().<List<TypedDeclaration>> value();
                 RESULT = td; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",49, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 129: // field ::= typed_declaration 
            {
                List<TypedDeclaration> RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 List<TypedDeclaration> lst = new LinkedList<>(); lst.add(td); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",49, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 130: // class_declaration_body ::= field class_declaration_body 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<TypedDeclaration> f = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<TypedDeclaration>> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> c = CUP$Parser$stack.peek().<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 c.part1().addAll(f); RESULT = c ; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",50, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 131: // class_declaration_body ::= function_declaration class_declaration_body 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                FunctionDeclaration f = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<FunctionDeclaration> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> c = CUP$Parser$stack.peek().<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 c.part2().add(f); RESULT = c; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",50, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 132: // class_declaration_body ::= empty 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                 Pair<List<TypedDeclaration>, List<FunctionDeclaration>> pair = new Pair<>(new LinkedList<>(), new LinkedList<>()); RESULT = pair; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",50, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 133: // class_declaration ::= CLASS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
            {
                ClassDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int bodyleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bodyright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> body = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 List<MethodDeclaration> methods = new LinkedList<>(); for(FunctionDeclaration fd : body.part2()) { methods.add(new MethodDeclaration(id, fd)); } RESULT = new ClassDeclaration(id, body.part1(), methods, Optional.empty()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration",51, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 134: // class_declaration ::= CLASS identifier EXTENDS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
            {
                ClassDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-5).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-5).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-5).<Identifier> value();
                int id2left = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int id2right = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id2 = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int bodyleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bodyright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> body = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 List<MethodDeclaration> methods = new LinkedList<>(); for(FunctionDeclaration fd : body.part2()) { methods.add(new MethodDeclaration(id, fd)); } RESULT = new ClassDeclaration(id, body.part1(), methods, Optional.of(id2)); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration",51, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 135: // program_body ::= class_declaration program_body 
            {
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                ClassDeclaration c = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<ClassDeclaration> value();
                int pleft = CUP$Parser$stack.peek().left;
                int pright = CUP$Parser$stack.peek().right;
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> p = CUP$Parser$stack.peek().<Pair<List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 p.part2().add(c); RESULT = p; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",52, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 136: // program_body ::= function_declaration program_body 
            {
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                int fdleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fdright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                FunctionDeclaration fd = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<FunctionDeclaration> value();
                int pleft = CUP$Parser$stack.peek().left;
                int pright = CUP$Parser$stack.peek().right;
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> p = CUP$Parser$stack.peek().<Pair<List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 p.part1().add(fd); RESULT = p; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",52, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 137: // program_body ::= empty 
            {
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                 Pair<List<FunctionDeclaration>, List<ClassDeclaration>> body = new Pair<>(new LinkedList<>(), new LinkedList<>()); RESULT = body; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",52, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 138: // program ::= use_block program_body 
            {
                Program RESULT = null;
                int uleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int uright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<UseStatement> u = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<UseStatement>> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> b = CUP$Parser$stack.peek().<Pair<List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 RESULT = new Program(u,b.part1(), b.part2()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 139: // program ::= error 
            {
                Program RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$Parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                           CUP$Parser$act_num,
                           CUP$Parser$parser,
                           CUP$Parser$stack,
                           CUP$Parser$top);
    }
}

}
