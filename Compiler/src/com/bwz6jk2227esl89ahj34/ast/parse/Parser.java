
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package com.bwz6jk2227esl89ahj34.ast.parse;

import com.bwz6jk2227esl89ahj34.ast.*;
import com.bwz6jk2227esl89ahj34.ast.type.FunctionType;
import com.bwz6jk2227esl89ahj34.ast.type.IntType;
import com.bwz6jk2227esl89ahj34.ast.type.BoolType;
import com.bwz6jk2227esl89ahj34.ast.type.PrimitiveType;
import com.bwz6jk2227esl89ahj34.ast.type.ArrayType;
import com.bwz6jk2227esl89ahj34.ast.type.VariableType;
import com.bwz6jk2227esl89ahj34.ast.type.VariableTypeList;
import com.bwz6jk2227esl89ahj34.util.Util;
import com.bwz6jk2227esl89ahj34.util.prettyprint.Pair;
import java.util.AbstractMap.SimpleEntry;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

/** CUP v0.11b 20150326 generated parser.
  */
public class Parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return ParserSym.class;
  }

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\003\002\000\002\004" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\007\004\000\002\007\004\000\002\021\003\000" +
    "\002\021\003\000\002\010\003\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\005\000\002\012\005\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\006\000\002\020\003\000\002\020\003\000\002" +
    "\020\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\004\000\002\023\003" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\004\000\002\022\005\000\002\022\005\000\002" +
    "\022\004\000\002\026\003\000\002\026\003\000\002\030" +
    "\006\000\002\030\003\000\002\031\005\000\002\031\003" +
    "\000\002\027\004\000\002\033\006\000\002\032\006\000" +
    "\002\034\006\000\002\034\005\000\002\034\006\000\002" +
    "\035\006\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\040\003\000\002\040\003\000\002\041\005\000\002" +
    "\041\005\000\002\042\005\000\002\042\005\000\002\043" +
    "\007\000\002\043\011\000\002\044\007\000\002\045\004" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\051\003\000\002\051\004\000\002\046\003\000\002\046" +
    "\003\000\002\061\005\000\002\061\005\000\002\047\004" +
    "\000\002\047\004\000\002\047\003\000\002\047\003\000" +
    "\002\050\005\000\002\053\005\000\002\053\003\000\002" +
    "\054\005\000\002\055\005\000\002\055\003\000\002\056" +
    "\003\000\002\056\003\000\002\057\013\000\002\057\011" +
    "\000\002\060\006\000\002\060\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\003\000\002\062\003\000\002" +
    "\062\003\000\002\063\004\000\002\063\004\000\002\063" +
    "\003\000\002\064\007\000\002\064\011\000\002\065\004" +
    "\000\002\065\004\000\002\065\003\000\002\002\004\000" +
    "\002\002\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\014\002\000\003\007\004\000\021\005\056" +
    "\000\001\002\000\010\002\000\004\013\056\021\001\002" +
    "\000\004\004\013\001\002\000\004\002\011\001\002\000" +
    "\004\002\uff83\001\002\000\010\002\uff8f\004\uff8f\056\uff8f" +
    "\001\002\000\004\002\001\001\002\000\014\002\000\004" +
    "\000\021\005\051\015\056\000\001\002\000\112\002\uffff" +
    "\004\uffff\005\uffff\014\uffff\015\uffff\016\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff" +
    "\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\055" +
    "\uffff\056\uffff\057\uffff\001\002\000\010\002\uff91\004\uff91" +
    "\056\uff91\001\002\000\012\002\000\004\000\021\005\056" +
    "\000\001\002\000\010\002\uff90\004\uff90\056\uff90\001\002" +
    "\000\004\043\044\001\002\000\004\002\uff84\001\002\000" +
    "\004\004\013\001\002\000\010\002\000\004\013\056\021" +
    "\001\002\000\010\002\000\004\013\056\021\001\002\000" +
    "\004\002\uff85\001\002\000\004\002\uff86\001\002\000\004" +
    "\002\uff87\001\002\000\006\045\031\057\030\001\002\000" +
    "\004\004\013\001\002\000\006\004\013\046\000\001\002" +
    "\000\004\046\344\001\002\000\010\043\044\047\045\050" +
    "\043\001\002\000\006\004\013\046\000\001\002\000\006" +
    "\004\uff8e\046\uff8e\001\002\000\006\004\uff8d\046\uff8d\001" +
    "\002\000\006\004\013\046\000\001\002\000\004\046\uff8a" +
    "\001\002\000\004\046\uff8b\001\002\000\004\046\uff8c\001" +
    "\002\000\004\004\013\001\002\000\006\004\013\044\000" +
    "\001\002\000\006\012\050\013\046\001\002\000\040\004" +
    "\uffcc\005\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\040\uffcc" +
    "\041\uffcc\044\uffcc\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\055\uffcc\001\002\000\026\004\000\005\000\014\000" +
    "\016\000\020\000\041\053\045\000\046\000\052\000\055" +
    "\000\001\002\000\040\004\uffcd\005\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\020\uffcd\040\uffcd\041\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd\001\002\000\030" +
    "\004\uffca\005\uffca\014\uffca\015\uffca\016\uffca\020\uffca\045" +
    "\uffca\046\uffca\051\uffca\052\uffca\055\uffca\001\002\000\030" +
    "\004\uffc5\005\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\045" +
    "\uffc5\046\uffc5\051\uffc5\052\uffc5\055\uffc5\001\002\000\034" +
    "\004\013\005\105\006\100\007\073\010\101\011\106\023" +
    "\074\027\102\042\072\043\103\045\075\055\066\060\056" +
    "\001\002\000\036\004\uffc8\005\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\020\uffc8\040\uffc8\044\uffc8\045\uffc8\046\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\055\uffc8\001\002\000\040\004\uffd5\005" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\035\112\042\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5\052\uffd5\055" +
    "\uffd5\001\002\000\004\004\013\001\002\000\042\004\ufff7" +
    "\005\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7\034\115\035" +
    "\ufff7\042\ufff7\044\ufff7\045\ufff7\046\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\055\ufff7\001\002\000\046\004\ufff5\005\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\020\ufff5\034\ufff5\035\ufff5\036\117" +
    "\037\120\042\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\055\ufff5\001\002\000\056\004\ufff3\005\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\020\ufff3\030\123\031\124\032" +
    "\125\033\122\034\ufff3\035\ufff3\036\ufff3\037\ufff3\042\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3\052\ufff3\055" +
    "\ufff3\001\002\000\062\004\ufff0\005\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\020\ufff0\022\127\023\130\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\042\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\055" +
    "\ufff0\001\002\000\074\004\uffdf\005\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\001\002" +
    "\000\072\004\uffeb\005\uffeb\014\uffeb\015\uffeb\016\uffeb\020" +
    "\uffeb\022\uffeb\023\uffeb\024\132\025\135\026\134\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\042\uffeb\044\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\133\055\uffeb\001\002\000\072\004\uffe8\005" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\042\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\055" +
    "\uffe8\001\002\000\004\043\202\001\002\000\074\004\uffe3" +
    "\005\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\041\151\042" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\055\uffe3\001\002\000\074\004\uffdd\005\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\055" +
    "\uffdd\001\002\000\074\004\uffe0\005\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0\001\002" +
    "\000\040\004\000\005\000\014\000\015\000\016\000\020" +
    "\000\040\000\041\201\044\000\045\000\046\000\050\000" +
    "\051\000\052\000\055\000\001\002\000\074\004\uffdc\005" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\055\uffdc\001\002\000\032\004\013\005\105\006\100" +
    "\007\073\010\101\011\106\023\074\043\103\045\075\054" +
    "\176\055\066\060\056\001\002\000\034\004\013\005\105" +
    "\006\100\007\073\010\101\011\106\023\074\027\102\043" +
    "\103\045\075\046\165\055\066\060\056\001\002\000\076" +
    "\004\uffda\005\uffda\014\uffda\015\uffda\016\uffda\020\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\041" +
    "\uffda\042\uffda\043\156\044\uffda\045\uffda\046\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\055\uffda\001\002\000\004\042" +
    "\154\001\002\000\074\004\uffd8\005\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\001\002" +
    "\000\074\004\ufff9\005\ufff9\014\ufff9\015\ufff9\016\ufff9\020" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\041\ufff9\042\ufff9\044\ufff9\045\ufff9\046\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\055\ufff9\001\002\000\030\004" +
    "\013\005\105\006\100\007\073\010\101\011\106\027\102" +
    "\043\103\045\075\055\066\060\056\001\002\000\032\004" +
    "\013\005\105\006\100\007\073\010\101\011\106\023\074" +
    "\027\102\043\103\045\075\055\066\060\056\001\002\000" +
    "\072\004\uffe1\005\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\042\uffe1\044\uffe1\045\uffe1\046\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\055\uffe1\001\002\000\074\004\uffd9\005\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\020\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\055\uffd9\001\002\000\074\004\ufff8\005\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\041\ufff8\042\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\001" +
    "\002\000\074\004\uffd7\005\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\020\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\041\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\001\002\000\072" +
    "\004\uffe2\005\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\042" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\055\uffe2\001\002\000\006\035\112\044\113\001" +
    "\002\000\032\004\013\005\105\006\100\007\073\010\101" +
    "\011\106\023\074\027\102\043\103\045\075\055\066\060" +
    "\056\001\002\000\074\004\uffdb\005\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\041\uffdb\042\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb\001\002" +
    "\000\042\004\ufff6\005\ufff6\014\ufff6\015\ufff6\016\ufff6\020" +
    "\ufff6\034\115\035\ufff6\042\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\055\ufff6\001\002\000\032\004" +
    "\013\005\105\006\100\007\073\010\101\011\106\023\074" +
    "\027\102\043\103\045\075\055\066\060\056\001\002\000" +
    "\046\004\ufff4\005\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4" +
    "\034\ufff4\035\ufff4\036\117\037\120\042\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\055\ufff4\001\002" +
    "\000\032\004\013\005\105\006\100\007\073\010\101\011" +
    "\106\023\074\027\102\043\103\045\075\055\066\060\056" +
    "\001\002\000\032\004\013\005\105\006\100\007\073\010" +
    "\101\011\106\023\074\027\102\043\103\045\075\055\066" +
    "\060\056\001\002\000\056\004\ufff1\005\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\020\ufff1\030\123\031\124\032\125\033\122" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\042\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\055\ufff1\001\002" +
    "\000\032\004\013\005\105\006\100\007\073\010\101\011" +
    "\106\023\074\027\102\043\103\045\075\055\066\060\056" +
    "\001\002\000\032\004\013\005\105\006\100\007\073\010" +
    "\101\011\106\023\074\027\102\043\103\045\075\055\066" +
    "\060\056\001\002\000\032\004\013\005\105\006\100\007" +
    "\073\010\101\011\106\023\074\027\102\043\103\045\075" +
    "\055\066\060\056\001\002\000\032\004\013\005\105\006" +
    "\100\007\073\010\101\011\106\023\074\027\102\043\103" +
    "\045\075\055\066\060\056\001\002\000\062\004\uffed\005" +
    "\uffed\014\uffed\015\uffed\016\uffed\020\uffed\022\127\023\130" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\042\uffed\044\uffed\045\uffed\046\uffed\050\uffed" +
    "\051\uffed\052\uffed\055\uffed\001\002\000\032\004\013\005" +
    "\105\006\100\007\073\010\101\011\106\023\074\027\102" +
    "\043\103\045\075\055\066\060\056\001\002\000\032\004" +
    "\013\005\105\006\100\007\073\010\101\011\106\023\074" +
    "\027\102\043\103\045\075\055\066\060\056\001\002\000" +
    "\072\004\uffe9\005\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9" +
    "\022\uffe9\023\uffe9\024\132\025\135\026\134\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\042\uffe9\044\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\133\055\uffe9\001\002\000\032\004\013\005\105" +
    "\006\100\007\073\010\101\011\106\023\074\027\102\043" +
    "\103\045\075\055\066\060\056\001\002\000\032\004\013" +
    "\005\105\006\100\007\073\010\101\011\106\023\074\027" +
    "\102\043\103\045\075\055\066\060\056\001\002\000\032" +
    "\004\013\005\105\006\100\007\073\010\101\011\106\023" +
    "\074\027\102\043\103\045\075\055\066\060\056\001\002" +
    "\000\032\004\013\005\105\006\100\007\073\010\101\011" +
    "\106\023\074\027\102\043\103\045\075\055\066\060\056" +
    "\001\002\000\072\004\uffe5\005\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\055\uffe5\001\002\000\072\004" +
    "\uffe4\005\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\042\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\055\uffe4\001\002\000\072\004\uffe6\005\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\042\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\001\002" +
    "\000\072\004\uffe7\005\uffe7\014\uffe7\015\uffe7\016\uffe7\020" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\042\uffe7\044\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\055\uffe7\001\002\000\072\004\uffea\005" +
    "\uffea\014\uffea\015\uffea\016\uffea\020\uffea\022\uffea\023\uffea" +
    "\024\132\025\135\026\134\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\042\uffea\044\uffea" +
    "\045\uffea\046\uffea\050\uffea\051\uffea\052\uffea\053\133\055" +
    "\uffea\001\002\000\062\004\uffee\005\uffee\014\uffee\015\uffee" +
    "\016\uffee\020\uffee\022\127\023\130\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\042\uffee" +
    "\044\uffee\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee\055" +
    "\uffee\001\002\000\062\004\uffef\005\uffef\014\uffef\015\uffef" +
    "\016\uffef\020\uffef\022\127\023\130\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\042\uffef" +
    "\044\uffef\045\uffef\046\uffef\050\uffef\051\uffef\052\uffef\055" +
    "\uffef\001\002\000\062\004\uffec\005\uffec\014\uffec\015\uffec" +
    "\016\uffec\020\uffec\022\127\023\130\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\042\uffec" +
    "\044\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052\uffec\055" +
    "\uffec\001\002\000\056\004\ufff2\005\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\020\ufff2\030\123\031\124\032\125\033\122\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\042\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\050\ufff2\051\ufff2\052\ufff2\055\ufff2\001\002\000" +
    "\074\004\ufffa\005\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\041\151\042\ufffa\044\ufffa\045\ufffa\046\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\055\ufffa\001\002\000\072\004\ufffb" +
    "\005\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\042\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\055\ufffb\001\002\000\032\004\013\005\105\006\100\007" +
    "\073\010\101\011\106\023\074\027\102\043\103\045\075" +
    "\055\066\060\056\001\002\000\006\035\112\042\153\001" +
    "\002\000\074\004\uffde\005\uffde\014\uffde\015\uffde\016\uffde" +
    "\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\041\uffde\042\uffde\044\uffde\045\uffde\046\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\055\uffde\001\002\000\032" +
    "\004\000\005\000\014\000\015\000\016\000\020\000\041" +
    "\053\045\000\046\000\051\000\052\000\055\000\001\002" +
    "\000\030\004\uffcb\005\uffcb\014\uffcb\015\uffcb\016\uffcb\020" +
    "\uffcb\045\uffcb\046\uffcb\051\uffcb\052\uffcb\055\uffcb\001\002" +
    "\000\034\004\013\005\105\006\100\007\073\010\101\011" +
    "\106\023\074\027\102\043\103\044\161\045\075\055\066" +
    "\060\056\001\002\000\004\044\164\001\002\000\034\004" +
    "\uffd3\005\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\050\162\051\uffd3\052\uffd3\055\uffd3\001" +
    "\002\000\074\004\uffc3\005\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\020\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\001\002\000\032" +
    "\004\013\005\105\006\100\007\073\010\101\011\106\023" +
    "\074\027\102\043\103\045\075\055\066\060\056\001\002" +
    "\000\032\004\uffd4\005\uffd4\014\uffd4\015\uffd4\016\uffd4\020" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\051\uffd4\052\uffd4\055\uffd4" +
    "\001\002\000\074\004\uffc4\005\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\020\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\041\uffc4\042\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\001\002\000" +
    "\074\004\uffce\005\uffce\014\uffce\015\uffce\016\uffce\020\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\041\uffce\042\uffce\044\uffce\045\uffce\046\uffce\050\uffce\051" +
    "\uffce\052\uffce\053\uffce\055\uffce\001\002\000\004\046\174" +
    "\001\002\000\004\046\173\001\002\000\006\046\uffd3\050" +
    "\171\001\002\000\034\004\013\005\105\006\100\007\073" +
    "\010\101\011\106\023\074\027\102\043\103\045\075\046" +
    "\uffd1\055\066\060\056\001\002\000\004\046\uffd2\001\002" +
    "\000\074\004\uffcf\005\uffcf\014\uffcf\015\uffcf\016\uffcf\020" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\041\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\055\uffcf\001\002\000\074\004" +
    "\uffd0\005\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0" +
    "\042\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\055\uffd0\001\002\000\074\004\ufffc\005\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\020\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\041\151\042\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\055\ufffc\001\002\000\072\004\ufffd\005\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\020\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\042\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\055\ufffd\001\002\000" +
    "\072\004\ufffe\005\ufffe\014\ufffe\015\ufffe\016\ufffe\020\ufffe" +
    "\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\042\ufffe\044\ufffe\045\ufffe\046\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\055\ufffe\001\002\000\036\004\uffc9\005\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\020\uffc9\040\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\050\uffc9\051\uffc9\052\uffc9\055\uffc9\001\002" +
    "\000\004\042\072\001\002\000\032\004\013\005\105\006" +
    "\100\007\073\010\101\011\106\023\074\027\102\043\103" +
    "\045\075\055\066\060\056\001\002\000\004\044\204\001" +
    "\002\000\076\004\uffc2\005\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\020\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\001\002" +
    "\000\074\004\uffd6\005\uffd6\014\uffd6\015\uffd6\016\uffd6\020" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\041\uffd6\042\uffd6\044\uffd6\045\uffd6\046\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\055\uffd6\001\002\000\004\047" +
    "\337\001\002\000\004\044\215\001\002\000\004\044\uff97" +
    "\001\002\000\006\044\uff98\050\213\001\002\000\004\044" +
    "\uff96\001\002\000\004\004\013\001\002\000\004\044\uff99" +
    "\001\002\000\006\045\216\047\217\001\002\000\024\004" +
    "\013\005\254\014\243\016\255\020\236\045\237\046\000" +
    "\052\226\055\066\001\002\000\006\012\050\013\046\001" +
    "\002\000\006\045\uff9b\050\333\001\002\000\004\045\224" +
    "\001\002\000\012\041\201\044\000\045\000\050\000\001" +
    "\002\000\010\044\uffc7\045\uffc7\050\uffc7\001\002\000\024" +
    "\004\013\005\254\014\243\016\255\020\236\045\237\046" +
    "\000\052\226\055\066\001\002\000\030\004\uffa5\005\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\020\uffa5\045\uffa5\046\uffa5\051" +
    "\uffa5\052\uffa5\055\uffa5\001\002\000\006\040\uffb8\050\uffb6" +
    "\001\002\000\006\040\uffb9\041\uffc0\001\002\000\030\004" +
    "\uffab\005\uffab\014\uffab\015\uffab\016\uffab\020\uffab\045\uffab" +
    "\046\uffab\051\uffab\052\uffab\055\uffab\001\002\000\004\040" +
    "\330\001\002\000\006\040\uffba\050\uffb7\001\002\000\004" +
    "\046\uff9e\001\002\000\006\040\uffbb\041\uffbd\001\002\000" +
    "\004\041\325\001\002\000\034\004\013\005\105\006\100" +
    "\007\073\010\101\011\106\023\074\027\102\043\103\045" +
    "\075\046\uff9f\055\066\060\056\001\002\000\024\004\013" +
    "\005\254\014\243\016\255\020\236\045\237\046\000\052" +
    "\226\055\066\001\002\000\030\004\uffa4\005\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\020\uffa4\045\uffa4\046\uffa4\051\uffa4\052" +
    "\uffa4\055\uffa4\001\002\000\024\004\013\005\254\014\243" +
    "\016\255\020\236\045\237\046\000\052\226\055\066\001" +
    "\002\000\030\004\uffac\005\uffac\014\uffac\015\uffac\016\uffac" +
    "\020\uffac\045\uffac\046\uffac\051\uffac\052\uffac\055\uffac\001" +
    "\002\000\004\043\314\001\002\000\030\004\uffa8\005\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\020\uffa8\045\uffa8\046\uffa8\051" +
    "\uffa8\052\uffa8\055\uffa8\001\002\000\014\040\uffbc\041\uffbe" +
    "\043\267\047\270\050\043\001\002\000\004\050\303\001" +
    "\002\000\030\004\uffa9\005\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\020\uffa9\045\uffa9\046\uffa9\051\uffa9\052\uffa9\055\uffa9\001" +
    "\002\000\004\040\301\001\002\000\024\004\013\005\254" +
    "\014\243\016\255\020\236\045\237\046\000\052\226\055" +
    "\066\001\002\000\030\004\uffa7\005\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\020\uffa7\045\uffa7\046\uffa7\051\277\052\uffa7\055" +
    "\uffa7\001\002\000\030\004\uffad\005\uffad\014\uffad\015\uffad" +
    "\016\uffad\020\uffad\045\uffad\046\uffad\051\uffad\052\uffad\055" +
    "\uffad\001\002\000\004\041\uffbf\001\002\000\004\043\261" +
    "\001\002\000\004\046\260\001\002\000\030\004\uffaa\005" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\020\uffaa\045\uffaa\046\uffaa" +
    "\051\uffaa\052\uffaa\055\uffaa\001\002\000\012\002\uff95\004" +
    "\uff95\046\uff95\056\uff95\001\002\000\032\004\013\005\105" +
    "\006\100\007\073\010\101\011\106\023\074\027\102\043" +
    "\103\045\075\055\066\060\056\001\002\000\004\044\263" +
    "\001\002\000\022\004\013\005\254\014\243\016\255\020" +
    "\264\045\237\052\226\055\066\001\002\000\032\004\013" +
    "\005\105\006\100\007\073\010\101\011\106\023\074\027" +
    "\102\043\103\045\075\055\066\060\056\001\002\000\030" +
    "\004\uffaf\005\uffaf\014\uffaf\015\uffaf\016\uffaf\020\uffaf\045" +
    "\uffaf\046\uffaf\051\uffaf\052\uffaf\055\uffaf\001\002\000\012" +
    "\040\uffbc\041\uffbe\043\267\047\270\001\002\000\034\004" +
    "\013\005\105\006\100\007\073\010\101\011\106\023\074" +
    "\027\102\043\103\044\274\045\075\055\066\060\056\001" +
    "\002\000\006\012\050\013\046\001\002\000\036\004\000" +
    "\005\000\014\000\015\000\016\000\020\000\040\000\041" +
    "\053\045\000\046\000\050\000\051\000\052\000\055\000" +
    "\001\002\000\034\004\uffca\005\uffca\014\uffca\015\uffca\016" +
    "\uffca\020\uffca\040\uffc6\045\uffca\046\uffca\050\uffc6\051\uffca" +
    "\052\uffca\055\uffca\001\002\000\004\044\275\001\002\000" +
    "\034\004\uff92\005\uff92\014\uff92\015\uff92\016\uff92\020\uff92" +
    "\040\uffc3\041\uffc3\045\uff92\046\uff92\051\uff92\052\uff92\055" +
    "\uff92\001\002\000\034\004\uff93\005\uff93\014\uff93\015\uff93" +
    "\016\uff93\020\uff93\040\uffc4\041\uffc4\045\uff93\046\uff93\051" +
    "\uff93\052\uff93\055\uff93\001\002\000\030\004\uffae\005\uffae" +
    "\014\uffae\015\uffae\016\uffae\020\uffae\045\uffae\046\uffae\051" +
    "\uffae\052\uffae\055\uffae\001\002\000\030\004\uffa6\005\uffa6" +
    "\014\uffa6\015\uffa6\016\uffa6\020\uffa6\045\uffa6\046\uffa6\051" +
    "\uffa6\052\uffa6\055\uffa6\001\002\000\004\046\uffa0\001\002" +
    "\000\032\004\013\005\105\006\100\007\073\010\101\011" +
    "\106\023\074\027\102\043\103\045\075\055\066\060\056" +
    "\001\002\000\030\004\uffb3\005\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\020\uffb3\045\uffb3\046\uffb3\051\uffb3\052\uffb3\055\uffb3" +
    "\001\002\000\006\004\013\052\305\001\002\000\004\047" +
    "\311\001\002\000\006\040\uffb6\050\uffb6\001\002\000\006" +
    "\040\uffb4\050\303\001\002\000\004\040\uffb5\001\002\000" +
    "\006\040\uffb7\050\uffb7\001\002\000\006\012\050\013\046" +
    "\001\002\000\010\040\000\041\201\050\000\001\002\000" +
    "\006\040\uffc6\050\uffc6\001\002\000\032\004\013\005\105" +
    "\006\100\007\073\010\101\011\106\023\074\027\102\043" +
    "\103\045\075\055\066\060\056\001\002\000\004\044\316" +
    "\001\002\000\022\004\013\005\254\014\243\016\255\020" +
    "\264\045\237\052\226\055\066\001\002\000\030\004\uffb1" +
    "\005\uffb1\014\uffb1\015\320\016\uffb1\020\uffb1\045\uffb1\046" +
    "\uffb1\051\uffb1\052\uffb1\055\uffb1\001\002\000\022\004\013" +
    "\005\254\014\243\016\255\020\264\045\237\052\226\055" +
    "\066\001\002\000\030\004\uffb0\005\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\020\uffb0\045\uffb0\046\uffb0\051\uffb0\052\uffb0\055" +
    "\uffb0\001\002\000\004\046\uffa1\001\002\000\004\046\324" +
    "\001\002\000\030\004\uff9d\005\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\020\uff9d\045\uff9d\046\uff9d\051\uff9d\052\uff9d\055\uff9d" +
    "\001\002\000\032\004\013\005\105\006\100\007\073\010" +
    "\101\011\106\023\074\027\102\043\103\045\075\055\066" +
    "\060\056\001\002\000\004\042\327\001\002\000\006\040" +
    "\uffc1\041\uffc1\001\002\000\006\004\013\055\066\001\002" +
    "\000\004\043\156\001\002\000\030\004\uffb2\005\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\020\uffb2\045\uffb2\046\uffb2\051\uffb2" +
    "\052\uffb2\055\uffb2\001\002\000\006\012\050\013\046\001" +
    "\002\000\004\045\uff9c\001\002\000\004\046\336\001\002" +
    "\000\012\002\uff94\004\uff94\046\uff94\056\uff94\001\002\000" +
    "\006\012\050\013\046\001\002\000\006\044\uff9a\050\uff9a" +
    "\001\002\000\006\047\045\050\043\001\002\000\024\004" +
    "\uffa3\005\uffa3\014\uffa3\016\uffa3\020\uffa3\045\uffa3\046\uffa3" +
    "\052\uffa3\055\uffa3\001\002\000\024\004\uffa2\005\uffa2\014" +
    "\uffa2\016\uffa2\020\uffa2\045\uffa2\046\uffa2\052\uffa2\055\uffa2" +
    "\001\002\000\010\002\uff89\004\uff89\056\uff89\001\002\000" +
    "\004\045\346\001\002\000\006\004\013\046\000\001\002" +
    "\000\004\046\350\001\002\000\010\002\uff88\004\uff88\056" +
    "\uff88\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\010\002\005\003\007\005\003\001\001\000" +
    "\014\003\023\004\016\057\022\064\021\065\017\001\001" +
    "\000\004\004\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\007" +
    "\005\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\007\005\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\026\001\001\000" +
    "\014\003\023\004\016\057\022\064\021\065\025\001\001" +
    "\000\014\003\023\004\016\057\022\064\021\065\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\344\001\001\000\020\003" +
    "\037\004\032\032\035\057\036\061\034\062\033\063\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\037\004\032\032\035\057\036\061\034\062\033\063\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\037\004\032\032\035\057\036\061\034\062\033\063\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\340\032\341\061\342\001\001\000\014" +
    "\003\211\004\205\054\210\055\207\056\206\001\001\000" +
    "\004\026\046\001\001\000\002\001\001\000\010\003\053" +
    "\030\051\031\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\075\006\103\007\107" +
    "\010\054\011\056\012\057\013\060\014\061\015\063\016" +
    "\064\017\066\020\070\021\067\022\106\023\076\034\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\053\031" +
    "\177\001\001\000\002\001\001\000\020\004\075\006\176" +
    "\017\174\020\070\021\067\022\106\034\062\001\001\000" +
    "\046\004\075\006\103\007\107\010\054\011\056\012\057" +
    "\013\060\014\061\015\063\016\064\017\066\020\070\021" +
    "\067\022\106\023\167\024\165\025\166\034\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\075\007\147\017\146\020\070" +
    "\021\067\022\106\034\062\001\001\000\040\004\075\006" +
    "\103\007\107\010\110\011\056\012\057\013\060\014\061" +
    "\015\063\016\064\017\066\020\070\021\067\022\106\034" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\075\006\103\007\107\011\113\012\057" +
    "\013\060\014\061\015\063\016\064\017\066\020\070\021" +
    "\067\022\106\034\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\075\006\103\007\107\012\115\013" +
    "\060\014\061\015\063\016\064\017\066\020\070\021\067" +
    "\022\106\034\062\001\001\000\002\001\001\000\032\004" +
    "\075\006\103\007\107\013\145\014\061\015\063\016\064" +
    "\017\066\020\070\021\067\022\106\034\062\001\001\000" +
    "\032\004\075\006\103\007\107\013\120\014\061\015\063" +
    "\016\064\017\066\020\070\021\067\022\106\034\062\001" +
    "\001\000\002\001\001\000\030\004\075\006\103\007\107" +
    "\014\144\015\063\016\064\017\066\020\070\021\067\022" +
    "\106\034\062\001\001\000\030\004\075\006\103\007\107" +
    "\014\143\015\063\016\064\017\066\020\070\021\067\022" +
    "\106\034\062\001\001\000\030\004\075\006\103\007\107" +
    "\014\142\015\063\016\064\017\066\020\070\021\067\022" +
    "\106\034\062\001\001\000\030\004\075\006\103\007\107" +
    "\014\125\015\063\016\064\017\066\020\070\021\067\022" +
    "\106\034\062\001\001\000\002\001\001\000\026\004\075" +
    "\006\103\007\107\015\141\016\064\017\066\020\070\021" +
    "\067\022\106\034\062\001\001\000\026\004\075\006\103" +
    "\007\107\015\130\016\064\017\066\020\070\021\067\022" +
    "\106\034\062\001\001\000\002\001\001\000\024\004\075" +
    "\006\103\007\107\016\140\017\066\020\070\021\067\022" +
    "\106\034\062\001\001\000\024\004\075\006\103\007\107" +
    "\016\137\017\066\020\070\021\067\022\106\034\062\001" +
    "\001\000\024\004\075\006\103\007\107\016\136\017\066" +
    "\020\070\021\067\022\106\034\062\001\001\000\024\004" +
    "\075\006\103\007\107\016\135\017\066\020\070\021\067" +
    "\022\106\034\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\075\006\103\007\107\010\151\011\056\012\057\013" +
    "\060\014\061\015\063\016\064\017\066\020\070\021\067" +
    "\022\106\034\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\053\030\154\031\050\001\001\000\002" +
    "\001\001\000\044\004\075\006\103\007\107\010\054\011" +
    "\056\012\057\013\060\014\061\015\063\016\064\017\066" +
    "\020\070\021\067\022\106\023\157\024\156\034\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\075\006\103\007\107\010\054\011\056\012" +
    "\057\013\060\014\061\015\063\016\064\017\066\020\070" +
    "\021\067\022\106\023\157\024\162\034\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\075\006\103\007\107\010\054\011\056\012\057\013\060" +
    "\014\061\015\063\016\064\017\066\020\070\021\067\022" +
    "\106\023\167\024\162\025\171\034\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\075\006\103\007\107\010" +
    "\054\011\056\012\057\013\060\014\061\015\063\016\064" +
    "\017\066\020\070\021\067\022\106\023\157\024\202\034" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\205" +
    "\054\210\055\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\232\004\244\032\256\033\231\034\226" +
    "\035\233\036\234\037\247\040\245\041\230\042\246\043" +
    "\252\044\241\045\243\046\240\047\334\050\224\051\237" +
    "\052\251\060\227\061\250\001\001\000\010\026\221\027" +
    "\217\053\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\053\031\222\001\001\000\002\001\001\000" +
    "\054\003\232\004\244\032\256\033\231\034\226\035\233" +
    "\036\234\037\247\040\245\041\230\042\246\043\252\044" +
    "\241\045\243\046\240\047\255\050\224\051\237\052\251" +
    "\060\227\061\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\075\006\103\007\107\010\054" +
    "\011\056\012\057\013\060\014\061\015\063\016\064\017" +
    "\066\020\070\021\067\022\106\023\157\024\275\034\062" +
    "\001\001\000\054\003\232\004\244\032\256\033\231\034" +
    "\226\035\233\036\234\037\247\040\245\041\230\042\246" +
    "\043\252\044\241\045\243\046\240\047\322\050\224\051" +
    "\237\052\251\060\227\061\250\001\001\000\002\001\001" +
    "\000\054\003\232\004\244\032\256\033\231\034\226\035" +
    "\233\036\234\037\247\040\245\041\230\042\246\043\252" +
    "\044\241\045\243\046\240\047\321\050\224\051\237\052" +
    "\251\060\227\061\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\232" +
    "\004\244\032\256\033\231\034\226\035\233\036\234\037" +
    "\247\040\245\041\230\042\246\043\252\044\241\045\243" +
    "\046\240\047\277\050\224\051\237\052\251\060\227\061" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\075\006\103\007\107" +
    "\010\054\011\056\012\057\013\060\014\061\015\063\016" +
    "\064\017\066\020\070\021\067\022\106\023\261\034\062" +
    "\001\001\000\002\001\001\000\046\004\265\032\256\033" +
    "\231\034\226\035\233\036\234\037\247\040\245\041\230" +
    "\042\246\043\252\044\241\045\243\046\264\050\224\051" +
    "\237\052\251\060\227\001\001\000\044\004\075\006\103" +
    "\007\107\010\054\011\056\012\057\013\060\014\061\015" +
    "\063\016\064\017\066\020\070\021\067\022\106\023\157" +
    "\024\275\034\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\075\006\103\007\107\010\054\011\056" +
    "\012\057\013\060\014\061\015\063\016\064\017\066\020" +
    "\070\021\067\022\106\023\157\024\272\034\062\001\001" +
    "\000\004\026\270\001\001\000\010\003\053\030\051\031" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\075\006\103\007\107" +
    "\010\054\011\056\012\057\013\060\014\061\015\063\016" +
    "\064\017\066\020\070\021\067\022\106\023\301\034\062" +
    "\001\001\000\002\001\001\000\012\004\303\033\307\040" +
    "\305\041\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\311\001\001\000\006\003\053\031\312\001\001" +
    "\000\002\001\001\000\042\004\075\006\103\007\107\010" +
    "\054\011\056\012\057\013\060\014\061\015\063\016\064" +
    "\017\066\020\070\021\067\022\106\023\314\034\062\001" +
    "\001\000\002\001\001\000\046\004\265\032\256\033\231" +
    "\034\226\035\233\036\234\037\247\040\245\041\230\042" +
    "\246\043\252\044\241\045\243\046\316\050\224\051\237" +
    "\052\251\060\227\001\001\000\002\001\001\000\046\004" +
    "\265\032\256\033\231\034\226\035\233\036\234\037\247" +
    "\040\245\041\230\042\246\043\252\044\241\045\243\046" +
    "\320\050\224\051\237\052\251\060\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\075\006\103\007\107\010\054\011\056" +
    "\012\057\013\060\014\061\015\063\016\064\017\066\020" +
    "\070\021\067\022\106\023\325\034\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\330\034\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\221" +
    "\027\217\053\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\221\027\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\037\004\032\032\035\057\036\061\034\062\033\063" +
    "\346\001\001\000\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}




    public boolean hasSyntaxError = false;
    public String syntaxErrMessage = "";

    public void syntax_error(java_cup.runtime.Symbol cur_token){
        hasSyntaxError = true;
        syntaxErrMessage = cur_token.left + ":" + cur_token.right +
          " error: Unexpected token " + Util.symbolTranslation.get(cur_token.sym);
        if (cur_token.value != null) {
            syntaxErrMessage += " " + cur_token.value;
        }
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
    private final Parser parser;

    /** Constructor */
    CUP$Parser$actions(Parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 126. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int start_valright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Program start_val = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // empty ::= 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",1, CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // identifier ::= IDENTIFIER 
            {
                Identifier RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                String id = CUP$Parser$stack.peek().<String> value();
                 RESULT = new Identifier(id); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",2, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // minus_list ::= MINUS minus_list 
            {
                Expression RESULT = null;
                int mleft = CUP$Parser$stack.peek().left;
                int mright = CUP$Parser$stack.peek().right;
                Expression m = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, m); RESULT.setLocation(m); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // minus_list ::= MINUS NEGATIVE_INT_BOUND 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Object i = CUP$Parser$stack.peek().<Object> value();
                 RESULT = new Unary(UnaryOperator.MINUS, new IntegerLiteral("9223372036854775808")); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // minus_list ::= MINUS H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, h); RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // not_list ::= NOT not_list 
            {
                Expression RESULT = null;
                int nleft = CUP$Parser$stack.peek().left;
                int nright = CUP$Parser$stack.peek().right;
                Expression n = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, n); RESULT.setLocation(n); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_list",5, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // not_list ::= NOT H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, h); RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_list",5, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // boolean_literal ::= TRUE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(true); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // boolean_literal ::= FALSE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(false); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // A ::= B 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = b; RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",6, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // A ::= A OR B 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.OR, a,b); RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",6, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // B ::= C 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = c; RESULT.setLocation(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",7, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // B ::= B AND C 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression b = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.AND, b,c); RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",7, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // C ::= D 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = d; RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",8, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // C ::= C EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.EQUAL, c,d); RESULT.setLocation(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // C ::= C NOT_EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.NOT_EQUAL,c,d); RESULT.setLocation(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // D ::= E 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = e; RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // D ::= D LT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LT, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // D ::= D LEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LEQ, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // D ::= D GT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GT, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // D ::= D GEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GEQ, d,e); RESULT.setLocation(d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // E ::= F 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = f; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // E ::= E PLUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.PLUS, e,f); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // E ::= E MINUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MINUS,e,f); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // F ::= G 
            {
                Expression RESULT = null;
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = g; RESULT.setLocation(g); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // F ::= F TIMES G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.TIMES, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // F ::= F HIGH_MULT G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.HIGH_MULT, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // F ::= F DIVIDE G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.DIVIDE, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // F ::= F MODULO G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MODULO, f,g); RESULT.setLocation(f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // G ::= H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = h; RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // G ::= not_list 
            {
                Expression RESULT = null;
                int nleft = CUP$Parser$stack.peek().left;
                int nright = CUP$Parser$stack.peek().right;
                Expression n = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = n; RESULT.setLocation(n); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // G ::= minus_list 
            {
                Expression RESULT = null;
                int mleft = CUP$Parser$stack.peek().left;
                int mright = CUP$Parser$stack.peek().right;
                Expression m = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = m; RESULT.setLocation(m); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // H ::= I 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Expression i = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = i; RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // H ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(fc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // H ::= H OPEN_BRACKET A CLOSE_BRACKET 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int hright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Expression h = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Expression> value();
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(h,a); RESULT.setLocation(h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",13, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // I ::= boolean_literal 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                BooleanLiteral b = CUP$Parser$stack.peek().<BooleanLiteral> value();
                 RESULT = b; RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // I ::= INTEGER_LITERAL 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                String i = CUP$Parser$stack.peek().<String> value();
                 RESULT = new IntegerLiteral(i); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // I ::= OPEN_PAREN A CLOSE_PAREN 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // I ::= identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Identifier i = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = i; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // I ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                String s = CUP$Parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // I ::= CHARACTER_LITERAL 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Character c = CUP$Parser$stack.peek().<Character> value();
                 RESULT = new CharacterLiteral(c); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // I ::= array_literal 
            {
                Expression RESULT = null;
                int alleft = CUP$Parser$stack.peek().left;
                int alright = CUP$Parser$stack.peek().right;
                ArrayLiteral al = CUP$Parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; RESULT.setLocation(al); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // I ::= NEW identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Identifier i = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = new ObjectInstantiation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",14, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // expression ::= A 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Expression a = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // expression_list ::= expression COMMA expression_list 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",18, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // expression_list ::= expression 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",18, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // expression_list_trailing_comma ::= expression COMMA expression_list_trailing_comma 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",19, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // expression_list_trailing_comma ::= expression COMMA 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",19, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // array_literal ::= OPEN_BRACE expression_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",16, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // array_literal ::= OPEN_BRACE expression_list_trailing_comma CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",16, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // array_literal ::= OPEN_BRACE CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                 RESULT = new ArrayLiteral(new LinkedList<>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",16, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                 RESULT = new IntType(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",20, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                 RESULT = new BoolType(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",20, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // array_size_type ::= OPEN_BRACKET expression CLOSE_BRACKET array_size_type 
            {
                SimpleEntry<List<Expression>,Integer> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                SimpleEntry<List<Expression>,Integer> ast = CUP$Parser$stack.peek().<SimpleEntry<List<Expression>,Integer>> value();
                 ast.getKey().add(0, e); RESULT = ast; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",22, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // array_size_type ::= array_no_size_type 
            {
                SimpleEntry<List<Expression>,Integer> RESULT = null;
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new SimpleEntry<List<Expression>, Integer>(new LinkedList<>(), anst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",22, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // array_no_size_type ::= OPEN_BRACKET CLOSE_BRACKET array_no_size_type 
            {
                Integer RESULT = null;
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = anst + 1; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",23, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // array_no_size_type ::= empty 
            {
                Integer RESULT = null;
                 RESULT = 0; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",23, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // var_type ::= primitive_type array_no_size_type 
            {
                VariableType RESULT = null;
                int ptleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int ptright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType pt = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = VariableType.construct(pt, anst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",21, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // typed_declaration_no_size ::= identifier COLON primitive_type array_no_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                Integer ast = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new TypedDeclaration(id, VariableType.construct(t, ast), new LinkedList<Expression>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_no_size",25, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // typed_declaration ::= identifier COLON primitive_type array_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                SimpleEntry<List<Expression>,Integer> ast = CUP$Parser$stack.peek().<SimpleEntry<List<Expression>,Integer>> value();
                 RESULT = new TypedDeclaration(id, VariableType.construct(t, ast.getKey().size() + ast.getValue()), ast.getKey()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration",24, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // function_call ::= identifier OPEN_PAREN expression_list CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new FunctionCall(id, lst); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",26, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // function_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                 RESULT = new FunctionCall(id, new LinkedList<Expression>()); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",26, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // function_call ::= LENGTH OPEN_PAREN expression_list CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Object id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Object> value();
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new FunctionCall(new Identifier("length"), lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",26, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // assignment_lhs_array_brackets ::= assignment_lhs_array OPEN_BRACKET expression CLOSE_BRACKET 
            {
                ArrayIndex RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Expression> value();
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(a,e); RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array_brackets",27, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // assignment_lhs_array ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(fc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",28, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // assignment_lhs_array ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                String s = CUP$Parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); RESULT.setLocation(parser.stack.peek()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",28, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // assignment_lhs_array ::= identifier 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Identifier i = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = i; RESULT.setLocation(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",28, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // assignment_lhs_array ::= assignment_lhs_array_brackets 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                ArrayIndex a = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = a; RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",28, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // assignment_lhs ::= identifier 
            {
                Assignable RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                Identifier id = CUP$Parser$stack.peek().<Identifier> value();
                 RESULT = id; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // assignment_lhs ::= assignment_lhs_array_brackets 
            {
                Assignable RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                ArrayIndex a = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // assignment_lhs ::= typed_declaration_no_size 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // assignment_lhs ::= function_call 
            {
                Assignable RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // declaration_assignment_lhs ::= typed_declaration_no_size 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // declaration_assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",30, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA multiple_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dlleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dlright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dllleft = CUP$Parser$stack.peek().left;
                int dllright = CUP$Parser$stack.peek().right;
                List<Assignable> dll = CUP$Parser$stack.peek().<List<Assignable>> value();
                 dll.add(0, dl); RESULT = dll; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",31, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA declaration_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dl1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dl1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dl2left = CUP$Parser$stack.peek().left;
                int dl2right = CUP$Parser$stack.peek().right;
                Assignable dl2 = CUP$Parser$stack.peek().<Assignable> value();
                 LinkedList<Assignable> lst = new LinkedList<Assignable>(Arrays.asList(dl2)); lst.add(0, dl1); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",31, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // assignment ::= assignment_lhs GETS expression 
            {
                Assignment RESULT = null;
                int alleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int alright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable al = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Assignable> lst = new LinkedList<>(); lst.add(0, al); RESULT = new Assignment(lst, e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",32, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // assignment ::= multiple_assignment_lhs GETS function_call 
            {
                Assignment RESULT = null;
                int allleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int allright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                List<Assignable> all = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<List<Assignable>> value();
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = new Assignment(all, fc); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",32, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b, Optional.empty()); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",33, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block ELSE block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<Expression> value();
                int b1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int b1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Block b1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Block> value();
                int b2left = CUP$Parser$stack.peek().left;
                int b2right = CUP$Parser$stack.peek().right;
                Block b2 = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b1, Optional.of(b2)); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",33, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // while_statement ::= WHILE OPEN_PAREN expression CLOSE_PAREN block 
            {
                WhileStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new WhileStatement(e,b); RESULT.setLocation(e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",34, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // return_statement ::= RETURN expression_list 
            {
                ReturnStatement RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 RESULT = new ReturnStatement(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // statement_no_semicolon ::= if_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                IfStatement s = CUP$Parser$stack.peek().<IfStatement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",40, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // statement_no_semicolon ::= while_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                WhileStatement s = CUP$Parser$stack.peek().<WhileStatement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",40, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // statement_no_semicolon ::= procedure_call 
            {
                Statement RESULT = null;
                int pcleft = CUP$Parser$stack.peek().left;
                int pcright = CUP$Parser$stack.peek().right;
                ProcedureCall pc = CUP$Parser$stack.peek().<ProcedureCall> value();
                 RESULT = pc; RESULT.setLocation(pc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",40, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // statement_no_semicolon ::= typed_declaration 
            {
                Statement RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(td); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",40, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // statement_no_semicolon ::= assignment 
            {
                Statement RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Assignment a = CUP$Parser$stack.peek().<Assignment> value();
                 RESULT = a; RESULT.setLocation(a); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",40, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // statement_no_semicolon ::= return_statement 
            {
                Statement RESULT = null;
                int rleft = CUP$Parser$stack.peek().left;
                int rright = CUP$Parser$stack.peek().right;
                ReturnStatement r = CUP$Parser$stack.peek().<ReturnStatement> value();
                 RESULT = r; RESULT.setLocation(r); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",40, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // statement ::= statement_no_semicolon 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",39, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // statement ::= statement_no_semicolon SEMICOLON 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int sright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Statement s = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Statement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",39, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // block ::= block_scope 
            {
                Block RESULT = null;
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 RESULT = bl; RESULT.setLocation(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",36, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // block ::= statement 
            {
                Block RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; RESULT.setLocation(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",36, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // typed_declaration_list ::= identifier COMMA typed_declaration 
            {
                List<TypedDeclaration> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 List<TypedDeclaration> f = new LinkedList<>(); f.add(td); f.add(0, new TypedDeclaration(id, td.getDeclarationType(), td.getArraySizes())); RESULT = f; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",47, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // typed_declaration_list ::= identifier COMMA typed_declaration_list 
            {
                List<TypedDeclaration> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                List<TypedDeclaration> f = CUP$Parser$stack.peek().<List<TypedDeclaration>> value();
                 TypedDeclaration temp = f.get(f.size()-1); f.add(0, new TypedDeclaration(id, temp.getDeclarationType(), temp.getArraySizes())); RESULT = f; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",47, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // block_list ::= block block_list 
            {
                BlockList RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Block b = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Block> value();
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 bl.getBlocks().add(0, b); RESULT = bl; RESULT.setLocation(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",37, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // block_list ::= typed_declaration_list block_list 
            {
                BlockList RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<TypedDeclaration> f = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<TypedDeclaration>> value();
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 for(TypedDeclaration td : f) { bl.getBlocks().add(0, td); } RESULT = bl; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",37, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // block_list ::= RETURN 
            {
                BlockList RESULT = null;
                 List<Block> bl = new LinkedList<>(); bl.add(0,new ReturnStatement(new LinkedList<>())); RESULT = new BlockList(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",37, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // block_list ::= empty 
            {
                BlockList RESULT = null;
                 List<Block> bl = new LinkedList<>(); RESULT = new BlockList(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",37, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // block_scope ::= OPEN_BRACE block_list CLOSE_BRACE 
            {
                BlockList RESULT = null;
                int blleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int blright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList bl = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 RESULT = bl; RESULT.setLocation(bl); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_scope",38, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // function_declaration_return_types ::= var_type COMMA function_declaration_return_types 
            {
                List<VariableType> RESULT = null;
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                VariableType t = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<VariableType> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<VariableType> lst = CUP$Parser$stack.peek().<List<VariableType>> value();
                 lst.add(0,t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_return_types",41, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // function_declaration_return_types ::= var_type 
            {
                List<VariableType> RESULT = null;
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                VariableType t = CUP$Parser$stack.peek().<VariableType> value();
                 List<VariableType> lst = new LinkedList<>(); lst.add(0, t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_return_types",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // function_declaration_argument_single ::= identifier COLON var_type 
            {
                SimpleEntry<Identifier,VariableType> RESULT = null;
                int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int iright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier i = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                VariableType t = CUP$Parser$stack.peek().<VariableType> value();
                 RESULT = new SimpleEntry<Identifier, VariableType>(i, t); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_single",42, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // function_declaration_argument_list ::= function_declaration_argument_single COMMA function_declaration_argument_list 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int fdasleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fdasright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                SimpleEntry<Identifier,VariableType> fdas = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<SimpleEntry<Identifier,VariableType>> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<SimpleEntry<Identifier,VariableType>> lst = CUP$Parser$stack.peek().<List<SimpleEntry<Identifier,VariableType>>> value();
                 lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",43, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // function_declaration_argument_list ::= function_declaration_argument_single 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int fdasleft = CUP$Parser$stack.peek().left;
                int fdasright = CUP$Parser$stack.peek().right;
                SimpleEntry<Identifier,VariableType> fdas = CUP$Parser$stack.peek().<SimpleEntry<Identifier,VariableType>> value();
                 List<SimpleEntry<Identifier, VariableType>> lst = new LinkedList<>(); lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",43, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // function_declaration_argument ::= function_declaration_argument_list 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<SimpleEntry<Identifier,VariableType>> lst = CUP$Parser$stack.peek().<List<SimpleEntry<Identifier,VariableType>>> value();
                 RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",44, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // function_declaration_argument ::= empty 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",44, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN COLON function_declaration_return_types OPEN_BRACE block_list CLOSE_BRACE 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-8).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-8).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-8).<Identifier> value();
                int argPairsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-6).left;
                int argPairsright = CUP$Parser$stack.elementAt(CUP$Parser$top-6).right;
                List<SimpleEntry<Identifier,VariableType>> argPairs = CUP$Parser$stack.elementAt(CUP$Parser$top-6).<List<SimpleEntry<Identifier,VariableType>>> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                List<VariableType> t = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<List<VariableType>> value();
                int fbleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fbright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList fb = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(id, new FunctionType(argTypes, new VariableTypeList(t)), args, fb); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",45, CUP$Parser$stack.elementAt(CUP$Parser$top-8), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN OPEN_BRACE block_list CLOSE_BRACE 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-6).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-6).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-6).<Identifier> value();
                int argPairsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int argPairsright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                List<SimpleEntry<Identifier,VariableType>> argPairs = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<List<SimpleEntry<Identifier,VariableType>>> value();
                int fbleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fbright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList fb = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(id, new FunctionType(argTypes, new VariableTypeList(new LinkedList<>())), args, fb); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",45, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // procedure_call ::= identifier OPEN_PAREN expression_list CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int elistleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int elistright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> elist = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ProcedureCall(id, elist); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",46, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // procedure_call ::= identifier OPEN_PAREN CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                 RESULT = new ProcedureCall(id, new LinkedList<Expression>()); RESULT.setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",46, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // use_block ::= USE identifier use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Identifier> value();
                int uleft = CUP$Parser$stack.peek().left;
                int uright = CUP$Parser$stack.peek().right;
                List<UseStatement> u = CUP$Parser$stack.peek().<List<UseStatement>> value();
                 u.add(0, new UseStatement(id)); RESULT = u; RESULT.get(0).setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",3, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // use_block ::= USE identifier SEMICOLON use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Identifier> value();
                int uleft = CUP$Parser$stack.peek().left;
                int uright = CUP$Parser$stack.peek().right;
                List<UseStatement> u = CUP$Parser$stack.peek().<List<UseStatement>> value();
                 u.add(0, new UseStatement(id)); RESULT = u; RESULT.get(0).setLocation(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",3, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // use_block ::= empty 
            {
                List<UseStatement> RESULT = null;
                 RESULT = new LinkedList<UseStatement>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",3, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // field ::= typed_declaration_list 
            {
                List<TypedDeclaration> RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                List<TypedDeclaration> td = CUP$Parser$stack.peek().<List<TypedDeclaration>> value();
                 RESULT = td; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",48, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // field ::= typed_declaration 
            {
                List<TypedDeclaration> RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 List<TypedDeclaration> lst = new LinkedList<>(); lst.add(td); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",48, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // class_declaration_body ::= field class_declaration_body 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<TypedDeclaration> f = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<TypedDeclaration>> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> c = CUP$Parser$stack.peek().<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 c.part1().addAll(f); RESULT = c ; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",49, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // class_declaration_body ::= function_declaration class_declaration_body 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                FunctionDeclaration f = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<FunctionDeclaration> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> c = CUP$Parser$stack.peek().<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 c.part2().add(f); RESULT = c; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",49, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // class_declaration_body ::= empty 
            {
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                 Pair<List<TypedDeclaration>, List<FunctionDeclaration>> pair = new Pair<>(new LinkedList<>(), new LinkedList<>()); RESULT = pair; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_body",49, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 120: // class_declaration ::= CLASS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
            {
                ClassDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int bodyleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bodyright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> body = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 List<MethodDeclaration> methods = new LinkedList<>(); for(FunctionDeclaration fd : body.part2()) { methods.add(new MethodDeclaration(id, fd)); } RESULT = new ClassDeclaration(id, body.part1(), methods, Optional.empty()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration",50, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 121: // class_declaration ::= CLASS identifier EXTENDS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
            {
                ClassDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-5).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-5).right;
                Identifier id = CUP$Parser$stack.elementAt(CUP$Parser$top-5).<Identifier> value();
                int id2left = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int id2right = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Identifier id2 = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Identifier> value();
                int bodyleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bodyright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Pair<List<TypedDeclaration>,List<FunctionDeclaration>> body = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Pair<List<TypedDeclaration>,List<FunctionDeclaration>>> value();
                 List<MethodDeclaration> methods = new LinkedList<>(); for(FunctionDeclaration fd : body.part2()) { methods.add(new MethodDeclaration(id, fd)); } RESULT = new ClassDeclaration(id, body.part1(), methods, Optional.of(id2)); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration",50, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 122: // program_body ::= class_declaration program_body 
            {
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                ClassDeclaration c = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<ClassDeclaration> value();
                int pleft = CUP$Parser$stack.peek().left;
                int pright = CUP$Parser$stack.peek().right;
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> p = CUP$Parser$stack.peek().<Pair<List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 p.part2().add(c); RESULT = p; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",51, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 123: // program_body ::= function_declaration program_body 
            {
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                int fdleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fdright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                FunctionDeclaration fd = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<FunctionDeclaration> value();
                int pleft = CUP$Parser$stack.peek().left;
                int pright = CUP$Parser$stack.peek().right;
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> p = CUP$Parser$stack.peek().<Pair<List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 p.part1().add(fd); RESULT = p; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",51, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 124: // program_body ::= empty 
            {
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                 Pair<List<FunctionDeclaration>, List<ClassDeclaration>> body = new Pair<>(new LinkedList<>(), new LinkedList<>()); RESULT = body; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_body",51, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 125: // program ::= use_block program_body 
            {
                Program RESULT = null;
                int uleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int uright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<UseStatement> u = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<UseStatement>> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Pair<List<FunctionDeclaration>,List<ClassDeclaration>> b = CUP$Parser$stack.peek().<Pair<List<FunctionDeclaration>,List<ClassDeclaration>>> value();
                 RESULT = new Program(u,b.part1(), b.part2()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 126: // program ::= error 
            {
                Program RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$Parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                           CUP$Parser$act_num,
                           CUP$Parser$parser,
                           CUP$Parser$stack,
                           CUP$Parser$top);
    }
}

}
