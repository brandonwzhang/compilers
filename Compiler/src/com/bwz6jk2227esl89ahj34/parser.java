
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package com.bwz6jk2227esl89ahj34;

import com.AST.*;
import java.util.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\003\002\000\002\010" +
    "\003\000\002\010\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\005" +
    "\000\002\007\004\000\002\007\004\000\002\011\006\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\004\000\002\012\005\000\002\012\005\000\002" +
    "\016\003\000\002\016\003\000\002\021\006\000\002\021" +
    "\003\000\002\022\005\000\002\022\003\000\002\017\004" +
    "\000\002\020\005\000\002\020\003\000\002\023\005\000" +
    "\002\024\005\000\002\024\005\000\002\025\006\000\002" +
    "\025\005\000\002\025\006\000\002\026\003\000\002\026" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\031\007\000\002\031\011\000\002\032\007\000\002" +
    "\033\004\000\002\033\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\036\003\000\002\036\004\000\002\046\006\000" +
    "\002\034\005\000\002\034\003\000\002\034\003\000\002" +
    "\035\004\000\002\035\003\000\002\040\004\000\002\041" +
    "\005\000\002\042\005\000\002\042\003\000\002\043\003" +
    "\000\002\043\003\000\002\044\011\000\002\044\007\000" +
    "\002\045\004\000\002\045\003\000\002\047\006\000\002" +
    "\047\005\000\002\004\005\000\002\004\003\000\002\002" +
    "\004" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\010\002\000\004\000\021\005\001\002\000" +
    "\006\002\000\004\014\001\002\000\004\004\011\001\002" +
    "\000\004\002\010\001\002\000\006\002\uffa5\004\uffa5\001" +
    "\002\000\004\002\001\001\002\000\010\002\000\004\000" +
    "\021\005\001\002\000\006\002\uffa6\004\uffa6\001\002\000" +
    "\004\002\uffa4\001\002\000\004\044\020\001\002\000\004" +
    "\002\uffa9\001\002\000\006\002\000\004\014\001\002\000" +
    "\004\002\uffaa\001\002\000\006\004\023\045\000\001\002" +
    "\000\004\045\042\001\002\000\004\045\uffae\001\002\000" +
    "\004\050\030\001\002\000\006\045\uffaf\051\026\001\002" +
    "\000\004\045\uffad\001\002\000\004\004\023\001\002\000" +
    "\004\045\uffb0\001\002\000\006\012\034\013\031\001\002" +
    "\000\034\004\uffda\014\uffda\015\uffda\016\uffda\020\uffda\041" +
    "\uffda\042\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda" +
    "\053\uffda\001\002\000\006\045\uffb1\051\uffb1\001\002\000" +
    "\010\042\035\045\000\051\000\001\002\000\034\004\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\020\uffdb\041\uffdb\042\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\001\002" +
    "\000\004\043\040\001\002\000\032\004\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\020\uffd6\041\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\001\002\000\006\045\uffb2\051" +
    "\uffb2\001\002\000\034\004\000\014\000\015\000\016\000" +
    "\020\000\041\000\042\035\045\000\046\000\047\000\051" +
    "\000\052\000\053\000\001\002\000\032\004\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\020\uffd7\041\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000\006\046\044" +
    "\050\045\001\002\000\006\002\uffab\004\uffab\001\002\000" +
    "\016\004\166\014\171\016\165\020\000\046\161\053\150" +
    "\001\002\000\006\012\034\013\031\001\002\000\004\046" +
    "\044\001\002\000\032\004\000\014\000\015\000\016\000" +
    "\020\000\041\000\042\054\046\000\047\000\051\000\052" +
    "\000\053\000\001\002\000\006\046\uffd3\051\051\001\002" +
    "\000\006\012\034\013\031\001\002\000\004\046\uffd4\001" +
    "\002\000\030\004\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5" +
    "\041\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5\053\uffd5\001" +
    "\002\000\030\004\074\005\072\006\062\007\066\010\065" +
    "\011\073\022\063\024\067\030\070\043\040\046\071\001" +
    "\002\000\030\004\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8" +
    "\041\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\001" +
    "\002\000\070\004\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\042\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\001\002\000\042\023\124\024\115" +
    "\025\106\026\116\027\111\031\113\032\123\033\114\034" +
    "\120\035\121\036\105\037\107\040\122\042\112\043\145" +
    "\054\110\001\002\000\070\004\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\020\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\001\002\000\070\004" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\001\002\000\070\004\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\020\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\001\002\000\004\044\142" +
    "\001\002\000\070\004\uffe5\014\uffe5\015\uffe5\016\uffe5\020" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\001\002\000\070\004\uffff\014" +
    "\uffff\015\uffff\016\uffff\020\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\042\uffff\043\uffff\045\uffff" +
    "\046\uffff\047\uffff\051\uffff\052\uffff\053\uffff\054\uffff\001" +
    "\002\000\070\004\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\042\uffe4\043\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\001\002\000\026\004\074\005\072" +
    "\006\062\007\066\010\065\011\073\022\063\024\067\030" +
    "\070\046\071\001\002\000\026\004\074\005\072\006\062" +
    "\007\066\010\065\011\073\022\063\024\067\030\070\046" +
    "\071\001\002\000\026\004\074\005\072\006\062\007\066" +
    "\010\065\011\073\022\063\024\067\030\070\046\071\001" +
    "\002\000\070\004\uffea\014\uffea\015\uffea\016\uffea\020\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\042\uffea\043\uffea\045\uffea\046\uffea\047\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\001\002\000\070\004\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\020\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\042\ufffe\043\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\001\002" +
    "\000\072\004\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042" +
    "\uffeb\043\uffeb\044\077\045\uffeb\046\uffeb\047\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\001\002\000\070\004\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\001" +
    "\002\000\070\004\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\042\uffe6\043\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\001\002\000\030\004\074\005\072" +
    "\006\062\007\066\010\065\011\073\022\063\024\067\030" +
    "\070\045\102\046\071\001\002\000\046\023\124\024\115" +
    "\025\106\026\116\027\111\031\113\032\123\033\114\034" +
    "\120\035\121\036\105\037\107\040\122\042\112\045\uffe0" +
    "\047\uffe0\051\104\054\110\001\002\000\004\045\103\001" +
    "\002\000\070\004\uffce\014\uffce\015\uffce\016\uffce\020\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\042\uffce\043\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\001\002\000\070\004\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\020\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002" +
    "\000\026\004\074\005\072\006\062\007\066\010\065\011" +
    "\073\022\063\024\067\030\070\046\071\001\002\000\026" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\022" +
    "\ufff6\024\ufff6\030\ufff6\046\ufff6\001\002\000\026\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\022\ufffb\024" +
    "\ufffb\030\ufffb\046\ufffb\001\002\000\026\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\022\ufff5\024\ufff5\030" +
    "\ufff5\046\ufff5\001\002\000\026\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\022\ufff8\024\ufff8\030\ufff8\046" +
    "\ufff8\001\002\000\026\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\022\ufff9\024\ufff9\030\ufff9\046\ufff9\001" +
    "\002\000\026\004\074\005\072\006\062\007\066\010\065" +
    "\011\073\022\063\024\067\030\070\046\071\001\002\000" +
    "\026\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\022\ufff3\024\ufff3\030\ufff3\046\ufff3\001\002\000\026\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\022\ufff1" +
    "\024\ufff1\030\ufff1\046\ufff1\001\002\000\026\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\022\ufffc\024\ufffc" +
    "\030\ufffc\046\ufffc\001\002\000\026\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\022\ufffa\024\ufffa\030\ufffa" +
    "\046\ufffa\001\002\000\026\004\074\005\072\006\062\007" +
    "\066\010\065\011\073\022\063\024\067\030\070\046\071" +
    "\001\002\000\026\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\022\ufff0\024\ufff0\030\ufff0\046\ufff0\001\002" +
    "\000\026\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\022\ufff7\024\ufff7\030\ufff7\046\ufff7\001\002\000\026" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\022" +
    "\ufff4\024\ufff4\030\ufff4\046\ufff4\001\002\000\026\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\022\ufff2\024" +
    "\ufff2\030\ufff2\046\ufff2\001\002\000\026\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\022\ufffd\024\ufffd\030" +
    "\ufffd\046\ufffd\001\002\000\070\004\uffef\014\uffef\015\uffef" +
    "\016\uffef\020\uffef\023\124\024\115\025\106\026\116\027" +
    "\111\031\113\032\123\033\114\034\120\035\121\036\105" +
    "\037\107\040\122\042\112\043\uffef\045\uffef\046\uffef\047" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\110\001\002\000\042" +
    "\023\124\024\115\025\106\026\116\027\111\031\113\032" +
    "\123\033\114\034\120\035\121\036\105\037\107\040\122" +
    "\042\112\043\127\054\110\001\002\000\070\004\uffec\014" +
    "\uffec\015\uffec\016\uffec\020\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec\045\uffec" +
    "\046\uffec\047\uffec\051\uffec\052\uffec\053\uffec\054\uffec\001" +
    "\002\000\006\045\uffe1\047\uffe1\001\002\000\044\023\124" +
    "\024\115\025\106\026\116\027\111\031\113\032\123\033" +
    "\114\034\120\035\121\036\105\037\107\040\122\042\112" +
    "\047\uffe0\051\136\054\110\001\002\000\004\047\135\001" +
    "\002\000\004\047\134\001\002\000\070\004\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\001\002" +
    "\000\070\004\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\042" +
    "\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\001\002\000\030\004\074\005\072\006" +
    "\062\007\066\010\065\011\073\022\063\024\067\030\070" +
    "\046\071\047\uffde\001\002\000\004\047\uffdf\001\002\000" +
    "\070\004\uffee\014\uffee\015\uffee\016\uffee\020\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\042\112" +
    "\043\uffee\045\uffee\046\uffee\047\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\001\002\000\070\004\uffed\014\uffed\015\uffed" +
    "\016\uffed\020\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\042\112\043\uffed\045\uffed\046\uffed\047" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\001\002\000\026" +
    "\004\074\005\072\006\062\007\066\010\065\011\073\022" +
    "\063\024\067\030\070\046\071\001\002\000\042\023\124" +
    "\024\115\025\106\026\116\027\111\031\113\032\123\033" +
    "\114\034\120\035\121\036\105\037\107\040\122\042\112" +
    "\045\144\054\110\001\002\000\070\004\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\020\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002\000" +
    "\032\004\000\014\000\015\000\016\000\020\000\041\000" +
    "\042\054\046\000\047\000\051\000\052\000\053\000\001" +
    "\002\000\030\004\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9" +
    "\041\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\001" +
    "\002\000\006\002\uffac\004\uffac\001\002\000\006\041\uffcb" +
    "\051\uffcb\001\002\000\024\004\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\020\uffb6\046\uffb6\047\uffb6\052\uffb6\053\uffb6\001\002" +
    "\000\024\004\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\046" +
    "\uffbb\047\uffbb\052\uffbb\053\uffbb\001\002\000\004\041\240" +
    "\001\002\000\024\004\uffbd\014\uffbd\015\uffbd\016\uffbd\020" +
    "\uffbd\046\uffbd\047\uffbd\052\uffbd\053\uffbd\001\002\000\006" +
    "\041\232\051\231\001\002\000\004\041\uffc8\001\002\000" +
    "\024\004\uffba\014\uffba\015\uffba\016\uffba\020\uffba\046\uffba" +
    "\047\uffba\052\uffba\053\uffba\001\002\000\006\020\uffb3\047" +
    "\uffb3\001\002\000\020\004\166\014\171\016\165\020\000" +
    "\046\161\047\000\053\150\001\002\000\024\004\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\020\uffb5\046\uffb5\047\uffb5\052\uffb5" +
    "\053\uffb5\001\002\000\024\004\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\020\uffbf\046\uffbf\047\uffbf\052\uffbf\053\uffbf\001\002" +
    "\000\020\004\166\014\171\016\165\020\000\046\161\047" +
    "\000\053\150\001\002\000\004\044\221\001\002\000\012" +
    "\041\uffcc\044\215\050\201\051\uffcc\001\002\000\004\020" +
    "\211\001\002\000\024\004\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\020\uffbe\046\uffbe\047\uffbe\052\uffbe\053\uffbe\001\002\000" +
    "\004\044\203\001\002\000\030\004\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\020\uffbc\041\174\046\uffbc\047\uffbc\051\173\052" +
    "\uffbc\053\uffbc\001\002\000\004\004\176\001\002\000\026" +
    "\004\074\005\072\006\062\007\066\010\065\011\073\022" +
    "\063\024\067\030\070\046\071\001\002\000\062\004\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\020\uffc5\023\124\024\115\025" +
    "\106\026\116\027\111\031\113\032\123\033\114\034\120" +
    "\035\121\036\105\037\107\040\122\042\112\046\uffc5\047" +
    "\uffc5\052\uffc5\053\uffc5\054\110\001\002\000\004\050\201" +
    "\001\002\000\006\041\uffd0\051\173\001\002\000\004\041" +
    "\uffd1\001\002\000\006\012\034\013\031\001\002\000\030" +
    "\004\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\041\uffd2\046" +
    "\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002\000\026" +
    "\004\074\005\072\006\062\007\066\010\065\011\073\022" +
    "\063\024\067\030\070\046\071\001\002\000\042\023\124" +
    "\024\115\025\106\026\116\027\111\031\113\032\123\033" +
    "\114\034\120\035\121\036\105\037\107\040\122\042\112" +
    "\045\205\054\110\001\002\000\014\004\166\014\171\016" +
    "\165\046\161\053\150\001\002\000\024\004\uffc4\014\uffc4" +
    "\015\207\016\uffc4\020\uffc4\046\uffc4\047\uffc4\052\uffc4\053" +
    "\uffc4\001\002\000\014\004\166\014\171\016\165\046\161" +
    "\053\150\001\002\000\024\004\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\020\uffc3\046\uffc3\047\uffc3\052\uffc3\053\uffc3\001\002" +
    "\000\030\004\074\005\072\006\062\007\066\010\065\011" +
    "\073\022\063\024\067\030\070\046\071\047\uffc0\001\002" +
    "\000\004\047\213\001\002\000\026\002\uffb8\004\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\020\uffb8\046\uffb8\047\uffb8\052\uffb8" +
    "\053\uffb8\001\002\000\004\047\uffc1\001\002\000\030\004" +
    "\074\005\072\006\062\007\066\010\065\011\073\022\063" +
    "\024\067\030\070\045\217\046\071\001\002\000\004\045" +
    "\220\001\002\000\024\004\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\020\uffa7\046\uffa7\047\uffa7\052\uffa7\053\uffa7\001\002\000" +
    "\024\004\uffa8\014\uffa8\015\uffa8\016\uffa8\020\uffa8\046\uffa8" +
    "\047\uffa8\052\uffa8\053\uffa8\001\002\000\026\004\074\005" +
    "\072\006\062\007\066\010\065\011\073\022\063\024\067" +
    "\030\070\046\071\001\002\000\042\023\124\024\115\025" +
    "\106\026\116\027\111\031\113\032\123\033\114\034\120" +
    "\035\121\036\105\037\107\040\122\042\112\045\223\054" +
    "\110\001\002\000\014\004\166\014\171\016\165\046\161" +
    "\053\150\001\002\000\024\004\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\020\uffc2\046\uffc2\047\uffc2\052\uffc2\053\uffc2\001\002" +
    "\000\006\020\uffb4\047\uffb4\001\002\000\006\020\211\047" +
    "\227\001\002\000\024\004\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\020\uffb7\046\uffb7\047\uffb7\052\uffb7\053\uffb7\001\002\000" +
    "\024\004\uffb9\014\uffb9\015\uffb9\016\uffb9\020\uffb9\046\uffb9" +
    "\047\uffb9\052\uffb9\053\uffb9\001\002\000\006\004\235\053" +
    "\150\001\002\000\026\004\074\005\072\006\062\007\066" +
    "\010\065\011\073\022\063\024\067\030\070\046\071\001" +
    "\002\000\062\004\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7" +
    "\023\124\024\115\025\106\026\116\027\111\031\113\032" +
    "\123\033\114\034\120\035\121\036\105\037\107\040\122" +
    "\042\112\046\uffc7\047\uffc7\052\uffc7\053\uffc7\054\110\001" +
    "\002\000\004\041\uffca\001\002\000\010\041\uffcc\050\201" +
    "\051\uffcc\001\002\000\006\041\uffc9\051\231\001\002\000" +
    "\004\051\173\001\002\000\006\004\242\022\063\001\002" +
    "\000\024\004\uffc6\014\uffc6\015\uffc6\016\uffc6\020\uffc6\046" +
    "\uffc6\047\uffc6\052\uffc6\053\uffc6\001\002\000\004\044\077" +
    "\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\010\002\005\003\006\004\003\001\001\000" +
    "\010\003\014\044\015\045\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\006\004\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\014\044\015\045\016\001\001\000\002\001\001\000\012" +
    "\003\024\041\023\042\021\043\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\023\042\026\001\001\000" +
    "\002\001\001\000\006\016\032\040\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\035\022\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\035\022\040\001\001\000" +
    "\002\001\001\000\004\046\042\001\001\000\002\001\001" +
    "\000\036\003\157\023\171\024\155\026\154\027\152\030" +
    "\151\031\162\032\167\034\163\035\166\036\161\037\156" +
    "\046\150\047\153\001\001\000\010\016\046\017\047\020" +
    "\045\001\001\000\004\046\146\001\001\000\010\003\035" +
    "\021\052\022\054\001\001\000\002\001\001\000\010\016" +
    "\046\017\047\020\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\055\007\060\010\063\011\074\012" +
    "\075\013\056\025\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\055\007\060\010\063\011\074\012\075\013\140\025\057" +
    "\001\001\000\020\006\055\007\060\010\063\011\074\012" +
    "\075\013\137\025\057\001\001\000\024\006\055\007\060" +
    "\010\063\011\074\012\075\013\130\014\131\015\132\025" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\055\007\060\010\063\011\074\012\075\013\077\014\100" +
    "\025\057\001\001\000\004\005\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\055" +
    "\007\060\010\063\011\074\012\075\013\077\014\127\025" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\055\007\060\010\063\011\074\012\075\013\125\025\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\055\007\060\010\063" +
    "\011\074\012\075\013\124\025\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\116\001\001\000\004\005" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\055\007\060" +
    "\010\063\011\074\012\075\013\130\014\127\015\136\025" +
    "\057\001\001\000\002\001\001\000\004\005\116\001\001" +
    "\000\004\005\116\001\001\000\020\006\055\007\060\010" +
    "\063\011\074\012\075\013\142\025\057\001\001\000\004" +
    "\005\116\001\001\000\002\001\001\000\010\003\035\021" +
    "\145\022\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\157\023\171\024\155\026\154\027\152\030\151\031\162" +
    "\032\167\034\163\035\225\036\161\037\156\046\150\047" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\157\023\171\024\155\026\154\027\152\030\151\031" +
    "\162\032\167\034\163\035\224\036\161\037\156\046\150" +
    "\047\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\176\024\177\001\001\000" +
    "\020\006\055\007\060\010\063\011\074\012\075\013\174" +
    "\025\057\001\001\000\004\005\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\046" +
    "\017\201\001\001\000\002\001\001\000\020\006\055\007" +
    "\060\010\063\011\074\012\075\013\203\025\057\001\001" +
    "\000\004\005\116\001\001\000\032\023\171\024\155\026" +
    "\154\027\152\030\151\031\162\032\167\034\205\036\161" +
    "\037\156\046\150\047\153\001\001\000\002\001\001\000" +
    "\032\023\171\024\155\026\154\027\152\030\151\031\162" +
    "\032\167\034\207\036\161\037\156\046\150\047\153\001" +
    "\001\000\002\001\001\000\022\006\055\007\060\010\063" +
    "\011\074\012\075\013\077\014\213\025\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\055\007\060\010\063\011\074\012\075\013\077\014" +
    "\215\025\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\055\007\060\010\063\011" +
    "\074\012\075\013\221\025\057\001\001\000\004\005\116" +
    "\001\001\000\032\023\171\024\155\026\154\027\152\030" +
    "\151\031\162\032\167\034\223\036\161\037\156\046\150" +
    "\047\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\236\024\155\026\235\027\233\001\001\000" +
    "\020\006\055\007\060\010\063\011\074\012\075\013\232" +
    "\025\057\001\001\000\004\005\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\240\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 93. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // empty ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // boolean_literal ::= TRUE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // boolean_literal ::= FALSE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // binary_operator ::= PLUS 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.PLUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // binary_operator ::= MINUS 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.MINUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // binary_operator ::= TIMES 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.TIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // binary_operator ::= DIVIDE 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.DIVIDE; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // binary_operator ::= MODULO 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.MODULO; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // binary_operator ::= HIGH_MULT 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.HIGH_MULT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // binary_operator ::= AND 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.AND; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // binary_operator ::= OR 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.OR; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // binary_operator ::= EQUAL 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.EQUAL; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // binary_operator ::= NOT_EQUAL 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.NOT_EQUAL; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // binary_operator ::= LT 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.LT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // binary_operator ::= LEQ 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.LEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // binary_operator ::= GT 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.GT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // binary_operator ::= GEQ 
            {
                BinaryOperator RESULT = null;
                 RESULT = BinaryOperator.GEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // binary_operator_expression ::= expression binary_operator expression 
            {
                Binary RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expression e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expression> value();
                int bopleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bopright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BinaryOperator bop = CUP$parser$stack.elementAt(CUP$parser$top-1).<BinaryOperator> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expression e2 = CUP$parser$stack.peek().<Expression> value();
                 RESULT = new Binary(bop,e1,e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator_expression",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // unary_operator_expression ::= NOT expression 
            {
                Unary RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expression e = CUP$parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator_expression",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // unary_operator_expression ::= MINUS expression 
            {
                Unary RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expression e = CUP$parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator_expression",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // array_index ::= expression OPEN_BRACKET expression CLOSE_BRACKET 
            {
                ArrayIndex RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expression e1 = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expression> value();
                int e2left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e2right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expression e2 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_index",7, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // expression ::= IDENTIFIER 
            {
                Expression RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                String i = CUP$parser$stack.peek().<String> value();
                 RESULT = new Identifier(i); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // expression ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // expression ::= CHARACTER_LITERAL 
            {
                Expression RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Character c = CUP$parser$stack.peek().<Character> value();
                 RESULT = new CharacterLiteral(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // expression ::= array_index 
            {
                Expression RESULT = null;
                int aileft = CUP$parser$stack.peek().left;
                int airight = CUP$parser$stack.peek().right;
                ArrayIndex ai = CUP$parser$stack.peek().<ArrayIndex> value();
                 RESULT = ai; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // expression ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // expression ::= array_literal 
            {
                Expression RESULT = null;
                int alleft = CUP$parser$stack.peek().left;
                int alright = CUP$parser$stack.peek().right;
                ArrayLiteral al = CUP$parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // expression ::= boolean_literal 
            {
                Expression RESULT = null;
                int blleft = CUP$parser$stack.peek().left;
                int blright = CUP$parser$stack.peek().right;
                BooleanLiteral bl = CUP$parser$stack.peek().<BooleanLiteral> value();
                 RESULT = bl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // expression ::= INTEGER_LITERAL 
            {
                Expression RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                String i = CUP$parser$stack.peek().<String> value();
                 RESULT = new IntegerLiteral(i); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // expression ::= binary_operator_expression 
            {
                Expression RESULT = null;
                int boeleft = CUP$parser$stack.peek().left;
                int boeright = CUP$parser$stack.peek().right;
                Binary boe = CUP$parser$stack.peek().<Binary> value();
                 RESULT = boe; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // expression ::= unary_operator_expression 
            {
                Expression RESULT = null;
                int uoeleft = CUP$parser$stack.peek().left;
                int uoeright = CUP$parser$stack.peek().right;
                Unary uoe = CUP$parser$stack.peek().<Unary> value();
                 RESULT = uoe; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // expression_list ::= expression COMMA expression_list 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expression e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expression> value();
                int lstleft = CUP$parser$stack.peek().left;
                int lstright = CUP$parser$stack.peek().right;
                List<Expression> lst = CUP$parser$stack.peek().<List<Expression>> value();
                 lst.add(e); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // expression_list ::= expression 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expression e = CUP$parser$stack.peek().<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(e); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // expression_list_trailing_comma ::= expression COMMA expression_list_trailing_comma 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expression e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expression> value();
                int lstleft = CUP$parser$stack.peek().left;
                int lstright = CUP$parser$stack.peek().right;
                List<Expression> lst = CUP$parser$stack.peek().<List<Expression>> value();
                 lst.add(e); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // expression_list_trailing_comma ::= expression COMMA 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expression e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(e); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",11, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // array_literal ::= OPEN_BRACE expression_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int lstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<Expression> lst = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // array_literal ::= OPEN_BRACE expression_list_trailing_comma CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int lstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<Expression> lst = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // primitive_type ::= INT 
            {
                Type.PrimitiveType RESULT = null;
                 RESULT = Type.PrimitiveType.INT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // primitive_type ::= BOOL 
            {
                Type.PrimitiveType RESULT = null;
                 RESULT = Type.PrimitiveType.BOOL; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // array_sized ::= OPEN_BRACKET expression CLOSE_BRACKET array_sized 
            {
                List<Optional<Expression>> RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expression e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expression> value();
                int lstleft = CUP$parser$stack.peek().left;
                int lstright = CUP$parser$stack.peek().right;
                List<Optional<Expression>> lst = CUP$parser$stack.peek().<List<Optional<Expression>>> value();
                 lst.add(Optional.of(e)); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_sized",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // array_sized ::= array_empty 
            {
                List<Optional<Expression>> RESULT = null;
                int aeleft = CUP$parser$stack.peek().left;
                int aeright = CUP$parser$stack.peek().right;
                List<Optional<Expression>> ae = CUP$parser$stack.peek().<List<Optional<Expression>>> value();
                 RESULT = ae; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_sized",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // array_empty ::= OPEN_BRACKET CLOSE_BRACKET array_empty 
            {
                List<Optional<Expression>> RESULT = null;
                int lstleft = CUP$parser$stack.peek().left;
                int lstright = CUP$parser$stack.peek().right;
                List<Optional<Expression>> lst = CUP$parser$stack.peek().<List<Optional<Expression>>> value();
                 lst.add(Optional.empty()); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_empty",16, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // array_empty ::= empty 
            {
                List<Optional<Expression>> RESULT = null;
                 RESULT = new LinkedList<Optional<Expression>>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_empty",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // type ::= primitive_type array_sized 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Type.PrimitiveType pt = CUP$parser$stack.elementAt(CUP$parser$top-1).<Type.PrimitiveType> value();
                int asleft = CUP$parser$stack.peek().left;
                int asright = CUP$parser$stack.peek().right;
                List<Optional<Expression>> as = CUP$parser$stack.peek().<List<Optional<Expression>>> value();
                 RESULT = new Type(pt, new ArrayBrackets(as)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // types ::= type COMMA types 
            {
                List<Type> RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("types",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // types ::= type 
            {
                List<Type> RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 List<Type> lst = new LinkedList<>(); lst.add(t); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("types",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // typed_declaration ::= IDENTIFIER COLON type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new TypedDeclaration(new Identifier(id),t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typed_declaration",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // typed_declaration_list ::= typed_declaration COMMA typed_declaration_list 
            {
                List<TypedDeclaration> RESULT = null;
                int tdleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TypedDeclaration td = CUP$parser$stack.elementAt(CUP$parser$top-2).<TypedDeclaration> value();
                int lstleft = CUP$parser$stack.peek().left;
                int lstright = CUP$parser$stack.peek().right;
                List<TypedDeclaration> lst = CUP$parser$stack.peek().<List<TypedDeclaration>> value();
                 lst.add(td); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // typed_declaration_list ::= typed_declaration COMMA typed_declaration 
            {
                List<TypedDeclaration> RESULT = null;
                int td1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int td1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TypedDeclaration td1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<TypedDeclaration> value();
                int td2left = CUP$parser$stack.peek().left;
                int td2right = CUP$parser$stack.peek().right;
                TypedDeclaration td2 = CUP$parser$stack.peek().<TypedDeclaration> value();
                 List<TypedDeclaration> lst = new LinkedList<>(); lst.add(td1); lst.add(td2); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // function_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int lstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int lstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<Expression> lst = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<Expression>> value();
                 RESULT = new FunctionCall(new Identifier(id), lst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // function_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new FunctionCall(new Identifier(id), new LinkedList<Expression>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // function_call ::= LENGTH OPEN_PAREN expression CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expression e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(e); RESULT = new FunctionCall(new Identifier("length"), lst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // assignment_lhs ::= IDENTIFIER 
            {
                Assignable RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // assignment_lhs_list ::= assignment_lhs COMMA assignment_lhs_list 
            {
                List<Assignable> RESULT = null;
                int alleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int alright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Assignable al = CUP$parser$stack.elementAt(CUP$parser$top-2).<Assignable> value();
                int allleft = CUP$parser$stack.peek().left;
                int allright = CUP$parser$stack.peek().right;
                List<Assignable> all = CUP$parser$stack.peek().<List<Assignable>> value();
                 all.add(al); RESULT = all; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_list",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // assignment_lhs_list ::= assignment_lhs COMMA assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int al1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int al1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Assignable al1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Assignable> value();
                int al2left = CUP$parser$stack.peek().left;
                int al2right = CUP$parser$stack.peek().right;
                Assignable al2 = CUP$parser$stack.peek().<Assignable> value();
                 List<Assignable> aList = new LinkedList<Assignable>(); aList.add(al1); aList.add(al2); RESULT = aList; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_list",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // assignment_lhs_list ::= typed_declaration_list 
            {
                List<Assignable> RESULT = null;
                int tdlleft = CUP$parser$stack.peek().left;
                int tdlright = CUP$parser$stack.peek().right;
                List<TypedDeclaration> tdl = CUP$parser$stack.peek().<List<TypedDeclaration>> value();
                 RESULT = new LinkedList<Assignable>(tdl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_list",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // assignment ::= assignment_lhs GETS expression 
            {
                Assignment RESULT = null;
                int alleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int alright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Assignable al = CUP$parser$stack.elementAt(CUP$parser$top-2).<Assignable> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expression e = CUP$parser$stack.peek().<Expression> value();
                 List<Assignable> lst = new LinkedList<>(); lst.add(al); RESULT = new Assignment(lst, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // assignment ::= assignment_lhs_list GETS function_call 
            {
                Assignment RESULT = null;
                int allleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int allright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                List<Assignable> all = CUP$parser$stack.elementAt(CUP$parser$top-2).<List<Assignable>> value();
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                FunctionCall fc = CUP$parser$stack.peek().<FunctionCall> value();
                 RESULT = new Assignment(all, fc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // assignment ::= typed_declaration GETS expression 
            {
                Assignment RESULT = null;
                int tdleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tdright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TypedDeclaration td = CUP$parser$stack.elementAt(CUP$parser$top-2).<TypedDeclaration> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expression e = CUP$parser$stack.peek().<Expression> value();
                 RESULT = new Assignment(new ArrayList<Assignable>(Arrays.asList(td)), e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expression e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expression> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Block b = CUP$parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b, Optional.empty()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",23, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block ELSE block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Expression e = CUP$parser$stack.elementAt(CUP$parser$top-4).<Expression> value();
                int b1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int b1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Block b1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Block> value();
                int b2left = CUP$parser$stack.peek().left;
                int b2right = CUP$parser$stack.peek().right;
                Block b2 = CUP$parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b1, Optional.of(b2)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",23, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // while_statement ::= WHILE OPEN_PAREN expression CLOSE_PAREN block 
            {
                WhileStatement RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expression e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expression> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Block b = CUP$parser$stack.peek().<Block> value();
                 RESULT = new WhileStatement(e,b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",24, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // return_statement ::= RETURN expression_list 
            {
                ReturnStatement RESULT = null;
                int lstleft = CUP$parser$stack.peek().left;
                int lstright = CUP$parser$stack.peek().right;
                List<Expression> lst = CUP$parser$stack.peek().<List<Expression>> value();
                 RESULT = new ReturnStatement(lst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // return_statement ::= RETURN 
            {
                ReturnStatement RESULT = null;
                 RESULT = new ReturnStatement(new LinkedList<Expression>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // statement_no_semicolon ::= if_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                IfStatement s = CUP$parser$stack.peek().<IfStatement> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // statement_no_semicolon ::= while_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                WhileStatement s = CUP$parser$stack.peek().<WhileStatement> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // statement_no_semicolon ::= procedure_call 
            {
                Statement RESULT = null;
                int pcleft = CUP$parser$stack.peek().left;
                int pcright = CUP$parser$stack.peek().right;
                ProcedureCall pc = CUP$parser$stack.peek().<ProcedureCall> value();
                 RESULT = pc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // statement_no_semicolon ::= typed_declaration 
            {
                Statement RESULT = null;
                int tdleft = CUP$parser$stack.peek().left;
                int tdright = CUP$parser$stack.peek().right;
                TypedDeclaration td = CUP$parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // statement_no_semicolon ::= assignment 
            {
                Statement RESULT = null;
                int aleft = CUP$parser$stack.peek().left;
                int aright = CUP$parser$stack.peek().right;
                Assignment a = CUP$parser$stack.peek().<Assignment> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // statement ::= statement_no_semicolon 
            {
                Statement RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // statement ::= statement_no_semicolon SEMICOLON 
            {
                Statement RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // function_block ::= OPEN_BRACE block_list return_statement CLOSE_BRACE 
            {
                FunctionBlock RESULT = null;
                int blleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int blright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                BlockList bl = CUP$parser$stack.elementAt(CUP$parser$top-2).<BlockList> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ReturnStatement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<ReturnStatement> value();
                 RESULT = new FunctionBlock(bl, r); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",36, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // block ::= OPEN_BRACE block_list CLOSE_BRACE 
            {
                Block RESULT = null;
                int blleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int blright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BlockList bl = CUP$parser$stack.elementAt(CUP$parser$top-1).<BlockList> value();
                 RESULT = bl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // block ::= function_block 
            {
                Block RESULT = null;
                int fbleft = CUP$parser$stack.peek().left;
                int fbright = CUP$parser$stack.peek().right;
                FunctionBlock fb = CUP$parser$stack.peek().<FunctionBlock> value();
                 RESULT = fb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // block ::= statement 
            {
                Block RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // block_list ::= block block_list 
            {
                BlockList RESULT = null;
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Block b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Block> value();
                int blleft = CUP$parser$stack.peek().left;
                int blright = CUP$parser$stack.peek().right;
                BlockList bl = CUP$parser$stack.peek().<BlockList> value();
                 bl.getBlockList().add(b); RESULT = bl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_list",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // block_list ::= empty 
            {
                BlockList RESULT = null;
                 RESULT = new BlockList(new LinkedList<Block>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block_list",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // function_declaration_argument_type ::= primitive_type array_empty 
            {
                Type RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_type",30, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // function_declaration_argument_single ::= IDENTIFIER COLON function_declaration_argument_type 
            {
                TypedDeclaration RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new TypedDeclaration(new Identifier(i), t);  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_single",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // function_declaration_argument_list ::= function_declaration_argument_single COMMA function_declaration_argument_list 
            {
                List<TypedDeclaration> RESULT = null;
                int fdasleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int fdasright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                TypedDeclaration fdas = CUP$parser$stack.elementAt(CUP$parser$top-2).<TypedDeclaration> value();
                int lstleft = CUP$parser$stack.peek().left;
                int lstright = CUP$parser$stack.peek().right;
                List<TypedDeclaration> lst = CUP$parser$stack.peek().<List<TypedDeclaration>> value();
                 lst.add(fdas); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // function_declaration_argument_list ::= function_declaration_argument_single 
            {
                List<TypedDeclaration> RESULT = null;
                int fdasleft = CUP$parser$stack.peek().left;
                int fdasright = CUP$parser$stack.peek().right;
                TypedDeclaration fdas = CUP$parser$stack.peek().<TypedDeclaration> value();
                 List<TypedDeclaration> lst = new LinkedList<>(); lst.add(fdas); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",32, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // function_declaration_argument ::= function_declaration_argument_list 
            {
                List<TypedDeclaration> RESULT = null;
                int lstleft = CUP$parser$stack.peek().left;
                int lstright = CUP$parser$stack.peek().right;
                List<TypedDeclaration> lst = CUP$parser$stack.peek().<List<TypedDeclaration>> value();
                 RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // function_declaration_argument ::= empty 
            {
                List<TypedDeclaration> RESULT = null;
                 RESULT = new LinkedList<TypedDeclaration>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // function_declaration ::= IDENTIFIER OPEN_PAREN function_declaration_argument CLOSE_PAREN COLON types function_block 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-6).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-6).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-6).<String> value();
                int argsleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int argsright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                List<TypedDeclaration> args = CUP$parser$stack.elementAt(CUP$parser$top-4).<List<TypedDeclaration>> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<Type> t = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<Type>> value();
                int fbleft = CUP$parser$stack.peek().left;
                int fbright = CUP$parser$stack.peek().right;
                FunctionBlock fb = CUP$parser$stack.peek().<FunctionBlock> value();
                 RESULT = new FunctionDeclaration(new Identifier(id), args, t, fb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",34, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // function_declaration ::= IDENTIFIER OPEN_PAREN function_declaration_argument CLOSE_PAREN function_block 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int argsleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int argsright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                List<TypedDeclaration> args = CUP$parser$stack.elementAt(CUP$parser$top-2).<List<TypedDeclaration>> value();
                int fbleft = CUP$parser$stack.peek().left;
                int fbright = CUP$parser$stack.peek().right;
                FunctionBlock fb = CUP$parser$stack.peek().<FunctionBlock> value();
                 RESULT = new FunctionDeclaration(new Identifier(id),args,new LinkedList<Type>(),fb); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",34, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // function_declaration_list ::= function_declaration function_declaration_list 
            {
                List<FunctionDeclaration> RESULT = null;
                int fdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                FunctionDeclaration fd = CUP$parser$stack.elementAt(CUP$parser$top-1).<FunctionDeclaration> value();
                int lstleft = CUP$parser$stack.peek().left;
                int lstright = CUP$parser$stack.peek().right;
                List<FunctionDeclaration> lst = CUP$parser$stack.peek().<List<FunctionDeclaration>> value();
                 lst.add(fd); RESULT = lst; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration_list",35, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // function_declaration_list ::= empty 
            {
                List<FunctionDeclaration> RESULT = null;
                 RESULT = new LinkedList<FunctionDeclaration>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration_list",35, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // procedure_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int elistleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elistright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<Expression> elist = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<Expression>> value();
                 RESULT = new ProcedureCall(new Identifier(id), elist); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",37, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // procedure_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new ProcedureCall(new Identifier(id), new LinkedList<Expression>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",37, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // use_block ::= USE IDENTIFIER use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                int uleft = CUP$parser$stack.peek().left;
                int uright = CUP$parser$stack.peek().right;
                List<UseStatement> u = CUP$parser$stack.peek().<List<UseStatement>> value();
                 u.add(new UseStatement(new Identifier(id))); RESULT = u; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // use_block ::= empty 
            {
                List<UseStatement> RESULT = null;
                RESULT = new LinkedList<UseStatement>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // program ::= use_block function_declaration_list 
            {
                Program RESULT = null;
                int uleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int uright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                List<UseStatement> u = CUP$parser$stack.elementAt(CUP$parser$top-1).<List<UseStatement>> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                List<FunctionDeclaration> l = CUP$parser$stack.peek().<List<FunctionDeclaration>> value();
                 RESULT = new Program(u,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
