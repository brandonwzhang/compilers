
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package com.bwz6jk2227esl89ahj34;

import com.bwz6jk2227esl89ahj34.AST.*;
import edu.cornell.cs.cs4120.util.CodeWriterSExpPrinter;
import java_cup.runtime.Symbol;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.util.*;
import java.util.AbstractMap.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class Parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return ParserSym.class;
  }

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\003\002\000\002\005" +
    "\004\000\002\005\004\000\002\006\004\000\002\006\004" +
    "\000\002\020\003\000\002\020\003\000\002\007\003\000" +
    "\002\007\005\000\002\010\003\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\011\005\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\014\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\006\000\002\017\003\000" +
    "\002\017\003\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\022" +
    "\003\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\004\000\002\021\005\000\002\021\005\000" +
    "\002\021\004\000\002\025\003\000\002\025\003\000\002" +
    "\027\006\000\002\027\003\000\002\030\005\000\002\030" +
    "\003\000\002\026\004\000\002\032\006\000\002\031\006" +
    "\000\002\033\006\000\002\033\005\000\002\033\006\000" +
    "\002\034\006\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\005\000" +
    "\002\040\005\000\002\041\005\000\002\041\005\000\002" +
    "\042\007\000\002\042\011\000\002\043\007\000\002\044" +
    "\004\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\047\003\000" +
    "\002\047\004\000\002\057\006\000\002\057\007\000\002" +
    "\057\005\000\002\057\006\000\002\045\005\000\002\045" +
    "\003\000\002\045\003\000\002\046\004\000\002\046\003" +
    "\000\002\051\005\000\002\051\003\000\002\052\005\000" +
    "\002\053\005\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\055\011\000\002\055\007\000\002\056" +
    "\004\000\002\056\003\000\002\060\005\000\002\060\006" +
    "\000\002\060\007\000\002\061\006\000\002\061\005\000" +
    "\002\004\005\000\002\004\006\000\002\004\003\000\002" +
    "\002\004\000\002\002\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\010\003\007\004\000\021\005\001\002\000" +
    "\004\004\017\001\002\000\004\004\012\001\002\000\004" +
    "\002\011\001\002\000\004\002\uff8c\001\002\000\004\004" +
    "\uff8e\001\002\000\004\002\001\001\002\000\010\004\000" +
    "\021\005\052\014\001\002\000\004\004\uff90\001\002\000" +
    "\006\004\000\021\005\001\002\000\004\004\uff8f\001\002" +
    "\000\004\002\uff8d\001\002\000\004\044\022\001\002\000" +
    "\006\002\uff96\004\017\001\002\000\004\002\uff97\001\002" +
    "\000\006\004\025\045\000\001\002\000\004\045\044\001" +
    "\002\000\004\045\uff9b\001\002\000\004\050\032\001\002" +
    "\000\006\045\uff9c\051\030\001\002\000\004\045\uff9a\001" +
    "\002\000\004\004\025\001\002\000\004\045\uff9d\001\002" +
    "\000\006\012\036\013\034\001\002\000\006\045\uff9e\051" +
    "\uff9e\001\002\000\040\004\uffcf\005\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\022\uffcf\041\uffcf\042\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\012" +
    "\042\040\045\000\046\000\051\000\001\002\000\040\004" +
    "\uffd0\005\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\022\uffd0" +
    "\041\uffd0\042\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\001\002\000\010\045\uffca\046\uffca\051\uffca" +
    "\001\002\000\004\043\042\001\002\000\036\004\uffcb\005" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\022\uffcb\041\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\001" +
    "\002\000\040\004\000\005\000\014\000\015\000\016\000" +
    "\020\000\022\000\041\000\042\040\045\000\046\000\047" +
    "\000\051\000\052\000\053\000\001\002\000\036\004\uffcc" +
    "\005\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\041" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\001\002\000\006\046\045\050\047\001\002\000\024\004" +
    "\071\005\101\014\073\016\102\020\000\022\057\046\066" +
    "\047\000\053\054\001\002\000\006\002\uff98\004\uff98\001" +
    "\002\000\006\012\036\013\034\001\002\000\006\046\uff9f" +
    "\051\311\001\002\000\004\046\053\001\002\000\006\002" +
    "\uff99\004\uff99\001\002\000\022\004\071\005\101\014\073" +
    "\016\102\020\000\022\057\046\066\053\054\001\002\000" +
    "\006\041\uffbb\051\uffb9\001\002\000\006\041\uffbc\042\uffc3" +
    "\001\002\000\024\004\uffa4\005\uffa4\014\uffa4\016\uffa4\020" +
    "\uffa4\022\uffa4\046\uffa4\047\307\053\uffa4\001\002\000\004" +
    "\044\304\001\002\000\030\004\uffae\005\uffae\014\uffae\015" +
    "\uffae\016\uffae\020\uffae\022\uffae\046\uffae\047\uffae\052\uffae" +
    "\053\uffae\001\002\000\004\041\301\001\002\000\006\041" +
    "\uffbd\051\uffba\001\002\000\006\020\uffa1\047\uffa1\001\002" +
    "\000\006\041\uffbe\042\uffc0\001\002\000\004\042\276\001" +
    "\002\000\024\004\071\005\101\014\073\016\102\020\000" +
    "\022\057\046\066\047\000\053\054\001\002\000\030\004" +
    "\uffa3\005\uffa3\014\uffa3\015\uffa3\016\uffa3\020\uffa3\022\uffa3" +
    "\046\uffa3\047\uffa3\052\uffa3\053\uffa3\001\002\000\024\004" +
    "\071\005\101\014\073\016\102\020\000\022\057\046\066" +
    "\047\000\053\054\001\002\000\012\041\uffbf\042\uffc1\044" +
    "\256\050\257\001\002\000\030\004\uffaf\005\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\020\uffaf\022\uffaf\046\uffaf\047\uffaf\052" +
    "\uffaf\053\uffaf\001\002\000\004\044\250\001\002\000\004" +
    "\051\237\001\002\000\030\004\uffac\005\uffac\014\uffac\015" +
    "\uffac\016\uffac\020\uffac\022\uffac\046\uffac\047\uffac\052\uffac" +
    "\053\uffac\001\002\000\004\041\235\001\002\000\030\004" +
    "\uffab\005\uffab\014\uffab\015\uffab\016\uffab\020\uffab\022\uffab" +
    "\046\uffab\047\uffab\052\234\053\uffab\001\002\000\030\004" +
    "\uffb0\005\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0\022\uffb0" +
    "\046\uffb0\047\uffb0\052\uffb0\053\uffb0\001\002\000\004\042" +
    "\uffc2\001\002\000\004\044\227\001\002\000\004\020\105" +
    "\001\002\000\030\004\uffad\005\uffad\014\uffad\015\uffad\016" +
    "\uffad\020\uffad\022\uffad\046\uffad\047\uffad\052\uffad\053\uffad" +
    "\001\002\000\030\004\131\005\140\006\133\007\125\010" +
    "\134\011\141\022\057\024\126\030\135\044\136\046\127" +
    "\001\002\000\006\047\110\052\107\001\002\000\004\047" +
    "\111\001\002\000\032\002\uffa9\004\uffa9\005\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\020\uffa9\022\uffa9\046\uffa9\047\uffa9\052" +
    "\uffa9\053\uffa9\001\002\000\032\002\uffa8\004\uffa8\005\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\020\uffa8\022\uffa8\046\uffa8\047" +
    "\uffa8\052\uffa8\053\uffa8\001\002\000\040\004\uffd8\005\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\020\uffd8\022\uffd8\036\145\043" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\001\002\000\042\004\ufff9\005\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\020\ufff9\022\ufff9\035\150\036\ufff9\043\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002\000" +
    "\046\004\ufff7\005\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7" +
    "\022\ufff7\035\ufff7\036\ufff7\037\152\040\153\043\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002" +
    "\000\056\004\ufff5\005\ufff5\014\ufff5\015\ufff5\016\ufff5\020" +
    "\ufff5\022\ufff5\031\156\032\157\033\160\034\155\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\043\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\001\002\000\062\004\ufff2" +
    "\005\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\022\ufff2\023" +
    "\163\024\162\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\043\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002\000\074\004\uffe1" +
    "\005\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\001\002\000\072\004\uffed\005\uffed\014" +
    "\uffed\015\uffed\016\uffed\020\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\165\026\170\027\167\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\043\uffed\045\uffed" +
    "\046\uffed\047\uffed\051\uffed\052\uffed\053\uffed\054\166\001" +
    "\002\000\072\004\uffea\005\uffea\014\uffea\015\uffea\016\uffea" +
    "\020\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\043\uffea\045\uffea\046\uffea\047\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\001\002\000\074\004\uffe5" +
    "\005\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042" +
    "\204\043\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\001\002\000\074\004\uffdf\005\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\001\002\000\074\004\uffe2\005\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\001\002" +
    "\000\074\004\uffde\005\uffde\014\uffde\015\uffde\016\uffde\020" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\042\uffde\043\uffde\045\uffde\046\uffde\047\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\001\002\000\026\004" +
    "\131\005\140\006\133\007\125\010\134\011\141\022\057" +
    "\024\126\044\136\046\127\001\002\000\032\004\131\005" +
    "\140\006\133\007\125\010\134\011\141\022\057\024\126" +
    "\030\135\044\136\046\127\047\215\001\002\000\006\047" +
    "\uffb1\052\uffb1\001\002\000\076\004\uffdc\005\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\044" +
    "\211\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\001\002\000\012\045\uffd6\047\uffd6\051\207\052" +
    "\uffd6\001\002\000\074\004\uffda\005\uffda\014\uffda\015\uffda" +
    "\016\uffda\020\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\042\uffda\043\uffda\045\uffda\046" +
    "\uffda\047\uffda\051\uffda\052\uffda\053\uffda\054\uffda\001\002" +
    "\000\074\004\ufffb\005\ufffb\014\ufffb\015\ufffb\016\ufffb\020" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\042\ufffb\043\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\001\002\000\026\004" +
    "\131\005\140\006\133\007\125\010\134\011\141\022\057" +
    "\030\135\044\136\046\127\001\002\000\030\004\131\005" +
    "\140\006\133\007\125\010\134\011\141\022\057\024\126" +
    "\030\135\044\136\046\127\001\002\000\072\004\uffe3\005" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\043\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\001\002\000\074\004\uffdb\005\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\001\002" +
    "\000\074\004\ufffa\005\ufffa\014\ufffa\015\ufffa\016\ufffa\020" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\042\ufffa\043\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002\000\074\004" +
    "\uffd9\005\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\042\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\001\002\000\072\004\uffe4\005\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\020\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\043\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\001\002\000\006\036\145\045\146\001\002\000\030\004" +
    "\131\005\140\006\133\007\125\010\134\011\141\022\057" +
    "\024\126\030\135\044\136\046\127\001\002\000\074\004" +
    "\uffdd\005\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\001\002\000\042\004\ufff8\005\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\020\ufff8\022\ufff8\035\150\036" +
    "\ufff8\043\ufff8\045\ufff8\046\ufff8\047\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\001\002\000\030\004\131\005\140\006\133\007" +
    "\125\010\134\011\141\022\057\024\126\030\135\044\136" +
    "\046\127\001\002\000\046\004\ufff6\005\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\020\ufff6\022\ufff6\035\ufff6\036\ufff6\037\152" +
    "\040\153\043\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\001\002\000\030\004\131\005\140\006\133" +
    "\007\125\010\134\011\141\022\057\024\126\030\135\044" +
    "\136\046\127\001\002\000\030\004\131\005\140\006\133" +
    "\007\125\010\134\011\141\022\057\024\126\030\135\044" +
    "\136\046\127\001\002\000\056\004\ufff3\005\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\020\ufff3\022\ufff3\031\156\032\157\033" +
    "\160\034\155\035\ufff3\036\ufff3\037\ufff3\040\ufff3\043\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3\001" +
    "\002\000\030\004\131\005\140\006\133\007\125\010\134" +
    "\011\141\022\057\024\126\030\135\044\136\046\127\001" +
    "\002\000\030\004\131\005\140\006\133\007\125\010\134" +
    "\011\141\022\057\024\126\030\135\044\136\046\127\001" +
    "\002\000\030\004\131\005\140\006\133\007\125\010\134" +
    "\011\141\022\057\024\126\030\135\044\136\046\127\001" +
    "\002\000\030\004\131\005\140\006\133\007\125\010\134" +
    "\011\141\022\057\024\126\030\135\044\136\046\127\001" +
    "\002\000\062\004\uffef\005\uffef\014\uffef\015\uffef\016\uffef" +
    "\020\uffef\022\uffef\023\163\024\162\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\043\uffef" +
    "\045\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053\uffef\001" +
    "\002\000\030\004\131\005\140\006\133\007\125\010\134" +
    "\011\141\022\057\024\126\030\135\044\136\046\127\001" +
    "\002\000\030\004\131\005\140\006\133\007\125\010\134" +
    "\011\141\022\057\024\126\030\135\044\136\046\127\001" +
    "\002\000\072\004\uffec\005\uffec\014\uffec\015\uffec\016\uffec" +
    "\020\uffec\022\uffec\023\uffec\024\uffec\025\165\026\170\027" +
    "\167\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\043\uffec\045\uffec\046\uffec\047\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\166\001\002\000\030\004\131" +
    "\005\140\006\133\007\125\010\134\011\141\022\057\024" +
    "\126\030\135\044\136\046\127\001\002\000\030\004\131" +
    "\005\140\006\133\007\125\010\134\011\141\022\057\024" +
    "\126\030\135\044\136\046\127\001\002\000\030\004\131" +
    "\005\140\006\133\007\125\010\134\011\141\022\057\024" +
    "\126\030\135\044\136\046\127\001\002\000\030\004\131" +
    "\005\140\006\133\007\125\010\134\011\141\022\057\024" +
    "\126\030\135\044\136\046\127\001\002\000\072\004\uffe7" +
    "\005\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\043" +
    "\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\001\002\000\072\004\uffe6\005\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\043\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\001\002\000" +
    "\072\004\uffe8\005\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\043\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\001\002\000\072\004\uffe9\005\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\020\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\043\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\001\002\000\072\004\uffeb\005\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\165\026\170" +
    "\027\167\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\043\uffeb\045\uffeb\046\uffeb\047\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\166\001\002\000\062\004" +
    "\ufff0\005\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\022\ufff0" +
    "\023\163\024\162\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\043\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000\062\004" +
    "\ufff1\005\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\022\ufff1" +
    "\023\163\024\162\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\043\ufff1\045\ufff1\046\ufff1" +
    "\047\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000\062\004" +
    "\uffee\005\uffee\014\uffee\015\uffee\016\uffee\020\uffee\022\uffee" +
    "\023\163\024\162\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\043\uffee\045\uffee\046\uffee" +
    "\047\uffee\051\uffee\052\uffee\053\uffee\001\002\000\056\004" +
    "\ufff4\005\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\022\ufff4" +
    "\031\156\032\157\033\160\034\155\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\043\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\001\002\000\074\004\ufffc\005\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\042\204\043\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\051\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\001\002\000\072\004\ufffd\005\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\020\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\043\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\001\002\000\030" +
    "\004\131\005\140\006\133\007\125\010\134\011\141\022" +
    "\057\024\126\030\135\044\136\046\127\001\002\000\006" +
    "\036\145\043\206\001\002\000\074\004\uffe0\005\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\001\002\000\030\004\131\005\140\006\133\007\125" +
    "\010\134\011\141\022\057\024\126\030\135\044\136\046" +
    "\127\001\002\000\010\045\uffd7\047\uffd7\052\uffd7\001\002" +
    "\000\032\004\131\005\140\006\133\007\125\010\134\011" +
    "\141\022\057\024\126\030\135\044\136\045\213\046\127" +
    "\001\002\000\004\045\214\001\002\000\074\004\uffc6\005" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\020\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6" +
    "\043\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\001\002\000\074\004\uffc7\005\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\020\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\001\002\000\074\004\uffd1\005\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\001\002\000" +
    "\004\047\224\001\002\000\004\047\223\001\002\000\006" +
    "\047\uffd6\051\221\001\002\000\032\004\131\005\140\006" +
    "\133\007\125\010\134\011\141\022\057\024\126\030\135" +
    "\044\136\046\127\047\uffd4\001\002\000\004\047\uffd5\001" +
    "\002\000\074\004\uffd2\005\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\001\002\000\074" +
    "\004\uffd3\005\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\001\002\000\074\004\ufffe\005" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\020\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\042\204" +
    "\043\ufffe\045\ufffe\046\ufffe\047\ufffe\051\ufffe\052\ufffe\053" +
    "\ufffe\054\ufffe\001\002\000\072\004\uffff\005\uffff\014\uffff" +
    "\015\uffff\016\uffff\020\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\040\uffff\043\uffff\045\uffff\046" +
    "\uffff\047\uffff\051\uffff\052\uffff\053\uffff\054\uffff\001\002" +
    "\000\030\004\131\005\140\006\133\007\125\010\134\011" +
    "\141\022\057\024\126\030\135\044\136\046\127\001\002" +
    "\000\004\045\231\001\002\000\020\004\071\005\101\014" +
    "\073\016\102\022\057\046\066\053\054\001\002\000\030" +
    "\004\uffa4\005\uffa4\014\uffa4\015\uffa4\016\uffa4\020\uffa4\022" +
    "\uffa4\046\uffa4\047\uffa4\052\uffa4\053\uffa4\001\002\000\030" +
    "\004\uffb2\005\uffb2\014\uffb2\015\uffb2\016\uffb2\020\uffb2\022" +
    "\uffb2\046\uffb2\047\uffb2\052\uffb2\053\uffb2\001\002\000\030" +
    "\004\uffaa\005\uffaa\014\uffaa\015\uffaa\016\uffaa\020\uffaa\022" +
    "\uffaa\046\uffaa\047\uffaa\052\uffaa\053\uffaa\001\002\000\030" +
    "\004\131\005\140\006\133\007\125\010\134\011\141\022" +
    "\057\024\126\030\135\044\136\046\127\001\002\000\030" +
    "\004\uffb6\005\uffb6\014\uffb6\015\uffb6\016\uffb6\020\uffb6\022" +
    "\uffb6\046\uffb6\047\uffb6\052\uffb6\053\uffb6\001\002\000\006" +
    "\004\243\053\240\001\002\000\006\041\uffb9\051\uffb9\001" +
    "\002\000\006\041\uffb7\051\237\001\002\000\004\041\uffb8" +
    "\001\002\000\004\050\245\001\002\000\006\041\uffba\051" +
    "\uffba\001\002\000\006\012\036\013\034\001\002\000\010" +
    "\041\000\042\040\051\000\001\002\000\006\041\uffc9\051" +
    "\uffc9\001\002\000\030\004\131\005\140\006\133\007\125" +
    "\010\134\011\141\022\057\024\126\030\135\044\136\046" +
    "\127\001\002\000\004\045\252\001\002\000\020\004\071" +
    "\005\101\014\073\016\102\022\057\046\066\053\054\001" +
    "\002\000\030\004\uffb4\005\uffb4\014\uffb4\015\254\016\uffb4" +
    "\020\uffb4\022\uffb4\046\uffb4\047\uffb4\052\uffb4\053\uffb4\001" +
    "\002\000\020\004\071\005\101\014\073\016\102\022\057" +
    "\046\066\053\054\001\002\000\030\004\uffb3\005\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\020\uffb3\022\uffb3\046\uffb3\047\uffb3" +
    "\052\uffb3\053\uffb3\001\002\000\032\004\131\005\140\006" +
    "\133\007\125\010\134\011\141\022\057\024\126\030\135" +
    "\044\136\045\271\046\127\001\002\000\006\012\036\013" +
    "\034\001\002\000\036\004\000\005\000\014\000\015\000" +
    "\016\000\020\000\022\000\041\000\042\263\046\000\047" +
    "\000\051\000\052\000\053\000\001\002\000\034\004\uffcd" +
    "\005\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\022\uffcd\041" +
    "\uffc9\046\uffcd\047\uffcd\051\uffc9\052\uffcd\053\uffcd\001\002" +
    "\000\030\004\uffc8\005\uffc8\014\uffc8\015\uffc8\016\uffc8\020" +
    "\uffc8\022\uffc8\046\uffc8\047\uffc8\052\uffc8\053\uffc8\001\002" +
    "\000\032\004\131\005\140\006\133\007\125\010\134\011" +
    "\141\022\057\024\126\030\135\043\042\044\136\046\127" +
    "\001\002\000\004\043\265\001\002\000\032\004\000\005" +
    "\000\014\000\015\000\016\000\020\000\022\000\042\263" +
    "\046\000\047\000\052\000\053\000\001\002\000\030\004" +
    "\uffcd\005\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\022\uffcd" +
    "\046\uffcd\047\uffcd\052\uffcd\053\uffcd\001\002\000\030\004" +
    "\uffce\005\uffce\014\uffce\015\uffce\016\uffce\020\uffce\022\uffce" +
    "\046\uffce\047\uffce\052\uffce\053\uffce\001\002\000\004\045" +
    "\272\001\002\000\034\004\uff91\005\uff91\014\uff91\015\uff91" +
    "\016\uff91\020\uff91\022\uff91\041\uffc6\042\uffc6\046\uff91\047" +
    "\uff91\052\uff91\053\uff91\001\002\000\034\004\uff92\005\uff92" +
    "\014\uff92\015\uff92\016\uff92\020\uff92\022\uff92\041\uffc7\042" +
    "\uffc7\046\uff92\047\uff92\052\uff92\053\uff92\001\002\000\006" +
    "\020\uffa2\047\uffa2\001\002\000\006\020\105\047\275\001" +
    "\002\000\030\004\uffa5\005\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\020\uffa5\022\uffa5\046\uffa5\047\uffa5\052\uffa5\053\uffa5\001" +
    "\002\000\030\004\131\005\140\006\133\007\125\010\134" +
    "\011\141\022\057\024\126\030\135\044\136\046\127\001" +
    "\002\000\004\043\300\001\002\000\006\041\uffc4\042\uffc4" +
    "\001\002\000\006\004\303\022\057\001\002\000\030\004" +
    "\uffb5\005\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\022\uffb5" +
    "\046\uffb5\047\uffb5\052\uffb5\053\uffb5\001\002\000\004\044" +
    "\211\001\002\000\030\004\131\005\140\006\133\007\125" +
    "\010\134\011\141\022\057\024\126\030\135\044\136\046" +
    "\127\001\002\000\004\045\306\001\002\000\076\004\uffc5" +
    "\005\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\001\002\000\032\002\uffa7\004" +
    "\uffa7\005\uffa7\014\uffa7\015\uffa7\016\uffa7\020\uffa7\022\uffa7" +
    "\046\uffa7\047\uffa7\052\310\053\uffa7\001\002\000\032\002" +
    "\uffa6\004\uffa6\005\uffa6\014\uffa6\015\uffa6\016\uffa6\020\uffa6" +
    "\022\uffa6\046\uffa6\047\uffa6\052\uffa6\053\uffa6\001\002\000" +
    "\006\012\036\013\034\001\002\000\004\046\uffa0\001\002" +
    "\000\006\020\314\047\315\001\002\000\006\047\317\052" +
    "\316\001\002\000\006\002\uff95\004\uff95\001\002\000\004" +
    "\047\320\001\002\000\006\002\uff94\004\uff94\001\002\000" +
    "\006\002\uff93\004\uff93\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\010\002\005\003\007\004\003\001\001\000" +
    "\006\055\017\056\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\007\004\012\001\001\000\002\001\001" +
    "\000\006\003\007\004\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\055\017\056\020" +
    "\001\001\000\002\001\001\000\012\003\026\052\025\053" +
    "\023\054\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\052\025\053\030\001\001\000\002\001\001\000\006" +
    "\025\034\026\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\040\030\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\040\030\042\001\001\000\002\001\001\000\004" +
    "\060\045\001\001\000\046\003\062\031\103\032\061\033" +
    "\054\034\063\035\064\036\075\037\073\040\060\041\074" +
    "\042\077\043\071\045\067\046\312\047\066\050\076\057" +
    "\231\061\057\001\001\000\002\001\001\000\010\025\034" +
    "\026\047\051\050\001\001\000\002\001\001\000\004\057" +
    "\051\001\001\000\002\001\001\000\046\003\062\031\103" +
    "\032\061\033\054\034\063\035\064\036\075\037\073\040" +
    "\060\041\074\042\077\043\071\045\067\046\102\047\066" +
    "\050\076\057\055\061\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\062" +
    "\031\103\032\061\033\054\034\063\035\064\036\075\037" +
    "\073\040\060\041\074\042\077\043\071\045\067\046\273" +
    "\047\066\050\076\057\055\061\057\001\001\000\002\001" +
    "\001\000\046\003\062\031\103\032\061\033\054\034\063" +
    "\035\064\036\075\037\073\040\060\041\074\042\077\043" +
    "\071\045\067\046\272\047\066\050\076\057\231\061\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\105\001\001\000\002\001\001" +
    "\000\042\005\136\006\142\007\111\010\112\011\113\012" +
    "\114\013\115\014\117\015\120\016\121\017\123\020\122" +
    "\021\141\022\131\023\127\033\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\225" +
    "\016\224\017\123\020\122\021\141\033\116\001\001\000" +
    "\044\005\136\006\142\007\111\010\112\011\113\012\114" +
    "\013\115\014\117\015\120\016\121\017\123\020\122\021" +
    "\141\022\217\023\215\024\216\033\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\202\016\201\017\123" +
    "\020\122\021\141\033\116\001\001\000\036\005\136\006" +
    "\142\007\143\010\112\011\113\012\114\013\115\014\117" +
    "\015\120\016\121\017\123\020\122\021\141\033\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\136\006\142\010\146\011\113\012\114\013\115" +
    "\014\117\015\120\016\121\017\123\020\122\021\141\033" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\136\006\142\011\150\012\114\013\115\014\117\015" +
    "\120\016\121\017\123\020\122\021\141\033\116\001\001" +
    "\000\002\001\001\000\030\005\136\006\142\012\200\013" +
    "\115\014\117\015\120\016\121\017\123\020\122\021\141" +
    "\033\116\001\001\000\030\005\136\006\142\012\153\013" +
    "\115\014\117\015\120\016\121\017\123\020\122\021\141" +
    "\033\116\001\001\000\002\001\001\000\026\005\136\006" +
    "\142\013\177\014\117\015\120\016\121\017\123\020\122" +
    "\021\141\033\116\001\001\000\026\005\136\006\142\013" +
    "\176\014\117\015\120\016\121\017\123\020\122\021\141" +
    "\033\116\001\001\000\026\005\136\006\142\013\175\014" +
    "\117\015\120\016\121\017\123\020\122\021\141\033\116" +
    "\001\001\000\026\005\136\006\142\013\160\014\117\015" +
    "\120\016\121\017\123\020\122\021\141\033\116\001\001" +
    "\000\002\001\001\000\024\005\136\006\142\014\174\015" +
    "\120\016\121\017\123\020\122\021\141\033\116\001\001" +
    "\000\024\005\136\006\142\014\163\015\120\016\121\017" +
    "\123\020\122\021\141\033\116\001\001\000\002\001\001" +
    "\000\022\005\136\006\142\015\173\016\121\017\123\020" +
    "\122\021\141\033\116\001\001\000\022\005\136\006\142" +
    "\015\172\016\121\017\123\020\122\021\141\033\116\001" +
    "\001\000\022\005\136\006\142\015\171\016\121\017\123" +
    "\020\122\021\141\033\116\001\001\000\022\005\136\006" +
    "\142\015\170\016\121\017\123\020\122\021\141\033\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\136\006\142" +
    "\007\204\010\112\011\113\012\114\013\115\014\117\015" +
    "\120\016\121\017\123\020\122\021\141\033\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\136\006" +
    "\142\007\111\010\112\011\113\012\114\013\115\014\117" +
    "\015\120\016\121\017\123\020\122\021\141\022\131\023" +
    "\207\033\116\001\001\000\002\001\001\000\042\005\136" +
    "\006\142\007\111\010\112\011\113\012\114\013\115\014" +
    "\117\015\120\016\121\017\123\020\122\021\141\022\131" +
    "\023\211\033\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\005\136\006" +
    "\142\007\111\010\112\011\113\012\114\013\115\014\117" +
    "\015\120\016\121\017\123\020\122\021\141\022\217\023" +
    "\207\024\221\033\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\005\136\006\142\007\111\010\112\011\113" +
    "\012\114\013\115\014\117\015\120\016\121\017\123\020" +
    "\122\021\141\022\227\033\116\001\001\000\002\001\001" +
    "\000\042\031\103\032\061\033\054\034\063\035\064\036" +
    "\075\037\073\040\060\041\074\042\077\043\071\045\232" +
    "\047\066\050\076\057\231\061\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\136" +
    "\006\142\007\111\010\112\011\113\012\114\013\115\014" +
    "\117\015\120\016\121\017\123\020\122\021\141\022\235" +
    "\033\116\001\001\000\002\001\001\000\010\032\243\037" +
    "\240\040\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\245\001\001\000\006\003\040\030\246\001\001" +
    "\000\002\001\001\000\040\005\136\006\142\007\111\010" +
    "\112\011\113\012\114\013\115\014\117\015\120\016\121" +
    "\017\123\020\122\021\141\022\250\033\116\001\001\000" +
    "\002\001\001\000\042\031\103\032\061\033\054\034\063" +
    "\035\064\036\075\037\073\040\060\041\074\042\077\043" +
    "\071\045\252\047\066\050\076\057\231\061\057\001\001" +
    "\000\002\001\001\000\042\031\103\032\061\033\054\034" +
    "\063\035\064\036\075\037\073\040\060\041\074\042\077" +
    "\043\071\045\254\047\066\050\076\057\231\061\057\001" +
    "\001\000\002\001\001\000\042\005\136\006\142\007\111" +
    "\010\112\011\113\012\114\013\115\014\117\015\120\016" +
    "\121\017\123\020\122\021\141\022\131\023\267\033\116" +
    "\001\001\000\004\025\257\001\001\000\010\003\040\027" +
    "\261\030\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\005\136\006\142\007\111\010\112\011\113\012" +
    "\114\013\115\014\117\015\120\016\121\017\123\020\122" +
    "\021\141\022\263\033\116\001\001\000\002\001\001\000" +
    "\010\003\040\027\266\030\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\105\001\001" +
    "\000\002\001\001\000\040\005\136\006\142\007\111\010" +
    "\112\011\113\012\114\013\115\014\117\015\120\016\121" +
    "\017\123\020\122\021\141\022\276\033\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\136\006" +
    "\142\007\111\010\112\011\113\012\114\013\115\014\117" +
    "\015\120\016\121\017\123\020\122\021\141\022\304\033" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\034\026\047\051" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}




    public static void parseFile(String sourcePath,
                             String diagnosticPath,
                             String[] files) {
        try {
            for (String file : files) {
                if (!file.contains(".xi")) {
                    System.out.println(file + "is not a .xi file. " +
                            "This file will not be parsed.");
                    continue;
                }

                FileReader reader = new FileReader(sourcePath + file);
                Lexer lexer = new Lexer(reader);
                Parser parser = new Parser(lexer);

                String output = file.replace(".xi", ".parsed");
                String writeFile = diagnosticPath + output;
                Util.makePath(writeFile.substring(0, writeFile.lastIndexOf('/') + 1));

                Symbol result = parser.parse();

                if (parser.hasSyntaxError) {
                    // handle syntax error, output to file
                    parser.hasSyntaxError = false;
                    Util.writeAndClose(writeFile, new
                            ArrayList<String>(Arrays.asList(parser.syntaxErrMessage)));

                    parser.syntaxErrMessage = "";
                    continue;
                }

                FileOutputStream fos = new FileOutputStream(
                        new File(writeFile));
                CodeWriterSExpPrinter printer =
                        new CodeWriterSExpPrinter(fos);
                NodeVisitor visitor = new PrintVisitor(printer);

                ((Program)(result.value)).accept(visitor);
                printer.flush();
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public boolean hasSyntaxError = false;
    public String syntaxErrMessage = "";
    
    public void syntax_error(java_cup.runtime.Symbol cur_token){
        hasSyntaxError = true;
        syntaxErrMessage = cur_token.left + ":" + cur_token.right + 
          " error: Unexpected token " + Util.symbolTranslation.get(cur_token.sym);
        if (cur_token.value != null) {
            syntaxErrMessage += " " + cur_token.value;
        }
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
    private final Parser parser;

    /** Constructor */
    CUP$Parser$actions(Parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 117. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int start_valright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Program start_val = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // empty ::= 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",1, CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // minus_list ::= MINUS minus_list 
            {
                Expression RESULT = null;
                int mleft = CUP$Parser$stack.peek().left;
                int mright = CUP$Parser$stack.peek().right;
                Expression m = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, m); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",3, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // minus_list ::= MINUS H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, h); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_list",3, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // not_list ::= NOT not_list 
            {
                Expression RESULT = null;
                int nleft = CUP$Parser$stack.peek().left;
                int nright = CUP$Parser$stack.peek().right;
                Expression n = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, n); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // not_list ::= NOT H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, h); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_list",4, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // boolean_literal ::= TRUE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(true); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // boolean_literal ::= FALSE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(false); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // A ::= B 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = b; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",5, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // A ::= A OR B 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.OR, a,b); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",5, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // B ::= C 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = c; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",6, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // B ::= B AND C 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression b = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.AND, b,c); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",6, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // C ::= D 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = d; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",7, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // C ::= C EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.EQUAL, c,d); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",7, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // C ::= C NOT_EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.NOT_EQUAL,c,d); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",7, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // D ::= E 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = e; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",8, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // D ::= D LT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LT, d,e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // D ::= D LEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LEQ, d,e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // D ::= D GT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GT, d,e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // D ::= D GEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GEQ, d,e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // E ::= F 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = f; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",9, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // E ::= E PLUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.PLUS, e,f); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // E ::= E MINUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MINUS,e,f); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",9, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // F ::= G 
            {
                Expression RESULT = null;
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = g; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",10, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // F ::= F TIMES G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.TIMES, f,g); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // F ::= F HIGH_MULT G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.HIGH_MULT, f,g); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // F ::= F DIVIDE G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.DIVIDE, f,g); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // F ::= F MODULO G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MODULO, f,g); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // G ::= H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = h; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",11, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // G ::= not_list 
            {
                Expression RESULT = null;
                int nleft = CUP$Parser$stack.peek().left;
                int nright = CUP$Parser$stack.peek().right;
                Expression n = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = n; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",11, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // G ::= minus_list 
            {
                Expression RESULT = null;
                int mleft = CUP$Parser$stack.peek().left;
                int mright = CUP$Parser$stack.peek().right;
                Expression m = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = m; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",11, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // H ::= I 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                Expression i = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = i; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // H ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",12, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // H ::= H OPEN_BRACKET A CLOSE_BRACKET 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int hright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Expression h = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Expression> value();
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(h,a); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",12, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // I ::= boolean_literal 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                BooleanLiteral b = CUP$Parser$stack.peek().<BooleanLiteral> value();
                 RESULT = b; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // I ::= INTEGER_LITERAL 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                String i = CUP$Parser$stack.peek().<String> value();
                 RESULT = new IntegerLiteral(i); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // I ::= OPEN_PAREN A CLOSE_PAREN 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",13, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // I ::= IDENTIFIER 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                String i = CUP$Parser$stack.peek().<String> value();
                 RESULT = new Identifier(i); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // I ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                String s = CUP$Parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // I ::= CHARACTER_LITERAL 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Character c = CUP$Parser$stack.peek().<Character> value();
                 RESULT = new CharacterLiteral(c); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // I ::= array_literal 
            {
                Expression RESULT = null;
                int alleft = CUP$Parser$stack.peek().left;
                int alright = CUP$Parser$stack.peek().right;
                ArrayLiteral al = CUP$Parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",13, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // expression ::= A 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Expression a = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",16, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // expression_list ::= expression COMMA expression_list 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",17, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // expression_list ::= expression 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",17, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // expression_list_trailing_comma ::= expression COMMA expression_list_trailing_comma 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",18, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // expression_list_trailing_comma ::= expression COMMA 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",18, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // array_literal ::= OPEN_BRACE expression_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",15, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // array_literal ::= OPEN_BRACE expression_list_trailing_comma CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",15, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // array_literal ::= OPEN_BRACE CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                 RESULT = new ArrayLiteral(new LinkedList<>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",15, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                 RESULT = PrimitiveType.INT; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",19, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                 RESULT = PrimitiveType.BOOL; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",19, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // array_size_type ::= OPEN_BRACKET expression CLOSE_BRACKET array_size_type 
            {
                SimpleEntry<List<Expression>,Integer> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                SimpleEntry<List<Expression>,Integer> ast = CUP$Parser$stack.peek().<SimpleEntry<List<Expression>,Integer>> value();
                 ast.getKey().add(0, e); RESULT = ast; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",21, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // array_size_type ::= array_no_size_type 
            {
                SimpleEntry<List<Expression>,Integer> RESULT = null;
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new SimpleEntry<List<Expression>, Integer>(new LinkedList<>(), anst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",21, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // array_no_size_type ::= OPEN_BRACKET CLOSE_BRACKET array_no_size_type 
            {
                Integer RESULT = null;
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = anst + 1; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",22, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // array_no_size_type ::= empty 
            {
                Integer RESULT = null;
                 RESULT = 0; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",22, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // var_type ::= primitive_type array_no_size_type 
            {
                VariableType RESULT = null;
                int ptleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int ptright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType pt = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int anstleft = CUP$Parser$stack.peek().left;
                int anstright = CUP$Parser$stack.peek().right;
                Integer anst = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new VariableType(pt, anst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",20, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // typed_declaration_no_size ::= IDENTIFIER COLON primitive_type array_no_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<String> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                Integer ast = CUP$Parser$stack.peek().<Integer> value();
                 RESULT = new TypedDeclaration(new Identifier(id), new VariableType(t, ast), new LinkedList<Expression>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_no_size",24, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // typed_declaration ::= IDENTIFIER COLON primitive_type array_size_type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<String> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                PrimitiveType t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<PrimitiveType> value();
                int astleft = CUP$Parser$stack.peek().left;
                int astright = CUP$Parser$stack.peek().right;
                SimpleEntry<List<Expression>,Integer> ast = CUP$Parser$stack.peek().<SimpleEntry<List<Expression>,Integer>> value();
                 RESULT = new TypedDeclaration(new Identifier(id), new VariableType(t, ast.getKey().size() + ast.getValue()), ast.getKey()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration",23, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // function_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<String> value();
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new FunctionCall(new Identifier(id), lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",25, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // function_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<String> value();
                 RESULT = new FunctionCall(new Identifier(id), new LinkedList<Expression>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",25, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // function_call ::= LENGTH OPEN_PAREN expression CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = new FunctionCall(new Identifier("length"), lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",25, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // assignment_lhs_array_brackets ::= assignment_lhs_array OPEN_BRACKET expression CLOSE_BRACKET 
            {
                ArrayIndex RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Expression> value();
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(a,e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array_brackets",26, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // assignment_lhs_array ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",27, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // assignment_lhs_array ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                String s = CUP$Parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",27, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // assignment_lhs_array ::= IDENTIFIER 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                String i = CUP$Parser$stack.peek().<String> value();
                 RESULT = new Identifier(i); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",27, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // assignment_lhs_array ::= assignment_lhs_array_brackets 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                ArrayIndex a = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_array",27, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // assignment_lhs ::= IDENTIFIER 
            {
                Assignable RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                String id = CUP$Parser$stack.peek().<String> value();
                 RESULT = new Identifier(id); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",28, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // assignment_lhs ::= assignment_lhs_array_brackets 
            {
                Assignable RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                ArrayIndex a = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",28, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // assignment_lhs ::= typed_declaration_no_size 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",28, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // assignment_lhs ::= function_call 
            {
                Assignable RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",28, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",28, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // declaration_assignment_lhs ::= typed_declaration_no_size 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // declaration_assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",29, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA multiple_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dlleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dlright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dllleft = CUP$Parser$stack.peek().left;
                int dllright = CUP$Parser$stack.peek().right;
                List<Assignable> dll = CUP$Parser$stack.peek().<List<Assignable>> value();
                 dll.add(0, dl); RESULT = dll; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",30, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA declaration_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dl1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dl1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dl2left = CUP$Parser$stack.peek().left;
                int dl2right = CUP$Parser$stack.peek().right;
                Assignable dl2 = CUP$Parser$stack.peek().<Assignable> value();
                 LinkedList<Assignable> lst = new LinkedList<Assignable>(Arrays.asList(dl2)); lst.add(0, dl1); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",30, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // assignment ::= assignment_lhs GETS expression 
            {
                Assignment RESULT = null;
                int alleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int alright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable al = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Assignable> lst = new LinkedList<>(); lst.add(0, al); RESULT = new Assignment(lst, e); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",31, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // assignment ::= multiple_assignment_lhs GETS function_call 
            {
                Assignment RESULT = null;
                int allleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int allright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                List<Assignable> all = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<List<Assignable>> value();
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = new Assignment(all, fc); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",31, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b, Optional.empty()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block ELSE block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<Expression> value();
                int b1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int b1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Block b1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Block> value();
                int b2left = CUP$Parser$stack.peek().left;
                int b2right = CUP$Parser$stack.peek().right;
                Block b2 = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b1, Optional.of(b2)); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // while_statement ::= WHILE OPEN_PAREN expression CLOSE_PAREN block 
            {
                WhileStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new WhileStatement(e,b); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",33, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // return_statement ::= RETURN expression_list 
            {
                ReturnStatement RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 RESULT = new ReturnStatement(lst); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",34, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // statement_no_semicolon ::= if_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                IfStatement s = CUP$Parser$stack.peek().<IfStatement> value();
                 RESULT = s; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // statement_no_semicolon ::= while_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                WhileStatement s = CUP$Parser$stack.peek().<WhileStatement> value();
                 RESULT = s; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // statement_no_semicolon ::= procedure_call 
            {
                Statement RESULT = null;
                int pcleft = CUP$Parser$stack.peek().left;
                int pcright = CUP$Parser$stack.peek().right;
                ProcedureCall pc = CUP$Parser$stack.peek().<ProcedureCall> value();
                 RESULT = pc; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // statement_no_semicolon ::= typed_declaration 
            {
                Statement RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // statement_no_semicolon ::= assignment 
            {
                Statement RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Assignment a = CUP$Parser$stack.peek().<Assignment> value();
                 RESULT = a; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // statement ::= statement_no_semicolon 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",37, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // statement ::= statement_no_semicolon SEMICOLON 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int sright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Statement s = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Statement> value();
                 RESULT = s; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",37, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // function_block ::= OPEN_BRACE block_list return_statement CLOSE_BRACE 
            {
                FunctionBlock RESULT = null;
                int blleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int blright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                BlockList bl = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<BlockList> value();
                int rleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int rright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                ReturnStatement r = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<ReturnStatement> value();
                 RESULT = new FunctionBlock(bl, r); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_block",45, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // function_block ::= OPEN_BRACE block_list return_statement SEMICOLON CLOSE_BRACE 
            {
                FunctionBlock RESULT = null;
                int blleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int blright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                BlockList bl = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<BlockList> value();
                int rleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int rright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                ReturnStatement r = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<ReturnStatement> value();
                 RESULT = new FunctionBlock(bl,r); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_block",45, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // function_block ::= OPEN_BRACE function_block CLOSE_BRACE 
            {
                FunctionBlock RESULT = null;
                int fbleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fbright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                FunctionBlock fb = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<FunctionBlock> value();
                 RESULT = fb; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_block",45, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // function_block ::= OPEN_BRACE function_block CLOSE_BRACE SEMICOLON 
            {
                FunctionBlock RESULT = null;
                int fbleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fbright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                FunctionBlock fb = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<FunctionBlock> value();
                 RESULT = fb; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_block",45, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // block ::= OPEN_BRACE block_list CLOSE_BRACE 
            {
                Block RESULT = null;
                int blleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int blright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList bl = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 RESULT = bl; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",35, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // block ::= function_block 
            {
                Block RESULT = null;
                int fbleft = CUP$Parser$stack.peek().left;
                int fbright = CUP$Parser$stack.peek().right;
                FunctionBlock fb = CUP$Parser$stack.peek().<FunctionBlock> value();
                 RESULT = fb; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",35, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // block ::= statement 
            {
                Block RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",35, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // block_list ::= block block_list 
            {
                BlockList RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Block b = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Block> value();
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 bl.getBlockList().add(0, b); RESULT = bl; RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",36, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // block_list ::= empty 
            {
                BlockList RESULT = null;
                 RESULT = new BlockList(new LinkedList<Block>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",36, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // function_declaration_return_types ::= var_type COMMA function_declaration_return_types 
            {
                List<VariableType> RESULT = null;
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                VariableType t = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<VariableType> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<VariableType> lst = CUP$Parser$stack.peek().<List<VariableType>> value();
                 lst.add(0,t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_return_types",39, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // function_declaration_return_types ::= var_type 
            {
                List<VariableType> RESULT = null;
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                VariableType t = CUP$Parser$stack.peek().<VariableType> value();
                 List<VariableType> lst = new LinkedList<>(); lst.add(0, t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_return_types",39, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // function_declaration_argument_single ::= IDENTIFIER COLON var_type 
            {
                SimpleEntry<Identifier,VariableType> RESULT = null;
                int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int iright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                String i = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<String> value();
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                VariableType t = CUP$Parser$stack.peek().<VariableType> value();
                 RESULT = new SimpleEntry<Identifier, VariableType>(new Identifier(i), t); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_single",40, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // function_declaration_argument_list ::= function_declaration_argument_single COMMA function_declaration_argument_list 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int fdasleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fdasright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                SimpleEntry<Identifier,VariableType> fdas = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<SimpleEntry<Identifier,VariableType>> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<SimpleEntry<Identifier,VariableType>> lst = CUP$Parser$stack.peek().<List<SimpleEntry<Identifier,VariableType>>> value();
                 lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",41, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // function_declaration_argument_list ::= function_declaration_argument_single 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int fdasleft = CUP$Parser$stack.peek().left;
                int fdasright = CUP$Parser$stack.peek().right;
                SimpleEntry<Identifier,VariableType> fdas = CUP$Parser$stack.peek().<SimpleEntry<Identifier,VariableType>> value();
                 List<SimpleEntry<Identifier, VariableType>> lst = new LinkedList<>(); lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // function_declaration_argument ::= function_declaration_argument_list 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<SimpleEntry<Identifier,VariableType>> lst = CUP$Parser$stack.peek().<List<SimpleEntry<Identifier,VariableType>>> value();
                 RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",42, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // function_declaration_argument ::= empty 
            {
                List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",42, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // function_declaration ::= IDENTIFIER OPEN_PAREN function_declaration_argument CLOSE_PAREN COLON function_declaration_return_types function_block 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-6).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-6).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-6).<String> value();
                int argPairsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int argPairsright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                List<SimpleEntry<Identifier,VariableType>> argPairs = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<List<SimpleEntry<Identifier,VariableType>>> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<VariableType> t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<VariableType>> value();
                int fbleft = CUP$Parser$stack.peek().left;
                int fbright = CUP$Parser$stack.peek().right;
                FunctionBlock fb = CUP$Parser$stack.peek().<FunctionBlock> value();
                 List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(new Identifier(id), new FunctionType(argTypes, new VariableTypeList(t)), args, fb); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",43, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // function_declaration ::= IDENTIFIER OPEN_PAREN function_declaration_argument CLOSE_PAREN procedure_block 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<String> value();
                int argPairsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int argPairsright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                List<SimpleEntry<Identifier,VariableType>> argPairs = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<List<SimpleEntry<Identifier,VariableType>>> value();
                int fbleft = CUP$Parser$stack.peek().left;
                int fbright = CUP$Parser$stack.peek().right;
                ProcedureBlock fb = CUP$Parser$stack.peek().<ProcedureBlock> value();
                 List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(new Identifier(id), new FunctionType(argTypes, new VariableTypeList(new LinkedList<>())), args, fb); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",43, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // function_declaration_list ::= function_declaration function_declaration_list 
            {
                List<FunctionDeclaration> RESULT = null;
                int fdleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fdright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                FunctionDeclaration fd = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<FunctionDeclaration> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<FunctionDeclaration> lst = CUP$Parser$stack.peek().<List<FunctionDeclaration>> value();
                 lst.add(0, fd); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_list",44, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // function_declaration_list ::= function_declaration 
            {
                List<FunctionDeclaration> RESULT = null;
                int fdleft = CUP$Parser$stack.peek().left;
                int fdright = CUP$Parser$stack.peek().right;
                FunctionDeclaration fd = CUP$Parser$stack.peek().<FunctionDeclaration> value();
                 List<FunctionDeclaration> lst = new LinkedList<FunctionDeclaration>(); lst.add(0,fd); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_list",44, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // procedure_block ::= OPEN_BRACE block_list CLOSE_BRACE 
            {
                ProcedureBlock RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList b = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 RESULT = new ProcedureBlock(b); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_block",46, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // procedure_block ::= OPEN_BRACE block_list RETURN CLOSE_BRACE 
            {
                ProcedureBlock RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                BlockList b = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<BlockList> value();
                 RESULT = new ProcedureBlock(b); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_block",46, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // procedure_block ::= OPEN_BRACE block_list RETURN SEMICOLON CLOSE_BRACE 
            {
                ProcedureBlock RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                BlockList b = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<BlockList> value();
                 RESULT = new ProcedureBlock(b); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_block",46, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // procedure_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<String> value();
                int elistleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int elistright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> elist = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ProcedureCall(new Identifier(id), elist); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",47, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // procedure_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<String> value();
                 RESULT = new ProcedureCall(new Identifier(id), new LinkedList<Expression>()); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",47, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // use_block ::= USE IDENTIFIER use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<String> value();
                int uleft = CUP$Parser$stack.peek().left;
                int uright = CUP$Parser$stack.peek().right;
                List<UseStatement> u = CUP$Parser$stack.peek().<List<UseStatement>> value();
                 u.add(0, new UseStatement(new Identifier(id))); RESULT = u; RESULT.get(0).setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // use_block ::= USE IDENTIFIER SEMICOLON use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<String> value();
                int uleft = CUP$Parser$stack.peek().left;
                int uright = CUP$Parser$stack.peek().right;
                List<UseStatement> u = CUP$Parser$stack.peek().<List<UseStatement>> value();
                 u.add(0, new UseStatement(new Identifier(id))); RESULT = u; RESULT.get(0).setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // use_block ::= empty 
            {
                List<UseStatement> RESULT = null;
                 RESULT = new LinkedList<UseStatement>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // program ::= use_block function_declaration_list 
            {
                Program RESULT = null;
                int uleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int uright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<UseStatement> u = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<UseStatement>> value();
                int lleft = CUP$Parser$stack.peek().left;
                int lright = CUP$Parser$stack.peek().right;
                List<FunctionDeclaration> l = CUP$Parser$stack.peek().<List<FunctionDeclaration>> value();
                 RESULT = new Program(u,l); RESULT.setLocation(parser.cur_token); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // program ::= error 
            {
                Program RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$Parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                           CUP$Parser$act_num,
                           CUP$Parser$parser,
                           CUP$Parser$stack,
                           CUP$Parser$top);
    }
}

}
