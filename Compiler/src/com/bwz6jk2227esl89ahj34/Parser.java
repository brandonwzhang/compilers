
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package com.bwz6jk2227esl89ahj34;

import com.AST.*;
import java.util.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class Parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return ParserSym.class;
  }

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\003\002\000\002\015" +
    "\003\000\002\015\003\000\002\005\003\000\002\005\005" +
    "\000\002\006\003\000\002\006\005\000\002\007\003\000" +
    "\002\007\005\000\002\007\005\000\002\010\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\011\003\000\002\011\005\000\002\011\005" +
    "\000\002\012\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\013\003\000\002" +
    "\013\004\000\002\013\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\005\000\002\016\006\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\005\000\002\021\003\000\002\022\005\000\002\022" +
    "\004\000\002\017\005\000\002\017\005\000\002\023\003" +
    "\000\002\023\003\000\002\026\006\000\002\026\006\000" +
    "\002\027\005\000\002\027\005\000\002\030\005\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\005\000\002\025\003\000\002\031\005\000\002\032\006" +
    "\000\002\032\005\000\002\032\006\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\005\000\002\035\005\000\002\036" +
    "\005\000\002\036\005\000\002\037\007\000\002\037\011" +
    "\000\002\040\007\000\002\041\004\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\044\003\000\002\044\004\000\002\054" +
    "\006\000\002\042\005\000\002\042\003\000\002\042\003" +
    "\000\002\043\004\000\002\043\003\000\002\046\003\000" +
    "\002\046\003\000\002\047\005\000\002\050\005\000\002" +
    "\050\003\000\002\051\003\000\002\051\003\000\002\052" +
    "\011\000\002\052\007\000\002\053\004\000\002\053\003" +
    "\000\002\055\005\000\002\055\006\000\002\056\006\000" +
    "\002\056\005\000\002\004\005\000\002\004\003\000\002" +
    "\002\004\000\002\002\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\012\002\000\003\007\004\000\021\005\001" +
    "\002\000\006\002\000\004\015\001\002\000\004\004\012" +
    "\001\002\000\004\002\011\001\002\000\004\002\uff99\001" +
    "\002\000\006\002\uff9b\004\uff9b\001\002\000\004\002\001" +
    "\001\002\000\010\002\000\004\000\021\005\001\002\000" +
    "\006\002\uff9c\004\uff9c\001\002\000\004\002\uff9a\001\002" +
    "\000\004\044\021\001\002\000\004\002\uffa1\001\002\000" +
    "\006\002\000\004\015\001\002\000\004\002\uffa2\001\002" +
    "\000\006\004\024\045\000\001\002\000\004\045\043\001" +
    "\002\000\004\045\uffa6\001\002\000\004\050\031\001\002" +
    "\000\006\045\uffa7\051\027\001\002\000\004\045\uffa5\001" +
    "\002\000\004\004\024\001\002\000\004\045\uffa8\001\002" +
    "\000\006\012\036\013\033\001\002\000\010\042\041\045" +
    "\uffab\051\uffab\001\002\000\034\004\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\020\uffd4\041\uffd4\042\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002\000\010\042\037" +
    "\045\uffaa\051\uffaa\001\002\000\006\045\uffa9\051\uffa9\001" +
    "\002\000\034\004\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5" +
    "\041\uffd5\042\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\001\002\000\004\043\040\001\002\000\010" +
    "\042\uffd0\045\uffd0\051\uffd0\001\002\000\004\043\042\001" +
    "\002\000\010\042\uffd1\045\uffd1\051\uffd1\001\002\000\006" +
    "\046\044\050\046\001\002\000\020\004\221\014\224\016" +
    "\217\020\000\046\214\047\000\053\203\001\002\000\006" +
    "\002\uffa3\004\uffa3\001\002\000\006\012\036\013\033\001" +
    "\002\000\004\046\202\001\002\000\032\004\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\020\uffcd\041\uffcd\042\176\046\uffcd\047" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\001\002\000\032\004\uffce" +
    "\014\uffce\015\uffce\016\uffce\020\uffce\041\uffce\042\060\046" +
    "\uffce\047\uffce\051\uffce\052\uffce\053\uffce\001\002\000\032" +
    "\004\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\041\uffcc\042" +
    "\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002" +
    "\000\010\042\055\046\uffca\051\054\001\002\000\006\012" +
    "\036\013\033\001\002\000\004\043\056\001\002\000\032" +
    "\004\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf\041\uffcf\042" +
    "\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002" +
    "\000\004\046\uffcb\001\002\000\030\004\106\005\104\006" +
    "\067\007\077\010\076\011\105\022\073\024\100\030\101" +
    "\044\102\046\103\001\002\000\036\004\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\020\uffdc\036\133\042\uffdc\043\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000" +
    "\040\004\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\035\136" +
    "\036\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\001\002\000\006\042\116\043\175" +
    "\001\002\000\044\004\ufffb\014\ufffb\015\ufffb\016\ufffb\020" +
    "\ufffb\035\ufffb\036\ufffb\037\140\040\141\042\ufffb\043\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\051\ufffb\052\ufffb\053\ufffb\001" +
    "\002\000\054\004\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9" +
    "\031\144\032\145\033\146\034\143\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\042\ufff9\043\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\001\002\000\060\004\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\020\ufff6\023\151\024\150\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\042\ufff6\043\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\001\002\000\034\004\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\020\uffe0\042\uffe0\043\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000\034\004" +
    "\uffde\014\uffde\015\uffde\016\uffde\020\uffde\042\uffde\043\uffde" +
    "\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde\053\uffde\001" +
    "\002\000\070\004\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1" +
    "\023\ufff1\024\ufff1\025\153\026\156\027\155\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\042\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\154\001\002\000\070\004\uffee\014\uffee" +
    "\015\uffee\016\uffee\020\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee\045\uffee\046" +
    "\uffee\047\uffee\051\uffee\052\uffee\053\uffee\054\uffee\001\002" +
    "\000\004\044\172\001\002\000\070\004\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\020\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\001\002\000" +
    "\070\004\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\054\uffe9\001\002\000\070\004\uffff\014\uffff\015\uffff" +
    "\016\uffff\020\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\042\uffff\043\uffff\045\uffff\046\uffff\047" +
    "\uffff\051\uffff\052\uffff\053\uffff\054\uffff\001\002\000\070" +
    "\004\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\001\002\000\012\007\077\010\076\011\105\044" +
    "\102\001\002\000\012\007\077\010\076\011\105\044\102" +
    "\001\002\000\016\007\077\010\076\011\105\024\100\030" +
    "\101\044\102\001\002\000\030\004\106\005\104\006\067" +
    "\007\077\010\076\011\105\022\073\024\100\030\101\044" +
    "\102\046\103\001\002\000\034\004\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\001\002\000\070\004\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\020\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\042\ufffe\043\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\001\002\000\036\004\uffe2\014\uffe2\015\uffe2\016\uffe2\020" +
    "\uffe2\042\uffe2\043\uffe2\044\111\045\uffe2\046\uffe2\047\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\001\002\000\034\004\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\020\uffdd\042\uffdd\043\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\001\002\000" +
    "\034\004\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\042\uffdf" +
    "\043\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\001\002\000\032\004\106\005\104\006\067\007\077" +
    "\010\076\011\105\022\073\024\100\030\101\044\102\045" +
    "\114\046\103\001\002\000\004\045\122\001\002\000\012" +
    "\042\116\045\uffda\047\uffda\051\115\001\002\000\034\004" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\042\uffc7\043\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\001" +
    "\002\000\030\004\106\005\104\006\067\007\077\010\076" +
    "\011\105\022\073\024\100\030\101\044\102\046\103\001" +
    "\002\000\030\004\106\005\104\006\067\007\077\010\076" +
    "\011\105\022\073\024\100\030\101\044\102\046\103\001" +
    "\002\000\006\042\116\043\120\001\002\000\034\004\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\020\uffe3\042\uffe3\043\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002" +
    "\000\006\045\uffdb\047\uffdb\001\002\000\034\004\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\020\uffc8\042\uffc8\043\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\001\002\000" +
    "\004\047\131\001\002\000\004\047\130\001\002\000\010" +
    "\042\116\047\uffda\051\126\001\002\000\032\004\106\005" +
    "\104\006\067\007\077\010\076\011\105\022\073\024\100" +
    "\030\101\044\102\046\103\047\uffd8\001\002\000\004\047" +
    "\uffd9\001\002\000\034\004\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\020\uffd6\042\uffd6\043\uffd6\045\uffd6\046\uffd6\047\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\001\002\000\034\004\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\020\uffd7\042\uffd7\043\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000\006" +
    "\036\133\045\134\001\002\000\016\007\077\010\076\011" +
    "\105\024\100\030\101\044\102\001\002\000\070\004\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\020\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\001\002\000\040\004\ufffc\014\ufffc\015\ufffc\016\ufffc\020" +
    "\ufffc\035\136\036\ufffc\042\ufffc\043\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002\000\016\007" +
    "\077\010\076\011\105\024\100\030\101\044\102\001\002" +
    "\000\044\004\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa\035" +
    "\ufffa\036\ufffa\037\140\040\141\042\ufffa\043\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000" +
    "\016\007\077\010\076\011\105\024\100\030\101\044\102" +
    "\001\002\000\016\007\077\010\076\011\105\024\100\030" +
    "\101\044\102\001\002\000\054\004\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\020\ufff7\031\144\032\145\033\146\034\143\035" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002\000" +
    "\016\007\077\010\076\011\105\024\100\030\101\044\102" +
    "\001\002\000\016\007\077\010\076\011\105\024\100\030" +
    "\101\044\102\001\002\000\016\007\077\010\076\011\105" +
    "\024\100\030\101\044\102\001\002\000\016\007\077\010" +
    "\076\011\105\024\100\030\101\044\102\001\002\000\060" +
    "\004\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\023\151\024" +
    "\150\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\042\ufff3\043\ufff3\045\ufff3\046\ufff3\047" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\001\002\000\016\007\077" +
    "\010\076\011\105\024\100\030\101\044\102\001\002\000" +
    "\016\007\077\010\076\011\105\024\100\030\101\044\102" +
    "\001\002\000\070\004\ufff0\014\ufff0\015\ufff0\016\ufff0\020" +
    "\ufff0\023\ufff0\024\ufff0\025\153\026\156\027\155\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\042\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\154\001\002\000\016\007\077\010" +
    "\076\011\105\024\100\030\101\044\102\001\002\000\016" +
    "\007\077\010\076\011\105\024\100\030\101\044\102\001" +
    "\002\000\016\007\077\010\076\011\105\024\100\030\101" +
    "\044\102\001\002\000\016\007\077\010\076\011\105\024" +
    "\100\030\101\044\102\001\002\000\070\004\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\020\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\001\002" +
    "\000\070\004\uffea\014\uffea\015\uffea\016\uffea\020\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042" +
    "\uffea\043\uffea\045\uffea\046\uffea\047\uffea\051\uffea\052\uffea" +
    "\053\uffea\054\uffea\001\002\000\070\004\uffec\014\uffec\015" +
    "\uffec\016\uffec\020\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\042\uffec\043\uffec\045\uffec\046\uffec" +
    "\047\uffec\051\uffec\052\uffec\053\uffec\054\uffec\001\002\000" +
    "\070\004\uffed\014\uffed\015\uffed\016\uffed\020\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\042\uffed" +
    "\043\uffed\045\uffed\046\uffed\047\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\001\002\000\070\004\uffef\014\uffef\015\uffef" +
    "\016\uffef\020\uffef\023\uffef\024\uffef\025\153\026\156\027" +
    "\155\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\042\uffef\043\uffef\045\uffef\046\uffef\047" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\154\001\002\000\060" +
    "\004\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\023\151\024" +
    "\150\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\042\ufff4\043\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\001\002\000\060\004\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\020\ufff5\023\151\024\150\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5\047\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\001\002\000\060\004\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\020\ufff2\023\151\024\150\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\042\ufff2\043\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\001\002\000\054\004\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\020\ufff8\031\144\032\145\033\146\034\143\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\042\ufff8\043\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\051\ufff8\052\ufff8\053\ufff8\001\002\000" +
    "\070\004\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8" +
    "\043\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\001\002\000\070\004\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\020\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\001\002\000\030" +
    "\004\106\005\104\006\067\007\077\010\076\011\105\022" +
    "\073\024\100\030\101\044\102\046\103\001\002\000\006" +
    "\042\116\045\174\001\002\000\034\004\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\020\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\051\uffc6\052\uffc6\053\uffc6\001\002\000\032\004" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\041\uffd2\042\uffd2" +
    "\046\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002\000" +
    "\030\004\106\005\104\006\067\007\077\010\076\011\105" +
    "\022\073\024\100\030\101\044\102\046\103\001\002\000" +
    "\006\042\116\043\200\001\002\000\032\004\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\020\uffd3\041\uffd3\042\uffd3\046\uffd3\047" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\001\002\000\006\002\uffa4" +
    "\004\uffa4\001\002\000\016\004\221\014\224\016\217\020" +
    "\000\046\214\053\203\001\002\000\006\041\uffc3\051\uffc1" +
    "\001\002\000\004\051\263\001\002\000\024\004\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\020\uffaf\046\uffaf\047\uffaf\052\uffaf" +
    "\053\uffaf\001\002\000\024\004\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\046\uffb4\047\uffb4\052\uffb4\053\uffb4\001\002" +
    "\000\024\004\uffb6\014\uffb6\015\uffb6\016\uffb6\020\uffb6\046" +
    "\uffb6\047\uffb6\052\uffb6\053\uffb6\001\002\000\004\041\260" +
    "\001\002\000\004\041\256\001\002\000\006\020\uffac\047" +
    "\uffac\001\002\000\024\004\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\020\uffb3\046\uffb3\047\uffb3\052\255\053\uffb3\001\002\000" +
    "\020\004\221\014\224\016\217\020\000\046\214\047\000" +
    "\053\203\001\002\000\024\004\uffae\014\uffae\015\uffae\016" +
    "\uffae\020\uffae\046\uffae\047\uffae\052\uffae\053\uffae\001\002" +
    "\000\024\004\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8\046" +
    "\uffb8\047\uffb8\052\uffb8\053\uffb8\001\002\000\004\044\247" +
    "\001\002\000\020\004\221\014\224\016\217\020\000\046" +
    "\214\047\000\053\203\001\002\000\010\041\uffc5\044\240" +
    "\050\241\001\002\000\004\020\234\001\002\000\024\004" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\046\uffb7\047\uffb7" +
    "\052\uffb7\053\uffb7\001\002\000\004\044\226\001\002\000" +
    "\030\004\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\041\uffc4" +
    "\046\uffb5\047\uffb5\051\uffc2\052\uffb5\053\uffb5\001\002\000" +
    "\030\004\106\005\104\006\067\007\077\010\076\011\105" +
    "\022\073\024\100\030\101\044\102\046\103\001\002\000" +
    "\006\042\116\045\230\001\002\000\014\004\221\014\224" +
    "\016\217\046\214\053\203\001\002\000\024\004\uffbc\014" +
    "\uffbc\015\232\016\uffbc\020\uffbc\046\uffbc\047\uffbc\052\uffbc" +
    "\053\uffbc\001\002\000\014\004\221\014\224\016\217\046" +
    "\214\053\203\001\002\000\024\004\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\020\uffbb\046\uffbb\047\uffbb\052\uffbb\053\uffbb\001" +
    "\002\000\030\004\106\005\104\006\067\007\077\010\076" +
    "\011\105\022\073\024\100\030\101\044\102\046\103\001" +
    "\002\000\004\047\236\001\002\000\026\002\uffb1\004\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\020\uffb1\046\uffb1\047\uffb1\052" +
    "\uffb1\053\uffb1\001\002\000\004\047\uffb9\001\002\000\032" +
    "\004\106\005\104\006\067\007\077\010\076\011\105\022" +
    "\073\024\100\030\101\044\102\045\244\046\103\001\002" +
    "\000\006\012\036\013\033\001\002\000\032\004\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\020\uffc9\041\uffc9\042\055\046\uffc9" +
    "\047\uffc9\051\uffc9\052\uffc9\053\uffc9\001\002\000\004\045" +
    "\245\001\002\000\024\004\uff9d\014\uff9d\015\uff9d\016\uff9d" +
    "\020\uff9d\046\uff9d\047\uff9d\052\uff9d\053\uff9d\001\002\000" +
    "\024\004\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e\046\uff9e" +
    "\047\uff9e\052\uff9e\053\uff9e\001\002\000\006\020\uffad\047" +
    "\uffad\001\002\000\030\004\106\005\104\006\067\007\077" +
    "\010\076\011\105\022\073\024\100\030\101\044\102\046" +
    "\103\001\002\000\006\042\116\045\251\001\002\000\014" +
    "\004\221\014\224\016\217\046\214\053\203\001\002\000" +
    "\024\004\uffba\014\uffba\015\uffba\016\uffba\020\uffba\046\uffba" +
    "\047\uffba\052\uffba\053\uffba\001\002\000\006\020\234\047" +
    "\254\001\002\000\024\004\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\020\uffb0\046\uffb0\047\uffb0\052\uffb0\053\uffb0\001\002\000" +
    "\024\004\uffb2\014\uffb2\015\uffb2\016\uffb2\020\uffb2\046\uffb2" +
    "\047\uffb2\052\uffb2\053\uffb2\001\002\000\030\004\106\005" +
    "\104\006\067\007\077\010\076\011\105\022\073\024\100" +
    "\030\101\044\102\046\103\001\002\000\026\004\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\020\uffbe\042\116\046\uffbe\047\uffbe" +
    "\052\uffbe\053\uffbe\001\002\000\006\004\262\022\073\001" +
    "\002\000\024\004\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd" +
    "\046\uffbd\047\uffbd\052\uffbd\053\uffbd\001\002\000\004\044" +
    "\111\001\002\000\006\004\266\053\264\001\002\000\006" +
    "\041\uffc1\051\uffc1\001\002\000\006\041\uffbf\051\263\001" +
    "\002\000\004\050\241\001\002\000\004\041\uffc0\001\002" +
    "\000\006\041\uffc2\051\uffc2\001\002\000\006\020\272\047" +
    "\273\001\002\000\004\047\274\001\002\000\006\002\uffa0" +
    "\004\uffa0\001\002\000\006\002\uff9f\004\uff9f\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\010\002\005\003\007\004\003\001\001\000" +
    "\010\003\015\052\016\053\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\007\004\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\015\052\016\053\017\001\001\000\002" +
    "\001\001\000\012\003\025\047\024\050\022\051\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\024\050" +
    "\027\001\001\000\002\001\001\000\010\023\033\027\031" +
    "\046\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\044\001\001\000\036\003\211\031\224" +
    "\033\210\034\203\035\207\036\205\037\215\040\222\042" +
    "\217\043\270\044\214\045\212\054\204\056\206\001\001" +
    "\000\002\001\001\000\014\023\050\024\052\025\046\026" +
    "\047\030\051\001\001\000\004\054\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\050\024\052\025\056\026\047\030\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\060\006\061\007\063\010\064\011\065" +
    "\012\070\013\071\014\074\015\073\016\107\017\106\020" +
    "\062\032\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\170\015\073\001\001\000\006\014\167\015" +
    "\073\001\001\000\024\005\131\006\061\007\063\010\064" +
    "\011\065\012\070\013\071\014\074\015\073\001\001\000" +
    "\040\005\060\006\061\007\063\010\064\011\065\012\070" +
    "\013\071\014\074\015\073\016\107\017\106\020\124\021" +
    "\122\022\123\032\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\060\006\061\007\063\010\064\011\065" +
    "\012\070\013\071\014\074\015\073\016\107\017\106\020" +
    "\112\021\111\032\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\060\006\061\007" +
    "\063\010\064\011\065\012\070\013\071\014\074\015\073" +
    "\016\107\017\106\020\112\021\120\032\067\001\001\000" +
    "\034\005\060\006\061\007\063\010\064\011\065\012\070" +
    "\013\071\014\074\015\073\016\107\017\106\020\116\032" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\060\006\061\007\063" +
    "\010\064\011\065\012\070\013\071\014\074\015\073\016" +
    "\107\017\106\020\124\021\120\022\126\032\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\134\007\063\010\064\011\065" +
    "\012\070\013\071\014\074\015\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\136\010\064\011\065" +
    "\012\070\013\071\014\074\015\073\001\001\000\002\001" +
    "\001\000\016\010\166\011\065\012\070\013\071\014\074" +
    "\015\073\001\001\000\016\010\141\011\065\012\070\013" +
    "\071\014\074\015\073\001\001\000\002\001\001\000\014" +
    "\011\165\012\070\013\071\014\074\015\073\001\001\000" +
    "\014\011\164\012\070\013\071\014\074\015\073\001\001" +
    "\000\014\011\163\012\070\013\071\014\074\015\073\001" +
    "\001\000\014\011\146\012\070\013\071\014\074\015\073" +
    "\001\001\000\002\001\001\000\012\012\162\013\071\014" +
    "\074\015\073\001\001\000\012\012\151\013\071\014\074" +
    "\015\073\001\001\000\002\001\001\000\010\013\161\014" +
    "\074\015\073\001\001\000\010\013\160\014\074\015\073" +
    "\001\001\000\010\013\157\014\074\015\073\001\001\000" +
    "\010\013\156\014\074\015\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\060\006\061\007\063\010\064\011\065" +
    "\012\070\013\071\014\074\015\073\016\107\017\106\020" +
    "\172\032\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\060\006\061\007\063\010" +
    "\064\011\065\012\070\013\071\014\074\015\073\016\107" +
    "\017\106\020\176\032\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\211\031\224" +
    "\033\210\034\203\035\207\036\205\037\215\040\222\042" +
    "\217\043\221\044\214\045\212\054\204\056\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\211\031\224\033\210\034\203\035\207\036\205\037\215" +
    "\040\222\042\217\043\252\044\214\045\212\054\204\056" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\211\031\224\033\210\034\203\035" +
    "\207\036\205\037\215\040\222\042\217\043\245\044\214" +
    "\045\212\054\204\056\206\001\001\000\002\001\001\000" +
    "\004\041\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\060\006\061\007\063\010" +
    "\064\011\065\012\070\013\071\014\074\015\073\016\107" +
    "\017\106\020\226\032\067\001\001\000\002\001\001\000" +
    "\032\031\224\033\210\034\203\035\207\036\205\037\215" +
    "\040\222\042\230\044\214\045\212\054\204\056\206\001" +
    "\001\000\002\001\001\000\032\031\224\033\210\034\203" +
    "\035\207\036\205\037\215\040\222\042\232\044\214\045" +
    "\212\054\204\056\206\001\001\000\002\001\001\000\036" +
    "\005\060\006\061\007\063\010\064\011\065\012\070\013" +
    "\071\014\074\015\073\016\107\017\106\020\112\021\236" +
    "\032\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\060\006\061\007\063\010\064" +
    "\011\065\012\070\013\071\014\074\015\073\016\107\017" +
    "\106\020\112\021\242\032\067\001\001\000\012\023\050" +
    "\024\241\026\047\030\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\060\006\061\007\063\010\064\011" +
    "\065\012\070\013\071\014\074\015\073\016\107\017\106" +
    "\020\247\032\067\001\001\000\002\001\001\000\032\031" +
    "\224\033\210\034\203\035\207\036\205\037\215\040\222" +
    "\042\251\044\214\045\212\054\204\056\206\001\001\000" +
    "\002\001\001\000\004\041\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\060\006\061\007\063\010" +
    "\064\011\065\012\070\013\071\014\074\015\073\016\107" +
    "\017\106\020\256\032\067\001\001\000\002\001\001\000" +
    "\004\032\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\267\034\264\035\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
    private final Parser parser;

    /** Constructor */
    CUP$Parser$actions(Parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 104. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int start_valright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Program start_val = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // empty ::= 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",1, CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // boolean_literal ::= TRUE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(true); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",11, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // boolean_literal ::= FALSE 
            {
                BooleanLiteral RESULT = null;
                 RESULT = new BooleanLiteral(false); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",11, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // A ::= B 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = b; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",3, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // A ::= A OR B 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Expression b = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.OR, a,b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",3, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // B ::= C 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = c; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",4, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // B ::= B AND C 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression b = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Expression c = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.AND, b,c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",4, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // C ::= D 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = d; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",5, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // C ::= C EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.EQUAL, c,d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",5, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // C ::= C NOT_EQUAL D 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int cright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression c = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int dleft = CUP$Parser$stack.peek().left;
                int dright = CUP$Parser$stack.peek().right;
                Expression d = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.NOT_EQUAL,c,d); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",5, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // D ::= E 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = e; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",6, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // D ::= D LT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LT, d,e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",6, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // D ::= D LEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.LEQ, d,e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",6, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // D ::= D GT E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GT, d,e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",6, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // D ::= D GEQ E 
            {
                Expression RESULT = null;
                int dleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression d = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.GEQ, d,e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",6, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // E ::= F 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = f;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",7, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // E ::= E PLUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.PLUS, e,f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",7, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // E ::= E MINUS F 
            {
                Expression RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int fleft = CUP$Parser$stack.peek().left;
                int fright = CUP$Parser$stack.peek().right;
                Expression f = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MINUS,e,f); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",7, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // F ::= G 
            {
                Expression RESULT = null;
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = g; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // F ::= F TIMES G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.TIMES, f,g); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // F ::= F HIGH_MULT G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.HIGH_MULT, f,g); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // F ::= F DIVIDE G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.DIVIDE, f,g); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // F ::= F MODULO G 
            {
                Expression RESULT = null;
                int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression f = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int gleft = CUP$Parser$stack.peek().left;
                int gright = CUP$Parser$stack.peek().right;
                Expression g = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Binary(BinaryOperator.MODULO, f,g); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // G ::= H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = h; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",9, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // G ::= NOT H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.NOT, h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",9, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // G ::= MINUS H 
            {
                Expression RESULT = null;
                int hleft = CUP$Parser$stack.peek().left;
                int hright = CUP$Parser$stack.peek().right;
                Expression h = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = new Unary(UnaryOperator.MINUS, h); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",9, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // H ::= boolean_literal 
            {
                Expression RESULT = null;
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                BooleanLiteral b = CUP$Parser$stack.peek().<BooleanLiteral> value();
                 RESULT = b; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",10, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // H ::= INTEGER_LITERAL 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                String i = CUP$Parser$stack.peek().<String> value();
                 RESULT = new IntegerLiteral(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",10, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // H ::= OPEN_PAREN A CLOSE_PAREN 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression a = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = a; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",10, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // array_index ::= expression OPEN_BRACKET expression CLOSE_BRACKET 
            {
                ArrayIndex RESULT = null;
                int e1left = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int e1right = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                Expression e1 = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<Expression> value();
                int e2left = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int e2right = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e2 = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayIndex(e1, e2); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_index",12, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // expression ::= IDENTIFIER 
            {
                Expression RESULT = null;
                int ileft = CUP$Parser$stack.peek().left;
                int iright = CUP$Parser$stack.peek().right;
                String i = CUP$Parser$stack.peek().<String> value();
                 RESULT = new Identifier(i); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // expression ::= STRING_LITERAL 
            {
                Expression RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                String s = CUP$Parser$stack.peek().<String> value();
                 RESULT = new StringLiteral(s); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // expression ::= CHARACTER_LITERAL 
            {
                Expression RESULT = null;
                int cleft = CUP$Parser$stack.peek().left;
                int cright = CUP$Parser$stack.peek().right;
                Character c = CUP$Parser$stack.peek().<Character> value();
                 RESULT = new CharacterLiteral(c); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // expression ::= array_index 
            {
                Expression RESULT = null;
                int aileft = CUP$Parser$stack.peek().left;
                int airight = CUP$Parser$stack.peek().right;
                ArrayIndex ai = CUP$Parser$stack.peek().<ArrayIndex> value();
                 RESULT = ai; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // expression ::= function_call 
            {
                Expression RESULT = null;
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = fc; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // expression ::= array_literal 
            {
                Expression RESULT = null;
                int alleft = CUP$Parser$stack.peek().left;
                int alright = CUP$Parser$stack.peek().right;
                ArrayLiteral al = CUP$Parser$stack.peek().<ArrayLiteral> value();
                 RESULT = al; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // expression ::= A 
            {
                Expression RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Expression a = CUP$Parser$stack.peek().<Expression> value();
                 RESULT = a; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // expression_list ::= expression COMMA expression_list 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",15, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // expression_list ::= expression 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",15, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // expression_list_trailing_comma ::= expression COMMA expression_list_trailing_comma 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",16, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // expression_list_trailing_comma ::= expression COMMA 
            {
                List<Expression> RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",16, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // array_literal ::= OPEN_BRACE expression_list CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",13, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // array_literal ::= OPEN_BRACE expression_list_trailing_comma CLOSE_BRACE 
            {
                ArrayLiteral RESULT = null;
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ArrayLiteral(lst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal",13, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // primitive_type ::= INT 
            {
                PrimitiveType RESULT = null;
                 RESULT = new IntegerType(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",17, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // primitive_type ::= BOOL 
            {
                PrimitiveType RESULT = null;
                 RESULT = new BooleanType(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",17, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // array_size_type ::= array_size_type OPEN_BRACKET expression CLOSE_BRACKET 
            {
                ArrayType RESULT = null;
                int asleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int asright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                ArrayType as = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<ArrayType> value();
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayType(as, Optional.of(e)); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",20, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // array_size_type ::= primitive_type OPEN_BRACKET expression CLOSE_BRACKET 
            {
                ArrayType RESULT = null;
                int ptleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int ptright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                PrimitiveType pt = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<PrimitiveType> value();
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 RESULT = new ArrayType(pt, Optional.of(e)); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_size_type",20, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // array_no_size_type ::= array_no_size_type OPEN_BRACKET CLOSE_BRACKET 
            {
                ArrayType RESULT = null;
                int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int aright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                ArrayType a = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<ArrayType> value();
                 RESULT = new ArrayType(a, Optional.empty()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",21, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // array_no_size_type ::= primitive_type OPEN_BRACKET CLOSE_BRACKET 
            {
                ArrayType RESULT = null;
                int pleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int pright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                PrimitiveType p = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<PrimitiveType> value();
                 RESULT = new ArrayType(p, Optional.empty()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_no_size_type",21, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // array_type ::= type OPEN_BRACKET CLOSE_BRACKET 
            {
                ArrayType RESULT = null;
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Type t = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Type> value();
                 RESULT = new ArrayType(t, Optional.empty()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",22, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // type ::= primitive_type 
            {
                Type RESULT = null;
                int ptleft = CUP$Parser$stack.peek().left;
                int ptright = CUP$Parser$stack.peek().right;
                PrimitiveType pt = CUP$Parser$stack.peek().<PrimitiveType> value();
                 RESULT = pt; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",18, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // type ::= array_size_type 
            {
                Type RESULT = null;
                int asleft = CUP$Parser$stack.peek().left;
                int asright = CUP$Parser$stack.peek().right;
                ArrayType as = CUP$Parser$stack.peek().<ArrayType> value();
                 RESULT = as; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",18, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // type ::= array_type 
            {
                Type RESULT = null;
                int aeleft = CUP$Parser$stack.peek().left;
                int aeright = CUP$Parser$stack.peek().right;
                ArrayType ae = CUP$Parser$stack.peek().<ArrayType> value();
                 RESULT = ae; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",18, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // types ::= type COMMA types 
            {
                List<Type> RESULT = null;
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Type t = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Type> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Type> lst = CUP$Parser$stack.peek().<List<Type>> value();
                 lst.add(0,t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",19, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // types ::= type 
            {
                List<Type> RESULT = null;
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                Type t = CUP$Parser$stack.peek().<Type> value();
                 List<Type> lst = new LinkedList<>(); lst.add(0, t); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",19, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // typed_declaration ::= IDENTIFIER COLON type 
            {
                TypedDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<String> value();
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                Type t = CUP$Parser$stack.peek().<Type> value();
                 RESULT = new TypedDeclaration(new Identifier(id),t); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_declaration",23, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // function_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<String> value();
                int lstleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int lstright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> lst = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new FunctionCall(new Identifier(id), lst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",24, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // function_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<String> value();
                 RESULT = new FunctionCall(new Identifier(id), new LinkedList<Expression>()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",24, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // function_call ::= LENGTH OPEN_PAREN expression CLOSE_PAREN 
            {
                FunctionCall RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Expression> value();
                 List<Expression> lst = new LinkedList<>(); lst.add(0, e); RESULT = new FunctionCall(new Identifier("length"), lst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",24, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // assignment_lhs ::= IDENTIFIER 
            {
                Assignable RESULT = null;
                int idleft = CUP$Parser$stack.peek().left;
                int idright = CUP$Parser$stack.peek().right;
                String id = CUP$Parser$stack.peek().<String> value();
                 RESULT = new Identifier(id); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",25, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // assignment_lhs ::= typed_declaration 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",25, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",25, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // declaration_assignment_lhs ::= typed_declaration 
            {
                Assignable RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",26, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // declaration_assignment_lhs ::= UNDERSCORE 
            {
                Assignable RESULT = null;
                 RESULT = new Underscore(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_assignment_lhs",26, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA multiple_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dlleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dlright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dllleft = CUP$Parser$stack.peek().left;
                int dllright = CUP$Parser$stack.peek().right;
                List<Assignable> dll = CUP$Parser$stack.peek().<List<Assignable>> value();
                 dll.add(0, dl); RESULT = dll; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",27, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // multiple_assignment_lhs ::= declaration_assignment_lhs COMMA declaration_assignment_lhs 
            {
                List<Assignable> RESULT = null;
                int dl1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int dl1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable dl1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int dl2left = CUP$Parser$stack.peek().left;
                int dl2right = CUP$Parser$stack.peek().right;
                Assignable dl2 = CUP$Parser$stack.peek().<Assignable> value();
                 LinkedList<Assignable> lst = new LinkedList<Assignable>(Arrays.asList(dl2)); lst.add(0, dl1); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignment_lhs",27, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // assignment ::= assignment_lhs GETS expression 
            {
                Assignment RESULT = null;
                int alleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int alright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Assignable al = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Assignable> value();
                int eleft = CUP$Parser$stack.peek().left;
                int eright = CUP$Parser$stack.peek().right;
                Expression e = CUP$Parser$stack.peek().<Expression> value();
                 List<Assignable> lst = new LinkedList<>(); lst.add(0, al); RESULT = new Assignment(lst, e); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",28, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // assignment ::= multiple_assignment_lhs GETS function_call 
            {
                Assignment RESULT = null;
                int allleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int allright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                List<Assignable> all = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<List<Assignable>> value();
                int fcleft = CUP$Parser$stack.peek().left;
                int fcright = CUP$Parser$stack.peek().right;
                FunctionCall fc = CUP$Parser$stack.peek().<FunctionCall> value();
                 RESULT = new Assignment(all, fc); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",28, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b, Optional.empty()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",29, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block ELSE block 
            {
                IfStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<Expression> value();
                int b1left = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int b1right = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Block b1 = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Block> value();
                int b2left = CUP$Parser$stack.peek().left;
                int b2right = CUP$Parser$stack.peek().right;
                Block b2 = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new IfStatement(e, b1, Optional.of(b2)); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",29, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // while_statement ::= WHILE OPEN_PAREN expression CLOSE_PAREN block 
            {
                WhileStatement RESULT = null;
                int eleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int eright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                Expression e = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<Expression> value();
                int bleft = CUP$Parser$stack.peek().left;
                int bright = CUP$Parser$stack.peek().right;
                Block b = CUP$Parser$stack.peek().<Block> value();
                 RESULT = new WhileStatement(e,b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",30, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // return_statement ::= RETURN expression_list 
            {
                ReturnStatement RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<Expression> lst = CUP$Parser$stack.peek().<List<Expression>> value();
                 RESULT = new ReturnStatement(lst); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",31, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // statement_no_semicolon ::= if_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                IfStatement s = CUP$Parser$stack.peek().<IfStatement> value();
                 RESULT = s; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",35, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // statement_no_semicolon ::= while_statement 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                WhileStatement s = CUP$Parser$stack.peek().<WhileStatement> value();
                 RESULT = s; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",35, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // statement_no_semicolon ::= procedure_call 
            {
                Statement RESULT = null;
                int pcleft = CUP$Parser$stack.peek().left;
                int pcright = CUP$Parser$stack.peek().right;
                ProcedureCall pc = CUP$Parser$stack.peek().<ProcedureCall> value();
                 RESULT = pc; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",35, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // statement_no_semicolon ::= typed_declaration 
            {
                Statement RESULT = null;
                int tdleft = CUP$Parser$stack.peek().left;
                int tdright = CUP$Parser$stack.peek().right;
                TypedDeclaration td = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 RESULT = td; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",35, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // statement_no_semicolon ::= assignment 
            {
                Statement RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                Assignment a = CUP$Parser$stack.peek().<Assignment> value();
                 RESULT = a; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",35, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // statement ::= statement_no_semicolon 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",34, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // statement ::= statement_no_semicolon SEMICOLON 
            {
                Statement RESULT = null;
                int sleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int sright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Statement s = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Statement> value();
                 RESULT = s; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",34, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // function_block ::= OPEN_BRACE block_list return_statement CLOSE_BRACE 
            {
                FunctionBlock RESULT = null;
                int blleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int blright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                BlockList bl = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<BlockList> value();
                int rleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int rright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                ReturnStatement r = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<ReturnStatement> value();
                 RESULT = new FunctionBlock(bl, r); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_block",42, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // block ::= OPEN_BRACE block_list CLOSE_BRACE 
            {
                Block RESULT = null;
                int blleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int blright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList bl = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 RESULT = bl; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",32, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // block ::= function_block 
            {
                Block RESULT = null;
                int fbleft = CUP$Parser$stack.peek().left;
                int fbright = CUP$Parser$stack.peek().right;
                FunctionBlock fb = CUP$Parser$stack.peek().<FunctionBlock> value();
                 RESULT = fb; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",32, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // block ::= statement 
            {
                Block RESULT = null;
                int sleft = CUP$Parser$stack.peek().left;
                int sright = CUP$Parser$stack.peek().right;
                Statement s = CUP$Parser$stack.peek().<Statement> value();
                 RESULT = s; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",32, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // block_list ::= block block_list 
            {
                BlockList RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                Block b = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<Block> value();
                int blleft = CUP$Parser$stack.peek().left;
                int blright = CUP$Parser$stack.peek().right;
                BlockList bl = CUP$Parser$stack.peek().<BlockList> value();
                 bl.getBlockList().add(0, b); RESULT = bl; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",33, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // block_list ::= empty 
            {
                BlockList RESULT = null;
                 RESULT = new BlockList(new LinkedList<Block>()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",33, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // function_declaration_argument_type ::= array_no_size_type 
            {
                Type RESULT = null;
                int aleft = CUP$Parser$stack.peek().left;
                int aright = CUP$Parser$stack.peek().right;
                ArrayType a = CUP$Parser$stack.peek().<ArrayType> value();
                 RESULT = a; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_type",36, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // function_declaration_argument_type ::= primitive_type 
            {
                Type RESULT = null;
                int pleft = CUP$Parser$stack.peek().left;
                int pright = CUP$Parser$stack.peek().right;
                PrimitiveType p = CUP$Parser$stack.peek().<PrimitiveType> value();
                 RESULT = p; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_type",36, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // function_declaration_argument_single ::= IDENTIFIER COLON function_declaration_argument_type 
            {
                TypedDeclaration RESULT = null;
                int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int iright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                String i = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<String> value();
                int tleft = CUP$Parser$stack.peek().left;
                int tright = CUP$Parser$stack.peek().right;
                Type t = CUP$Parser$stack.peek().<Type> value();
                 RESULT = new TypedDeclaration(new Identifier(i), t);  
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_single",37, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // function_declaration_argument_list ::= function_declaration_argument_single COMMA function_declaration_argument_list 
            {
                List<TypedDeclaration> RESULT = null;
                int fdasleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int fdasright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                TypedDeclaration fdas = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<TypedDeclaration> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<TypedDeclaration> lst = CUP$Parser$stack.peek().<List<TypedDeclaration>> value();
                 lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",38, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // function_declaration_argument_list ::= function_declaration_argument_single 
            {
                List<TypedDeclaration> RESULT = null;
                int fdasleft = CUP$Parser$stack.peek().left;
                int fdasright = CUP$Parser$stack.peek().right;
                TypedDeclaration fdas = CUP$Parser$stack.peek().<TypedDeclaration> value();
                 List<TypedDeclaration> lst = new LinkedList<>(); lst.add(0, fdas); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument_list",38, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // function_declaration_argument ::= function_declaration_argument_list 
            {
                List<TypedDeclaration> RESULT = null;
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<TypedDeclaration> lst = CUP$Parser$stack.peek().<List<TypedDeclaration>> value();
                 RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",39, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // function_declaration_argument ::= empty 
            {
                List<TypedDeclaration> RESULT = null;
                 RESULT = new LinkedList<TypedDeclaration>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_argument",39, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // function_declaration ::= IDENTIFIER OPEN_PAREN function_declaration_argument CLOSE_PAREN COLON types function_block 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-6).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-6).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-6).<String> value();
                int argsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int argsright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                List<TypedDeclaration> args = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<List<TypedDeclaration>> value();
                int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int tright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Type> t = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Type>> value();
                int fbleft = CUP$Parser$stack.peek().left;
                int fbright = CUP$Parser$stack.peek().right;
                FunctionBlock fb = CUP$Parser$stack.peek().<FunctionBlock> value();
                 RESULT = new FunctionDeclaration(new Identifier(id), args, t, fb); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",40, CUP$Parser$stack.elementAt(CUP$Parser$top-6), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // function_declaration ::= IDENTIFIER OPEN_PAREN function_declaration_argument CLOSE_PAREN procedure_block 
            {
                FunctionDeclaration RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-4).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-4).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-4).<String> value();
                int argsleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int argsright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                List<TypedDeclaration> args = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<List<TypedDeclaration>> value();
                int fbleft = CUP$Parser$stack.peek().left;
                int fbright = CUP$Parser$stack.peek().right;
                ProcedureBlock fb = CUP$Parser$stack.peek().<ProcedureBlock> value();
                 RESULT = new FunctionDeclaration(new Identifier(id),args,new LinkedList<Type>(),fb); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",40, CUP$Parser$stack.elementAt(CUP$Parser$top-4), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // function_declaration_list ::= function_declaration function_declaration_list 
            {
                List<FunctionDeclaration> RESULT = null;
                int fdleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int fdright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                FunctionDeclaration fd = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<FunctionDeclaration> value();
                int lstleft = CUP$Parser$stack.peek().left;
                int lstright = CUP$Parser$stack.peek().right;
                List<FunctionDeclaration> lst = CUP$Parser$stack.peek().<List<FunctionDeclaration>> value();
                 lst.add(0, fd); RESULT = lst; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_list",41, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // function_declaration_list ::= empty 
            {
                List<FunctionDeclaration> RESULT = null;
                 RESULT = new LinkedList<FunctionDeclaration>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_list",41, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // procedure_block ::= OPEN_BRACE block_list CLOSE_BRACE 
            {
                ProcedureBlock RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                BlockList b = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<BlockList> value();
                 RESULT = new ProcedureBlock(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_block",43, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // procedure_block ::= OPEN_BRACE block_list RETURN CLOSE_BRACE 
            {
                ProcedureBlock RESULT = null;
                int bleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int bright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                BlockList b = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<BlockList> value();
                 RESULT = new ProcedureBlock(b); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_block",43, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // procedure_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-3).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-3).<String> value();
                int elistleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int elistright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<Expression> elist = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<Expression>> value();
                 RESULT = new ProcedureCall(new Identifier(id), elist); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",44, CUP$Parser$stack.elementAt(CUP$Parser$top-3), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // procedure_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                ProcedureCall RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-2).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-2).<String> value();
                 RESULT = new ProcedureCall(new Identifier(id), new LinkedList<Expression>()); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",44, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // use_block ::= USE IDENTIFIER use_block 
            {
                List<UseStatement> RESULT = null;
                int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int idright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                String id = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<String> value();
                int uleft = CUP$Parser$stack.peek().left;
                int uright = CUP$Parser$stack.peek().right;
                List<UseStatement> u = CUP$Parser$stack.peek().<List<UseStatement>> value();
                 u.add(0, new UseStatement(new Identifier(id))); RESULT = u; 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$Parser$stack.elementAt(CUP$Parser$top-2), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // use_block ::= empty 
            {
                List<UseStatement> RESULT = null;
                 RESULT = new LinkedList<UseStatement>(); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // program ::= use_block function_declaration_list 
            {
                Program RESULT = null;
                int uleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
                int uright = CUP$Parser$stack.elementAt(CUP$Parser$top-1).right;
                List<UseStatement> u = CUP$Parser$stack.elementAt(CUP$Parser$top-1).<List<UseStatement>> value();
                int lleft = CUP$Parser$stack.peek().left;
                int lright = CUP$Parser$stack.peek().right;
                List<FunctionDeclaration> l = CUP$Parser$stack.peek().<List<FunctionDeclaration>> value();
                 RESULT = new Program(u,l); 
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // program ::= error 
            {
                Program RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$Parser$stack.peek(), CUP$Parser$stack.peek(), RESULT);
            }
            return CUP$Parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$Parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int                        CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,
            int                        CUP$Parser$top)
            throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                           CUP$Parser$act_num,
                           CUP$Parser$parser,
                           CUP$Parser$stack,
                           CUP$Parser$top);
    }
}

}
