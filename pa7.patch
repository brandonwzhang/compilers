From ffdef2c858291a98e3ac924551d9385cf3bed4d9 Mon Sep 17 00:00:00 2001
From: Brandon Zhang <bwzhang@gmail.com>
Date: Wed, 25 May 2016 20:38:10 -0400
Subject: [PATCH] PA7 patch

---
 .../assembly/AssemblyInstruction.java              |   2 +-
 .../assembly/tiles/ExpressionCodeGenerators.java   |   2 +-
 .../com/bwz6jk2227esl89ahj34/ast/parse/Parser.java | 580 +++++++++++----------
 .../ast/visit/MIRGenerateVisitor.java              |   2 +-
 .../ast/visit/TypeCheckVisitor.java                |  14 +-
 parser/ParserSym.java                              |   6 +-
 parser/xi.cup                                      |  43 +-
 7 files changed, 338 insertions(+), 311 deletions(-)

diff --git a/Compiler/src/com/bwz6jk2227esl89ahj34/assembly/AssemblyInstruction.java b/Compiler/src/com/bwz6jk2227esl89ahj34/assembly/AssemblyInstruction.java
index 1ad9dcd..191d02a 100644
--- a/Compiler/src/com/bwz6jk2227esl89ahj34/assembly/AssemblyInstruction.java
+++ b/Compiler/src/com/bwz6jk2227esl89ahj34/assembly/AssemblyInstruction.java
@@ -13,7 +13,7 @@ public class AssemblyInstruction extends AssemblyLine {
     public enum OpCode {
         ADDQ, SUBQ, ANDQ, CMPQ, DIVQ ,ORQ, MOVQ, MULQ, SETZ, SETNZ, SETL, SETG, SETLE,
         SETGE, PUSHQ, POPQ, JMP, XORQ, RETQ, JE, JNE, MOVZX, CALLQ, ENTER, LEAVE, LEAQ,
-        IMULQ, IDIVQ
+        IMULQ, IDIVQ, CQO
     }
 
     public OpCode opCode;
diff --git a/Compiler/src/com/bwz6jk2227esl89ahj34/assembly/tiles/ExpressionCodeGenerators.java b/Compiler/src/com/bwz6jk2227esl89ahj34/assembly/tiles/ExpressionCodeGenerators.java
index 190a8dd..9d00307 100644
--- a/Compiler/src/com/bwz6jk2227esl89ahj34/assembly/tiles/ExpressionCodeGenerators.java
+++ b/Compiler/src/com/bwz6jk2227esl89ahj34/assembly/tiles/ExpressionCodeGenerators.java
@@ -188,8 +188,8 @@ public class ExpressionCodeGenerators {
                 // restore RDX, RAX
                 AssemblyPhysicalRegister.saveToStack(lines, AssemblyFunction.getScratchSpaceOffset(),
                         AssemblyPhysicalRegister.RAX, AssemblyPhysicalRegister.RDX);
-                lines.add(new AssemblyInstruction(OpCode.MOVQ, new AssemblyImmediate(0), AssemblyPhysicalRegister.RDX));
                 lines.add(new AssemblyInstruction(OpCode.MOVQ, left, AssemblyPhysicalRegister.RAX));
+                lines.add(new AssemblyInstruction(OpCode.CQO));
                 AssemblyRegister right_ = makeTemp(right, lines);
                 lines.add(new AssemblyInstruction(OpCode.IDIVQ, right_));
                 lines.add(new AssemblyInstruction(OpCode.MOVQ, AssemblyPhysicalRegister.RAX, t));
diff --git a/Compiler/src/com/bwz6jk2227esl89ahj34/ast/parse/Parser.java b/Compiler/src/com/bwz6jk2227esl89ahj34/ast/parse/Parser.java
index 5b2e214..f62bd83 100644
--- a/Compiler/src/com/bwz6jk2227esl89ahj34/ast/parse/Parser.java
+++ b/Compiler/src/com/bwz6jk2227esl89ahj34/ast/parse/Parser.java
@@ -40,7 +40,7 @@ public class Parser
   /** Production table. */
   protected static final short _production_table[][] = 
     unpackFromStrings(new String[] {
-    "\000\246\000\002\002\004\000\002\003\002\000\002\004" +
+    "\000\247\000\002\002\004\000\002\003\002\000\002\004" +
     "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
     "\000\002\007\004\000\002\007\004\000\002\022\003\000" +
     "\002\022\003\000\002\010\003\000\002\010\005\000\002" +
@@ -80,18 +80,18 @@ public class Parser
     "\003\000\002\053\003\000\002\053\004\000\002\050\003" +
     "\000\002\050\003\000\002\063\005\000\002\063\005\000" +
     "\002\051\004\000\002\051\004\000\002\051\003\000\002" +
-    "\051\004\000\002\051\003\000\002\052\005\000\002\055" +
-    "\005\000\002\055\003\000\002\056\005\000\002\057\005" +
-    "\000\002\057\003\000\002\060\003\000\002\060\003\000" +
-    "\002\061\013\000\002\061\011\000\002\062\006\000\002" +
-    "\062\005\000\002\005\005\000\002\005\006\000\002\005" +
-    "\003\000\002\064\003\000\002\064\003\000\002\065\004" +
-    "\000\002\065\005\000\002\065\004\000\002\065\003\000" +
-    "\002\066\007\000\002\066\011\000\002\067\004\000\002" +
-    "\067\005\000\002\067\004\000\002\067\004\000\002\067" +
-    "\003\000\002\074\003\000\002\075\005\000\002\073\003" +
-    "\000\002\073\003\000\002\073\003\000\002\002\004\000" +
-    "\002\002\003" });
+    "\051\004\000\002\051\004\000\002\051\003\000\002\052" +
+    "\005\000\002\055\005\000\002\055\003\000\002\056\005" +
+    "\000\002\057\005\000\002\057\003\000\002\060\003\000" +
+    "\002\060\003\000\002\061\013\000\002\061\011\000\002" +
+    "\062\006\000\002\062\005\000\002\005\005\000\002\005" +
+    "\006\000\002\005\003\000\002\064\003\000\002\064\003" +
+    "\000\002\065\004\000\002\065\005\000\002\065\004\000" +
+    "\002\065\003\000\002\066\007\000\002\066\011\000\002" +
+    "\067\004\000\002\067\005\000\002\067\004\000\002\067" +
+    "\004\000\002\067\003\000\002\074\003\000\002\075\005" +
+    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
+    "\002\002\004\000\002\002\003" });
 
   /** Access to production table. */
   @Override
@@ -100,10 +100,10 @@ public class Parser
   /** Parse-action table. */
   protected static final short[][] _action_table = 
     unpackFromStrings(new String[] {
-    "\000\u0130\000\014\002\000\003\007\004\000\021\005\056" +
+    "\000\u0131\000\014\002\000\003\007\004\000\021\005\056" +
     "\000\001\002\000\010\002\000\004\013\056\023\001\002" +
     "\000\004\004\013\001\002\000\004\002\011\001\002\000" +
-    "\004\002\uff5c\001\002\000\010\002\uff70\004\uff70\056\uff70" +
+    "\004\002\uff5b\001\002\000\010\002\uff6f\004\uff6f\056\uff6f" +
     "\001\002\000\004\002\001\001\002\000\014\002\000\004" +
     "\000\021\005\051\015\056\000\001\002\000\130\002\uffff" +
     "\004\uffff\005\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020" +
@@ -112,29 +112,29 @@ public class Parser
     "\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff" +
     "\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053" +
     "\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\063\uffff" +
-    "\064\uffff\065\uffff\066\uffff\001\002\000\010\002\uff72\004" +
-    "\uff72\056\uff72\001\002\000\012\002\000\004\000\021\005" +
-    "\056\000\001\002\000\010\002\uff71\004\uff71\056\uff71\001" +
-    "\002\000\004\040\u0131\001\002\000\010\043\057\047\332" +
-    "\050\056\001\002\000\004\002\uff5d\001\002\000\012\002" +
-    "\uff5f\004\uff5f\051\uff5f\056\uff5f\001\002\000\004\004\013" +
+    "\064\uffff\065\uffff\066\uffff\001\002\000\010\002\uff71\004" +
+    "\uff71\056\uff71\001\002\000\012\002\000\004\000\021\005" +
+    "\056\000\001\002\000\010\002\uff70\004\uff70\056\uff70\001" +
+    "\002\000\004\040\u0132\001\002\000\010\043\057\047\332" +
+    "\050\056\001\002\000\004\002\uff5c\001\002\000\012\002" +
+    "\uff5e\004\uff5e\051\uff5e\056\uff5e\001\002\000\004\004\013" +
     "\001\002\000\010\002\000\004\013\056\023\001\002\000" +
-    "\012\002\uff60\004\uff60\051\uff60\056\uff60\001\002\000\012" +
-    "\002\000\004\013\051\035\056\023\001\002\000\004\002" +
-    "\uff63\001\002\000\004\040\uff62\001\002\000\012\002\uff5e" +
-    "\004\uff5e\051\uff5e\056\uff5e\001\002\000\010\002\000\004" +
-    "\013\056\023\001\002\000\004\002\uff65\001\002\000\004" +
-    "\002\uff67\001\002\000\010\002\000\004\013\056\023\001" +
-    "\002\000\004\002\uff66\001\002\000\004\002\uff64\001\002" +
+    "\012\002\uff5f\004\uff5f\051\uff5f\056\uff5f\001\002\000\004" +
+    "\040\uff61\001\002\000\012\002\000\004\013\051\035\056" +
+    "\023\001\002\000\004\002\uff62\001\002\000\012\002\uff5d" +
+    "\004\uff5d\051\uff5d\056\uff5d\001\002\000\010\002\000\004" +
+    "\013\056\023\001\002\000\004\002\uff64\001\002\000\004" +
+    "\002\uff66\001\002\000\010\002\000\004\013\056\023\001" +
+    "\002\000\004\002\uff65\001\002\000\004\002\uff63\001\002" +
     "\000\006\045\042\057\041\001\002\000\004\004\013\001" +
-    "\002\000\006\004\013\046\000\001\002\000\004\046\u012c" +
+    "\002\000\006\004\013\046\000\001\002\000\004\046\u012d" +
     "\001\002\000\010\043\057\047\060\050\056\001\002\000" +
-    "\010\004\013\046\000\051\054\001\002\000\010\004\uff6f" +
-    "\046\uff6f\051\uff6f\001\002\000\010\004\uff6e\046\uff6e\051" +
-    "\uff6e\001\002\000\006\004\013\046\000\001\002\000\004" +
-    "\046\uff6a\001\002\000\004\046\uff6b\001\002\000\004\046" +
+    "\010\004\013\046\000\051\054\001\002\000\010\004\uff6e" +
+    "\046\uff6e\051\uff6e\001\002\000\010\004\uff6d\046\uff6d\051" +
     "\uff6d\001\002\000\006\004\013\046\000\001\002\000\004" +
-    "\046\uff6c\001\002\000\004\004\013\001\002\000\006\004" +
+    "\046\uff69\001\002\000\004\046\uff6a\001\002\000\004\046" +
+    "\uff6c\001\002\000\006\004\013\046\000\001\002\000\004" +
+    "\046\uff6b\001\002\000\004\004\013\001\002\000\006\004" +
     "\013\044\000\001\002\000\010\004\013\012\064\013\062" +
     "\001\002\000\044\002\000\004\000\005\000\014\000\016" +
     "\000\017\000\020\000\041\067\045\000\046\000\051\000" +
@@ -556,16 +556,16 @@ public class Parser
     "\uffd1\064\uffd1\066\uffd1\001\002\000\046\002\uffbb\004\uffbb" +
     "\005\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\044" +
     "\uffbb\045\uffbb\046\uffbb\051\uffbb\052\uffbb\055\uffbb\056\uffbb" +
-    "\060\uffbb\063\uffbb\064\uffbb\001\002\000\004\047\u0127\001" +
-    "\002\000\004\044\245\001\002\000\004\044\uff78\001\002" +
-    "\000\006\044\uff79\050\243\001\002\000\004\044\uff77\001" +
-    "\002\000\004\004\013\001\002\000\004\044\uff7a\001\002" +
+    "\060\uffbb\063\uffbb\064\uffbb\001\002\000\004\047\u0128\001" +
+    "\002\000\004\044\245\001\002\000\004\044\uff77\001\002" +
+    "\000\006\044\uff78\050\243\001\002\000\004\044\uff76\001" +
+    "\002\000\004\004\013\001\002\000\004\044\uff79\001\002" +
     "\000\006\045\246\047\247\001\002\000\034\004\013\005" +
     "\315\014\300\016\316\017\273\020\270\045\272\046\000" +
     "\052\260\055\102\060\257\063\313\064\305\001\002\000" +
     "\010\004\013\012\064\013\062\001\002\000\012\041\225" +
-    "\044\000\045\000\050\000\001\002\000\006\045\uff7c\050" +
-    "\u0122\001\002\000\004\045\255\001\002\000\012\041\225" +
+    "\044\000\045\000\050\000\001\002\000\006\045\uff7b\050" +
+    "\u0123\001\002\000\004\045\255\001\002\000\012\041\225" +
     "\044\000\045\000\050\000\001\002\000\010\044\uffc0\045" +
     "\uffc0\050\uffc0\001\002\000\034\004\013\005\315\014\300" +
     "\016\316\017\273\020\270\045\272\046\000\052\260\055" +
@@ -574,193 +574,193 @@ public class Parser
     "\uff87\045\uff87\046\uff87\051\uff87\052\uff87\055\uff87\060\uff87" +
     "\063\uff87\064\uff87\001\002\000\004\004\013\001\002\000" +
     "\006\040\uffa1\050\uff9d\001\002\000\010\040\uffa2\041\uffb6" +
-    "\061\uffae\001\002\000\004\061\u011e\001\002\000\042\004" +
+    "\061\uffae\001\002\000\004\061\u011f\001\002\000\042\004" +
     "\uff8f\005\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f" +
     "\044\uff8f\045\uff8f\046\uff8f\051\uff8f\052\uff8f\055\uff8f\060" +
-    "\uff8f\063\uff8f\064\uff8f\001\002\000\004\040\u011b\001\002" +
+    "\uff8f\063\uff8f\064\uff8f\001\002\000\004\040\u011c\001\002" +
     "\000\006\040\uffa3\050\uff9e\001\002\000\010\040\uffa4\041" +
-    "\uffb3\061\uffac\001\002\000\004\046\uff7f\001\002\000\040" +
+    "\uffb3\061\uffac\001\002\000\004\046\uff7e\001\002\000\042" +
     "\004\013\005\124\006\116\007\107\010\117\011\125\023" +
-    "\111\027\120\043\121\045\112\046\uff81\055\102\060\072" +
-    "\062\115\063\123\001\002\000\004\041\u0118\001\002\000" +
+    "\111\027\120\043\121\045\112\046\uff81\051\u011b\055\102" +
+    "\060\072\062\115\063\123\001\002\000\004\041\u0118\001" +
+    "\002\000\034\004\013\005\315\014\300\016\316\017\273" +
+    "\020\270\045\272\046\000\052\260\055\102\060\257\063" +
+    "\313\064\305\001\002\000\042\004\uff8a\005\uff8a\014\uff8a" +
+    "\015\uff8a\016\uff8a\017\uff8a\020\uff8a\044\uff8a\045\uff8a\046" +
+    "\uff8a\051\uff8a\052\uff8a\055\uff8a\060\uff8a\063\uff8a\064\uff8a" +
+    "\001\002\000\042\004\uff86\005\uff86\014\uff86\015\uff86\016" +
+    "\uff86\017\uff86\020\uff86\044\uff86\045\uff86\046\uff86\051\uff86" +
+    "\052\uff86\055\uff86\060\uff86\063\uff86\064\uff86\001\002\000" +
     "\034\004\013\005\315\014\300\016\316\017\273\020\270" +
     "\045\272\046\000\052\260\055\102\060\257\063\313\064" +
-    "\305\001\002\000\042\004\uff8a\005\uff8a\014\uff8a\015\uff8a" +
-    "\016\uff8a\017\uff8a\020\uff8a\044\uff8a\045\uff8a\046\uff8a\051" +
-    "\uff8a\052\uff8a\055\uff8a\060\uff8a\063\uff8a\064\uff8a\001\002" +
-    "\000\042\004\uff86\005\uff86\014\uff86\015\uff86\016\uff86\017" +
-    "\uff86\020\uff86\044\uff86\045\uff86\046\uff86\051\uff86\052\uff86" +
-    "\055\uff86\060\uff86\063\uff86\064\uff86\001\002\000\034\004" +
-    "\013\005\315\014\300\016\316\017\273\020\270\045\272" +
-    "\046\000\052\260\055\102\060\257\063\313\064\305\001" +
-    "\002\000\042\004\uff90\005\uff90\014\uff90\015\uff90\016\uff90" +
-    "\017\uff90\020\uff90\044\uff90\045\uff90\046\uff90\051\uff90\052" +
-    "\uff90\055\uff90\060\uff90\063\uff90\064\uff90\001\002\000\034" +
-    "\004\013\005\315\014\300\016\316\017\273\020\270\045" +
-    "\272\046\000\052\260\055\102\060\257\063\313\064\305" +
-    "\001\002\000\004\043\u010e\001\002\000\042\004\uff8c\005" +
-    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\044\uff8c" +
-    "\045\uff8c\046\uff8c\051\uff8c\052\uff8c\055\uff8c\060\uff8c\063" +
-    "\uff8c\064\uff8c\001\002\000\020\040\uffa5\041\uffb4\043\331" +
-    "\047\332\050\056\061\uffb0\065\330\001\002\000\004\050" +
-    "\u0108\001\002\000\042\004\uff8d\005\uff8d\014\uff8d\015\uff8d" +
-    "\016\uff8d\017\uff8d\020\uff8d\044\uff8d\045\uff8d\046\uff8d\051" +
-    "\uff8d\052\uff8d\055\uff8d\060\uff8d\063\uff8d\064\uff8d\001\002" +
-    "\000\004\043\363\001\002\000\004\040\361\001\002\000" +
-    "\034\004\013\005\315\014\300\016\316\017\273\020\270" +
-    "\045\272\046\000\052\260\055\102\060\257\063\313\064" +
-    "\305\001\002\000\042\004\uff89\005\uff89\014\uff89\015\uff89" +
-    "\016\uff89\017\uff89\020\uff89\044\uff89\045\uff89\046\uff89\051" +
-    "\357\052\uff89\055\uff89\060\uff89\063\uff89\064\uff89\001\002" +
-    "\000\010\040\uffa0\041\uffb1\061\uffad\001\002\000\010\040" +
-    "\uff9f\041\uffb2\061\uffab\001\002\000\006\044\uffaa\061\uffaa" +
-    "\001\002\000\042\004\uff91\005\uff91\014\uff91\015\uff91\016" +
-    "\uff91\017\uff91\020\uff91\044\uff91\045\uff91\046\uff91\051\uff91" +
-    "\052\uff91\055\uff91\060\uff91\063\uff91\064\uff91\001\002\000" +
-    "\004\041\uffb5\001\002\000\004\043\322\001\002\000\004" +
-    "\046\321\001\002\000\042\004\uff8e\005\uff8e\014\uff8e\015" +
-    "\uff8e\016\uff8e\017\uff8e\020\uff8e\044\uff8e\045\uff8e\046\uff8e" +
-    "\051\uff8e\052\uff8e\055\uff8e\060\uff8e\063\uff8e\064\uff8e\001" +
-    "\002\000\012\002\uff76\004\uff76\046\uff76\056\uff76\001\002" +
-    "\000\036\004\013\005\124\006\116\007\107\010\117\011" +
-    "\125\023\111\027\120\043\121\045\112\055\102\060\072" +
-    "\062\115\063\123\001\002\000\004\044\324\001\002\000" +
-    "\030\004\013\005\315\014\300\016\316\017\273\020\325" +
-    "\045\272\052\260\055\102\060\257\063\313\001\002\000" +
-    "\036\004\013\005\124\006\116\007\107\010\117\011\125" +
-    "\023\111\027\120\043\121\045\112\055\102\060\072\062" +
-    "\115\063\123\001\002\000\042\004\uff95\005\uff95\014\uff95" +
-    "\015\uff95\016\uff95\017\uff95\020\uff95\044\uff95\045\uff95\046" +
-    "\uff95\051\uff95\052\uff95\055\uff95\060\uff95\063\uff95\064\uff95" +
-    "\001\002\000\016\040\uffa5\041\uffb4\043\331\047\332\061" +
-    "\uffb0\065\330\001\002\000\016\004\013\005\315\043\347" +
-    "\055\102\060\257\063\313\001\002\000\040\004\013\005" +
-    "\124\006\116\007\107\010\117\011\125\023\111\027\120" +
-    "\043\121\044\340\045\112\055\102\060\072\062\115\063" +
-    "\123\001\002\000\010\004\013\012\064\013\062\001\002" +
-    "\000\054\002\000\004\000\005\000\014\000\015\000\016" +
-    "\000\017\000\020\000\040\000\041\067\044\000\045\000" +
-    "\046\000\050\000\051\000\052\000\055\000\056\000\060" +
-    "\000\063\000\064\000\001\002\000\054\002\000\004\000" +
-    "\005\000\014\000\015\000\016\000\017\000\020\000\040" +
-    "\000\041\067\044\000\045\000\046\000\050\000\051\000" +
-    "\052\000\055\000\056\000\060\000\063\000\064\000\001" +
-    "\002\000\052\002\uffc3\004\uffc3\005\uffc3\014\uffc3\015\uffc3" +
-    "\016\uffc3\017\uffc3\020\uffc3\040\uffbe\044\uffc3\045\uffc3\046" +
-    "\uffc3\050\uffbe\051\uffc3\052\uffc3\055\uffc3\056\uffc3\060\uffc3" +
-    "\063\uffc3\064\uffc3\001\002\000\052\002\uffc3\004\uffc3\005" +
-    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\040\uffbd" +
-    "\044\uffc3\045\uffc3\046\uffc3\050\uffbd\051\uffc3\052\uffc3\055" +
-    "\uffc3\056\uffc3\060\uffc3\063\uffc3\064\uffc3\001\002\000\004" +
-    "\044\341\001\002\000\050\004\uff73\005\uff73\014\uff73\015" +
-    "\uff73\016\uff73\017\uff73\020\uff73\040\uffb9\041\uffb9\044\uff73" +
-    "\045\uff73\046\uff73\051\uff73\052\uff73\055\uff73\060\uff73\061" +
-    "\uffb9\063\uff73\064\uff73\001\002\000\050\004\uff74\005\uff74" +
-    "\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\040\uffba\041" +
-    "\uffba\044\uff74\045\uff74\046\uff74\051\uff74\052\uff74\055\uff74" +
-    "\060\uff74\061\uffba\063\uff74\064\uff74\001\002\000\014\041" +
-    "\uffb4\043\173\044\uffb0\061\uffb0\065\330\001\002\000\010" +
-    "\041\uffb6\044\uffae\061\uffae\001\002\000\006\044\uffa9\061" +
-    "\uffa9\001\002\000\010\041\uffb3\044\uffac\061\uffac\001\002" +
-    "\000\010\041\uffb1\044\uffad\061\uffad\001\002\000\014\004" +
-    "\013\005\315\055\102\060\257\063\313\001\002\000\010" +
-    "\041\uffb2\044\uffab\061\uffab\001\002\000\006\044\353\061" +
-    "\352\001\002\000\006\004\013\055\102\001\002\000\006" +
-    "\044\uffa8\061\uffa8\001\002\000\014\040\uffa6\041\uffa6\043" +
-    "\173\044\uffa6\061\uffa6\001\002\000\050\004\uffa7\005\uffa7" +
-    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\040\uffa7\041" +
-    "\uffa7\044\uffa7\045\uffa7\046\uffa7\051\uffa7\052\uffa7\055\uffa7" +
-    "\060\uffa7\061\uffa7\063\uffa7\064\uffa7\001\002\000\042\004" +
-    "\uff94\005\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94" +
-    "\044\uff94\045\uff94\046\uff94\051\uff94\052\uff94\055\uff94\060" +
-    "\uff94\063\uff94\064\uff94\001\002\000\042\004\uff88\005\uff88" +
-    "\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\044\uff88\045" +
-    "\uff88\046\uff88\051\uff88\052\uff88\055\uff88\060\uff88\063\uff88" +
-    "\064\uff88\001\002\000\004\046\uff82\001\002\000\036\004" +
-    "\013\005\124\006\116\007\107\010\117\011\125\023\111" +
-    "\027\120\043\121\045\112\055\102\060\072\062\115\063" +
-    "\123\001\002\000\042\004\uff9a\005\uff9a\014\uff9a\015\uff9a" +
-    "\016\uff9a\017\uff9a\020\uff9a\044\uff9a\045\uff9a\046\uff9a\051" +
-    "\uff9a\052\uff9a\055\uff9a\060\uff9a\063\uff9a\064\uff9a\001\002" +
-    "\000\016\004\013\005\315\052\365\055\102\060\257\063" +
-    "\313\001\002\000\016\040\uffa5\041\uffb4\043\173\047\u0103" +
-    "\061\uffb0\065\330\001\002\000\004\040\uffa1\001\002\000" +
-    "\004\061\352\001\002\000\004\040\371\001\002\000\004" +
-    "\040\uffa3\001\002\000\036\004\013\005\124\006\116\007" +
-    "\107\010\117\011\125\023\111\027\120\043\121\045\112" +
-    "\055\102\060\072\062\115\063\123\001\002\000\004\051" +
-    "\373\001\002\000\036\004\013\005\124\006\116\007\107" +
-    "\010\117\011\125\023\111\027\120\043\121\045\112\055" +
-    "\102\060\072\062\115\063\123\001\002\000\006\044\376" +
-    "\051\375\001\002\000\026\004\013\005\315\014\300\016" +
-    "\316\017\273\020\325\052\260\055\102\060\257\063\313" +
-    "\001\002\000\030\004\013\005\315\014\300\016\316\017" +
-    "\273\020\325\045\272\052\260\055\102\060\257\063\313" +
-    "\001\002\000\034\004\uff92\005\uff92\014\uff92\016\uff92\017" +
-    "\uff92\020\uff92\045\uff92\046\uff92\052\uff92\055\uff92\060\uff92" +
-    "\063\uff92\064\uff92\001\002\000\004\044\u0101\001\002\000" +
-    "\030\004\013\005\315\014\300\016\316\017\273\020\325" +
-    "\045\272\052\260\055\102\060\257\063\313\001\002\000" +
-    "\034\004\uff93\005\uff93\014\uff93\016\uff93\017\uff93\020\uff93" +
-    "\045\uff93\046\uff93\052\uff93\055\uff93\060\uff93\063\uff93\064" +
-    "\uff93\001\002\000\010\004\013\012\064\013\062\001\002" +
-    "\000\010\040\000\041\225\050\000\001\002\000\010\040" +
-    "\000\041\225\050\000\001\002\000\006\040\uffbe\050\uffbe" +
-    "\001\002\000\006\040\uffbd\050\uffbd\001\002\000\006\004" +
-    "\013\052\u010a\001\002\000\004\047\u0103\001\002\000\006" +
-    "\040\uff9d\050\uff9d\001\002\000\006\040\uff9b\050\u0108\001" +
-    "\002\000\004\040\uff9c\001\002\000\006\040\uff9e\050\uff9e" +
+    "\305\001\002\000\042\004\uff90\005\uff90\014\uff90\015\uff90" +
+    "\016\uff90\017\uff90\020\uff90\044\uff90\045\uff90\046\uff90\051" +
+    "\uff90\052\uff90\055\uff90\060\uff90\063\uff90\064\uff90\001\002" +
+    "\000\034\004\013\005\315\014\300\016\316\017\273\020" +
+    "\270\045\272\046\000\052\260\055\102\060\257\063\313" +
+    "\064\305\001\002\000\004\043\u010e\001\002\000\042\004" +
+    "\uff8c\005\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c" +
+    "\044\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c\055\uff8c\060" +
+    "\uff8c\063\uff8c\064\uff8c\001\002\000\020\040\uffa5\041\uffb4" +
+    "\043\331\047\332\050\056\061\uffb0\065\330\001\002\000" +
+    "\004\050\u0108\001\002\000\042\004\uff8d\005\uff8d\014\uff8d" +
+    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\044\uff8d\045\uff8d\046" +
+    "\uff8d\051\uff8d\052\uff8d\055\uff8d\060\uff8d\063\uff8d\064\uff8d" +
+    "\001\002\000\004\043\363\001\002\000\004\040\361\001" +
+    "\002\000\034\004\013\005\315\014\300\016\316\017\273" +
+    "\020\270\045\272\046\000\052\260\055\102\060\257\063" +
+    "\313\064\305\001\002\000\042\004\uff89\005\uff89\014\uff89" +
+    "\015\uff89\016\uff89\017\uff89\020\uff89\044\uff89\045\uff89\046" +
+    "\uff89\051\357\052\uff89\055\uff89\060\uff89\063\uff89\064\uff89" +
+    "\001\002\000\010\040\uffa0\041\uffb1\061\uffad\001\002\000" +
+    "\010\040\uff9f\041\uffb2\061\uffab\001\002\000\006\044\uffaa" +
+    "\061\uffaa\001\002\000\042\004\uff91\005\uff91\014\uff91\015" +
+    "\uff91\016\uff91\017\uff91\020\uff91\044\uff91\045\uff91\046\uff91" +
+    "\051\uff91\052\uff91\055\uff91\060\uff91\063\uff91\064\uff91\001" +
+    "\002\000\004\041\uffb5\001\002\000\004\043\322\001\002" +
+    "\000\004\046\321\001\002\000\042\004\uff8e\005\uff8e\014" +
+    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\044\uff8e\045\uff8e" +
+    "\046\uff8e\051\uff8e\052\uff8e\055\uff8e\060\uff8e\063\uff8e\064" +
+    "\uff8e\001\002\000\012\002\uff75\004\uff75\046\uff75\056\uff75" +
     "\001\002\000\036\004\013\005\124\006\116\007\107\010" +
     "\117\011\125\023\111\027\120\043\121\045\112\055\102" +
-    "\060\072\062\115\063\123\001\002\000\004\044\u0110\001" +
+    "\060\072\062\115\063\123\001\002\000\004\044\324\001" +
     "\002\000\030\004\013\005\315\014\300\016\316\017\273" +
     "\020\325\045\272\052\260\055\102\060\257\063\313\001" +
-    "\002\000\042\004\uff97\005\uff97\014\uff97\015\u0112\016\uff97" +
-    "\017\uff97\020\uff97\044\uff97\045\uff97\046\uff97\051\uff97\052" +
-    "\uff97\055\uff97\060\uff97\063\uff97\064\uff97\001\002\000\030" +
-    "\004\013\005\315\014\300\016\316\017\273\020\325\045" +
-    "\272\052\260\055\102\060\257\063\313\001\002\000\042" +
-    "\004\uff96\005\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020" +
-    "\uff96\044\uff96\045\uff96\046\uff96\051\uff96\052\uff96\055\uff96" +
-    "\060\uff96\063\uff96\064\uff96\001\002\000\004\046\uff80\001" +
-    "\002\000\004\046\uff83\001\002\000\004\046\u0117\001\002" +
-    "\000\042\004\uff7e\005\uff7e\014\uff7e\015\uff7e\016\uff7e\017" +
-    "\uff7e\020\uff7e\044\uff7e\045\uff7e\046\uff7e\051\uff7e\052\uff7e" +
-    "\055\uff7e\060\uff7e\063\uff7e\064\uff7e\001\002\000\036\004" +
-    "\013\005\124\006\116\007\107\010\117\011\125\023\111" +
-    "\027\120\043\121\045\112\055\102\060\072\062\115\063" +
-    "\123\001\002\000\004\042\u011a\001\002\000\012\040\uffb7" +
-    "\041\uffb7\044\uffb7\061\uffb7\001\002\000\014\004\013\005" +
-    "\315\055\102\060\257\063\313\001\002\000\046\004\uff98" +
-    "\005\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\041" +
-    "\uffb1\044\uff98\045\uff98\046\uff98\051\uff98\052\uff98\055\uff98" +
-    "\060\uff98\061\uffad\063\uff98\064\uff98\001\002\000\046\004" +
-    "\uff99\005\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99" +
-    "\041\uffb6\044\uff99\045\uff99\046\uff99\051\uff99\052\uff99\055" +
-    "\uff99\060\uff99\061\uffae\063\uff99\064\uff99\001\002\000\006" +
-    "\004\013\055\102\001\002\000\012\040\uffa6\041\uffa6\043" +
-    "\331\061\uffa6\001\002\000\042\004\uff8b\005\uff8b\014\uff8b" +
-    "\015\uff8b\016\uff8b\017\uff8b\020\uff8b\044\uff8b\045\uff8b\046" +
-    "\uff8b\051\uff8b\052\uff8b\055\uff8b\060\uff8b\063\uff8b\064\uff8b" +
-    "\001\002\000\006\044\uffaf\061\uffaf\001\002\000\010\004" +
-    "\013\012\064\013\062\001\002\000\004\045\uff7d\001\002" +
-    "\000\010\044\uffbf\045\uffbf\050\uffbf\001\002\000\004\046" +
-    "\u0126\001\002\000\012\002\uff75\004\uff75\046\uff75\056\uff75" +
-    "\001\002\000\010\004\013\012\064\013\062\001\002\000" +
-    "\006\044\uff7b\050\uff7b\001\002\000\006\047\060\050\056" +
-    "\001\002\000\042\002\uff84\004\uff84\005\uff84\014\uff84\016" +
-    "\uff84\017\uff84\020\uff84\045\uff84\046\uff84\051\uff84\052\uff84" +
-    "\055\uff84\056\uff84\060\uff84\063\uff84\064\uff84\001\002\000" +
-    "\042\002\uff85\004\uff85\005\uff85\014\uff85\016\uff85\017\uff85" +
-    "\020\uff85\045\uff85\046\uff85\051\uff85\052\uff85\055\uff85\056" +
-    "\uff85\060\uff85\063\uff85\064\uff85\001\002\000\010\002\uff69" +
-    "\004\uff69\056\uff69\001\002\000\004\045\u012e\001\002\000" +
-    "\006\004\013\046\000\001\002\000\004\046\u0130\001\002" +
-    "\000\010\002\uff68\004\uff68\056\uff68\001\002\000\036\004" +
+    "\002\000\036\004\013\005\124\006\116\007\107\010\117" +
+    "\011\125\023\111\027\120\043\121\045\112\055\102\060" +
+    "\072\062\115\063\123\001\002\000\042\004\uff95\005\uff95" +
+    "\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\044\uff95\045" +
+    "\uff95\046\uff95\051\uff95\052\uff95\055\uff95\060\uff95\063\uff95" +
+    "\064\uff95\001\002\000\016\040\uffa5\041\uffb4\043\331\047" +
+    "\332\061\uffb0\065\330\001\002\000\016\004\013\005\315" +
+    "\043\347\055\102\060\257\063\313\001\002\000\040\004" +
     "\013\005\124\006\116\007\107\010\117\011\125\023\111" +
-    "\027\120\043\121\045\112\055\102\060\072\062\115\063" +
-    "\123\001\002\000\012\002\uff61\004\uff61\051\uff61\056\uff61" +
-    "\001\002" });
+    "\027\120\043\121\044\340\045\112\055\102\060\072\062" +
+    "\115\063\123\001\002\000\010\004\013\012\064\013\062" +
+    "\001\002\000\054\002\000\004\000\005\000\014\000\015" +
+    "\000\016\000\017\000\020\000\040\000\041\067\044\000" +
+    "\045\000\046\000\050\000\051\000\052\000\055\000\056" +
+    "\000\060\000\063\000\064\000\001\002\000\054\002\000" +
+    "\004\000\005\000\014\000\015\000\016\000\017\000\020" +
+    "\000\040\000\041\067\044\000\045\000\046\000\050\000" +
+    "\051\000\052\000\055\000\056\000\060\000\063\000\064" +
+    "\000\001\002\000\052\002\uffc3\004\uffc3\005\uffc3\014\uffc3" +
+    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\040\uffbe\044\uffc3\045" +
+    "\uffc3\046\uffc3\050\uffbe\051\uffc3\052\uffc3\055\uffc3\056\uffc3" +
+    "\060\uffc3\063\uffc3\064\uffc3\001\002\000\052\002\uffc3\004" +
+    "\uffc3\005\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
+    "\040\uffbd\044\uffc3\045\uffc3\046\uffc3\050\uffbd\051\uffc3\052" +
+    "\uffc3\055\uffc3\056\uffc3\060\uffc3\063\uffc3\064\uffc3\001\002" +
+    "\000\004\044\341\001\002\000\050\004\uff72\005\uff72\014" +
+    "\uff72\015\uff72\016\uff72\017\uff72\020\uff72\040\uffb9\041\uffb9" +
+    "\044\uff72\045\uff72\046\uff72\051\uff72\052\uff72\055\uff72\060" +
+    "\uff72\061\uffb9\063\uff72\064\uff72\001\002\000\050\004\uff73" +
+    "\005\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73\040" +
+    "\uffba\041\uffba\044\uff73\045\uff73\046\uff73\051\uff73\052\uff73" +
+    "\055\uff73\060\uff73\061\uffba\063\uff73\064\uff73\001\002\000" +
+    "\014\041\uffb4\043\173\044\uffb0\061\uffb0\065\330\001\002" +
+    "\000\010\041\uffb6\044\uffae\061\uffae\001\002\000\006\044" +
+    "\uffa9\061\uffa9\001\002\000\010\041\uffb3\044\uffac\061\uffac" +
+    "\001\002\000\010\041\uffb1\044\uffad\061\uffad\001\002\000" +
+    "\014\004\013\005\315\055\102\060\257\063\313\001\002" +
+    "\000\010\041\uffb2\044\uffab\061\uffab\001\002\000\006\044" +
+    "\353\061\352\001\002\000\006\004\013\055\102\001\002" +
+    "\000\006\044\uffa8\061\uffa8\001\002\000\014\040\uffa6\041" +
+    "\uffa6\043\173\044\uffa6\061\uffa6\001\002\000\050\004\uffa7" +
+    "\005\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\040" +
+    "\uffa7\041\uffa7\044\uffa7\045\uffa7\046\uffa7\051\uffa7\052\uffa7" +
+    "\055\uffa7\060\uffa7\061\uffa7\063\uffa7\064\uffa7\001\002\000" +
+    "\042\004\uff94\005\uff94\014\uff94\015\uff94\016\uff94\017\uff94" +
+    "\020\uff94\044\uff94\045\uff94\046\uff94\051\uff94\052\uff94\055" +
+    "\uff94\060\uff94\063\uff94\064\uff94\001\002\000\042\004\uff88" +
+    "\005\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\044" +
+    "\uff88\045\uff88\046\uff88\051\uff88\052\uff88\055\uff88\060\uff88" +
+    "\063\uff88\064\uff88\001\002\000\004\046\uff82\001\002\000" +
+    "\036\004\013\005\124\006\116\007\107\010\117\011\125" +
+    "\023\111\027\120\043\121\045\112\055\102\060\072\062" +
+    "\115\063\123\001\002\000\042\004\uff9a\005\uff9a\014\uff9a" +
+    "\015\uff9a\016\uff9a\017\uff9a\020\uff9a\044\uff9a\045\uff9a\046" +
+    "\uff9a\051\uff9a\052\uff9a\055\uff9a\060\uff9a\063\uff9a\064\uff9a" +
+    "\001\002\000\016\004\013\005\315\052\365\055\102\060" +
+    "\257\063\313\001\002\000\016\040\uffa5\041\uffb4\043\173" +
+    "\047\u0103\061\uffb0\065\330\001\002\000\004\040\uffa1\001" +
+    "\002\000\004\061\352\001\002\000\004\040\371\001\002" +
+    "\000\004\040\uffa3\001\002\000\036\004\013\005\124\006" +
+    "\116\007\107\010\117\011\125\023\111\027\120\043\121" +
+    "\045\112\055\102\060\072\062\115\063\123\001\002\000" +
+    "\004\051\373\001\002\000\036\004\013\005\124\006\116" +
+    "\007\107\010\117\011\125\023\111\027\120\043\121\045" +
+    "\112\055\102\060\072\062\115\063\123\001\002\000\006" +
+    "\044\376\051\375\001\002\000\026\004\013\005\315\014" +
+    "\300\016\316\017\273\020\325\052\260\055\102\060\257" +
+    "\063\313\001\002\000\030\004\013\005\315\014\300\016" +
+    "\316\017\273\020\325\045\272\052\260\055\102\060\257" +
+    "\063\313\001\002\000\034\004\uff92\005\uff92\014\uff92\016" +
+    "\uff92\017\uff92\020\uff92\045\uff92\046\uff92\052\uff92\055\uff92" +
+    "\060\uff92\063\uff92\064\uff92\001\002\000\004\044\u0101\001" +
+    "\002\000\030\004\013\005\315\014\300\016\316\017\273" +
+    "\020\325\045\272\052\260\055\102\060\257\063\313\001" +
+    "\002\000\034\004\uff93\005\uff93\014\uff93\016\uff93\017\uff93" +
+    "\020\uff93\045\uff93\046\uff93\052\uff93\055\uff93\060\uff93\063" +
+    "\uff93\064\uff93\001\002\000\010\004\013\012\064\013\062" +
+    "\001\002\000\010\040\000\041\225\050\000\001\002\000" +
+    "\010\040\000\041\225\050\000\001\002\000\006\040\uffbe" +
+    "\050\uffbe\001\002\000\006\040\uffbd\050\uffbd\001\002\000" +
+    "\006\004\013\052\u010a\001\002\000\004\047\u0103\001\002" +
+    "\000\006\040\uff9d\050\uff9d\001\002\000\006\040\uff9b\050" +
+    "\u0108\001\002\000\004\040\uff9c\001\002\000\006\040\uff9e" +
+    "\050\uff9e\001\002\000\036\004\013\005\124\006\116\007" +
+    "\107\010\117\011\125\023\111\027\120\043\121\045\112" +
+    "\055\102\060\072\062\115\063\123\001\002\000\004\044" +
+    "\u0110\001\002\000\030\004\013\005\315\014\300\016\316" +
+    "\017\273\020\325\045\272\052\260\055\102\060\257\063" +
+    "\313\001\002\000\042\004\uff97\005\uff97\014\uff97\015\u0112" +
+    "\016\uff97\017\uff97\020\uff97\044\uff97\045\uff97\046\uff97\051" +
+    "\uff97\052\uff97\055\uff97\060\uff97\063\uff97\064\uff97\001\002" +
+    "\000\030\004\013\005\315\014\300\016\316\017\273\020" +
+    "\325\045\272\052\260\055\102\060\257\063\313\001\002" +
+    "\000\042\004\uff96\005\uff96\014\uff96\015\uff96\016\uff96\017" +
+    "\uff96\020\uff96\044\uff96\045\uff96\046\uff96\051\uff96\052\uff96" +
+    "\055\uff96\060\uff96\063\uff96\064\uff96\001\002\000\004\046" +
+    "\uff7f\001\002\000\004\046\uff83\001\002\000\004\046\u0117" +
+    "\001\002\000\042\004\uff7d\005\uff7d\014\uff7d\015\uff7d\016" +
+    "\uff7d\017\uff7d\020\uff7d\044\uff7d\045\uff7d\046\uff7d\051\uff7d" +
+    "\052\uff7d\055\uff7d\060\uff7d\063\uff7d\064\uff7d\001\002\000" +
+    "\036\004\013\005\124\006\116\007\107\010\117\011\125" +
+    "\023\111\027\120\043\121\045\112\055\102\060\072\062" +
+    "\115\063\123\001\002\000\004\042\u011a\001\002\000\012" +
+    "\040\uffb7\041\uffb7\044\uffb7\061\uffb7\001\002\000\004\046" +
+    "\uff80\001\002\000\014\004\013\005\315\055\102\060\257" +
+    "\063\313\001\002\000\046\004\uff98\005\uff98\014\uff98\015" +
+    "\uff98\016\uff98\017\uff98\020\uff98\041\uffb1\044\uff98\045\uff98" +
+    "\046\uff98\051\uff98\052\uff98\055\uff98\060\uff98\061\uffad\063" +
+    "\uff98\064\uff98\001\002\000\046\004\uff99\005\uff99\014\uff99" +
+    "\015\uff99\016\uff99\017\uff99\020\uff99\041\uffb6\044\uff99\045" +
+    "\uff99\046\uff99\051\uff99\052\uff99\055\uff99\060\uff99\061\uffae" +
+    "\063\uff99\064\uff99\001\002\000\006\004\013\055\102\001" +
+    "\002\000\012\040\uffa6\041\uffa6\043\331\061\uffa6\001\002" +
+    "\000\042\004\uff8b\005\uff8b\014\uff8b\015\uff8b\016\uff8b\017" +
+    "\uff8b\020\uff8b\044\uff8b\045\uff8b\046\uff8b\051\uff8b\052\uff8b" +
+    "\055\uff8b\060\uff8b\063\uff8b\064\uff8b\001\002\000\006\044" +
+    "\uffaf\061\uffaf\001\002\000\010\004\013\012\064\013\062" +
+    "\001\002\000\004\045\uff7c\001\002\000\010\044\uffbf\045" +
+    "\uffbf\050\uffbf\001\002\000\004\046\u0127\001\002\000\012" +
+    "\002\uff74\004\uff74\046\uff74\056\uff74\001\002\000\010\004" +
+    "\013\012\064\013\062\001\002\000\006\044\uff7a\050\uff7a" +
+    "\001\002\000\006\047\060\050\056\001\002\000\042\002" +
+    "\uff84\004\uff84\005\uff84\014\uff84\016\uff84\017\uff84\020\uff84" +
+    "\045\uff84\046\uff84\051\uff84\052\uff84\055\uff84\056\uff84\060" +
+    "\uff84\063\uff84\064\uff84\001\002\000\042\002\uff85\004\uff85" +
+    "\005\uff85\014\uff85\016\uff85\017\uff85\020\uff85\045\uff85\046" +
+    "\uff85\051\uff85\052\uff85\055\uff85\056\uff85\060\uff85\063\uff85" +
+    "\064\uff85\001\002\000\010\002\uff68\004\uff68\056\uff68\001" +
+    "\002\000\004\045\u012f\001\002\000\006\004\013\046\000" +
+    "\001\002\000\004\046\u0131\001\002\000\010\002\uff67\004" +
+    "\uff67\056\uff67\001\002\000\036\004\013\005\124\006\116" +
+    "\007\107\010\117\011\125\023\111\027\120\043\121\045" +
+    "\112\055\102\060\072\062\115\063\123\001\002\000\012" +
+    "\002\uff60\004\uff60\051\uff60\056\uff60\001\002" });
 
   /** Access to parse-action table. */
   @Override
@@ -769,26 +769,26 @@ public class Parser
   /** {@code reduce_goto} table. */
   protected static final short[][] _reduce_table = 
     unpackFromStrings(new String[] {
-    "\000\u0130\000\010\002\005\003\007\005\003\001\001\000" +
-    "\030\003\026\004\017\033\030\034\027\061\031\063\024" +
-    "\066\023\067\020\073\025\074\016\075\021\001\001\000" +
+    "\000\u0131\000\010\002\005\003\007\005\003\001\001\000" +
+    "\030\003\027\004\017\033\030\034\025\061\031\063\024" +
+    "\066\023\067\020\073\026\074\016\075\021\001\001\000" +
     "\004\004\011\001\001\000\002\001\001\000\002\001\001" +
     "\000\002\001\001\000\002\001\001\000\006\003\007\005" +
     "\013\001\001\000\002\001\001\000\002\001\001\000\006" +
     "\003\007\005\015\001\001\000\002\001\001\000\002\001" +
     "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
-    "\000\004\004\037\001\001\000\030\003\026\004\017\033" +
-    "\030\034\027\061\031\063\024\066\023\067\036\073\025" +
-    "\074\016\075\021\001\001\000\002\001\001\000\030\003" +
-    "\026\004\017\033\030\034\027\061\031\063\024\066\023" +
-    "\067\033\073\025\074\016\075\021\001\001\000\002\001" +
-    "\001\000\002\001\001\000\002\001\001\000\030\003\026" +
-    "\004\017\033\030\034\027\061\031\063\024\066\023\067" +
-    "\032\073\025\074\016\075\021\001\001\000\002\001\001" +
-    "\000\002\001\001\000\030\003\026\004\017\033\030\034" +
-    "\027\061\031\063\024\066\023\067\035\073\025\074\016" +
+    "\000\004\004\037\001\001\000\030\003\027\004\017\033" +
+    "\030\034\025\061\031\063\024\066\023\067\036\073\026" +
+    "\074\016\075\021\001\001\000\002\001\001\000\002\001" +
+    "\001\000\030\003\027\004\017\033\030\034\025\061\031" +
+    "\063\024\066\023\067\033\073\026\074\016\075\021\001" +
+    "\001\000\002\001\001\000\002\001\001\000\030\003\027" +
+    "\004\017\033\030\034\025\061\031\063\024\066\023\067" +
+    "\032\073\026\074\016\075\021\001\001\000\002\001\001" +
+    "\000\002\001\001\000\030\003\027\004\017\033\030\034" +
+    "\025\061\031\063\024\066\023\067\035\073\026\074\016" +
     "\075\021\001\001\000\002\001\001\000\002\001\001\000" +
-    "\002\001\001\000\004\004\u012c\001\001\000\020\003\050" +
+    "\002\001\001\000\004\004\u012d\001\001\000\020\003\050" +
     "\004\043\033\046\061\047\063\045\064\044\065\042\001" +
     "\001\000\002\001\001\000\002\001\001\000\020\003\050" +
     "\004\043\033\046\061\047\063\045\064\044\065\052\001" +
@@ -796,8 +796,8 @@ public class Parser
     "\004\043\033\046\061\047\063\045\064\044\065\051\001" +
     "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
     "\000\020\003\050\004\043\033\046\061\047\063\045\064" +
-    "\044\065\054\001\001\000\002\001\001\000\010\004\u0128" +
-    "\033\u012a\063\u0129\001\001\000\014\003\241\004\235\056" +
+    "\044\065\054\001\001\000\002\001\001\000\010\004\u0129" +
+    "\033\u012b\063\u012a\001\001\000\014\003\241\004\235\056" +
     "\240\057\237\060\236\001\001\000\006\004\060\027\062" +
     "\001\001\000\010\003\067\031\234\032\064\001\001\000" +
     "\002\001\001\000\010\003\067\031\065\032\064\001\001" +
@@ -890,17 +890,17 @@ public class Parser
     "\056\240\057\243\001\001\000\002\001\001\000\002\001" +
     "\001\000\064\003\266\004\301\033\317\034\264\035\260" +
     "\036\265\037\270\040\305\041\302\042\263\043\303\044" +
-    "\313\045\275\046\300\047\276\050\274\051\u0124\052\255" +
+    "\313\045\275\046\300\047\276\050\274\051\u0125\052\255" +
     "\053\273\054\307\062\262\063\306\070\261\071\310\072" +
     "\311\001\001\000\012\004\247\027\252\030\250\055\251" +
-    "\001\001\000\006\003\067\032\u0123\001\001\000\002\001" +
+    "\001\001\000\006\003\067\032\u0124\001\001\000\002\001" +
     "\001\000\002\001\001\000\006\003\067\032\253\001\001" +
     "\000\002\001\001\000\064\003\266\004\301\033\317\034" +
     "\264\035\260\036\265\037\270\040\305\041\302\042\263" +
     "\043\303\044\313\045\275\046\300\047\276\050\274\051" +
     "\316\052\255\053\273\054\307\062\262\063\306\070\261" +
     "\071\310\072\311\001\001\000\002\001\001\000\004\004" +
-    "\u0120\001\001\000\002\001\001\000\002\001\001\000\002" +
+    "\u0121\001\001\000\002\001\001\000\002\001\001\000\002" +
     "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
     "\001\000\002\001\001\000\002\001\001\000\046\004\112" +
     "\006\121\007\126\010\070\011\072\012\073\013\074\014" +
@@ -998,20 +998,21 @@ public class Parser
     "\006\121\007\126\010\070\011\072\012\073\013\074\014" +
     "\075\015\077\016\100\017\103\020\104\021\107\022\102" +
     "\023\125\024\u0118\035\076\001\001\000\002\001\001\000" +
-    "\002\001\001\000\020\004\341\035\u011c\036\344\037\270" +
-    "\070\365\071\u011b\072\347\001\001\000\002\001\001\000" +
-    "\002\001\001\000\010\004\u011e\035\354\062\u011f\001\001" +
-    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
-    "\012\004\247\027\252\030\250\055\u0122\001\001\000\002" +
+    "\002\001\001\000\002\001\001\000\020\004\341\035\u011d" +
+    "\036\344\037\270\070\365\071\u011c\072\347\001\001\000" +
+    "\002\001\001\000\002\001\001\000\010\004\u011f\035\354" +
+    "\062\u0120\001\001\000\002\001\001\000\002\001\001\000" +
+    "\002\001\001\000\012\004\247\027\252\030\250\055\u0123" +
     "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
-    "\001\000\010\004\247\027\252\030\u0127\001\001\000\002" +
+    "\001\000\002\001\001\000\010\004\247\027\252\030\u0128" +
     "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
-    "\001\000\002\001\001\000\002\001\001\000\020\003\050" +
-    "\004\043\033\046\061\047\063\045\064\044\065\u012e\001" +
-    "\001\000\002\001\001\000\002\001\001\000\044\004\112" +
-    "\006\121\007\126\010\070\011\072\012\073\013\074\014" +
-    "\075\015\077\016\100\017\103\020\104\021\107\022\102" +
-    "\023\125\024\u0131\035\076\001\001\000\002\001\001" });
+    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
+    "\000\020\003\050\004\043\033\046\061\047\063\045\064" +
+    "\044\065\u012f\001\001\000\002\001\001\000\002\001\001" +
+    "\000\044\004\112\006\121\007\126\010\070\011\072\012" +
+    "\073\013\074\014\075\015\077\016\100\017\103\020\104" +
+    "\021\107\022\102\023\125\024\u0132\035\076\001\001\000" +
+    "\002\001\001" });
 
   /** Access to {@code reduce_goto} table. */
   @Override
@@ -1081,7 +1082,7 @@ class CUP$Parser$actions {
         this.parser = parser;
     }
 
-    /** Method with the actual generated action code for actions 0 to 165. */
+    /** Method with the actual generated action code for actions 0 to 166. */
     public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
             int                        CUP$Parser$act_num,
             java_cup.runtime.lr_parser CUP$Parser$parser,
@@ -2782,7 +2783,16 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 129: // block_list ::= for_loop block_list 
+        case 129: // block_list ::= RETURN SEMICOLON 
+            {
+                BlockList RESULT = null;
+                 List<Block> bl = new LinkedList<>(); bl.add(0,new ReturnStatement(new LinkedList<>())); RESULT = new BlockList(bl); 
+                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_list",39, CUP$Parser$stack.elementAt(CUP$Parser$top-1), CUP$Parser$stack.peek(), RESULT);
+            }
+            return CUP$Parser$result;
+
+        /*. . . . . . . . . . . . . . . . . . . .*/
+        case 130: // block_list ::= for_loop block_list 
             {
                 BlockList RESULT = null;
                 int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
@@ -2797,7 +2807,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 130: // block_list ::= empty 
+        case 131: // block_list ::= empty 
             {
                 BlockList RESULT = null;
                  List<Block> bl = new LinkedList<>(); RESULT = new BlockList(bl); 
@@ -2806,7 +2816,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 131: // block_scope ::= OPEN_BRACE block_list CLOSE_BRACE 
+        case 132: // block_scope ::= OPEN_BRACE block_list CLOSE_BRACE 
             {
                 BlockList RESULT = null;
                 int blleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
@@ -2818,7 +2828,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 132: // function_declaration_return_types ::= var_type COMMA function_declaration_return_types 
+        case 133: // function_declaration_return_types ::= var_type COMMA function_declaration_return_types 
             {
                 List<VariableType> RESULT = null;
                 int tleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
@@ -2833,7 +2843,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 133: // function_declaration_return_types ::= var_type 
+        case 134: // function_declaration_return_types ::= var_type 
             {
                 List<VariableType> RESULT = null;
                 int tleft = CUP$Parser$stack.peek().left;
@@ -2845,7 +2855,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 134: // function_declaration_argument_single ::= identifier COLON var_type 
+        case 135: // function_declaration_argument_single ::= identifier COLON var_type 
             {
                 SimpleEntry<Identifier,VariableType> RESULT = null;
                 int ileft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
@@ -2860,7 +2870,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 135: // function_declaration_argument_list ::= function_declaration_argument_single COMMA function_declaration_argument_list 
+        case 136: // function_declaration_argument_list ::= function_declaration_argument_single COMMA function_declaration_argument_list 
             {
                 List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                 int fdasleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
@@ -2875,7 +2885,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 136: // function_declaration_argument_list ::= function_declaration_argument_single 
+        case 137: // function_declaration_argument_list ::= function_declaration_argument_single 
             {
                 List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                 int fdasleft = CUP$Parser$stack.peek().left;
@@ -2887,7 +2897,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 137: // function_declaration_argument ::= function_declaration_argument_list 
+        case 138: // function_declaration_argument ::= function_declaration_argument_list 
             {
                 List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                 int lstleft = CUP$Parser$stack.peek().left;
@@ -2899,7 +2909,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 138: // function_declaration_argument ::= empty 
+        case 139: // function_declaration_argument ::= empty 
             {
                 List<SimpleEntry<Identifier,VariableType>> RESULT = null;
                  RESULT = new LinkedList<>(); 
@@ -2908,7 +2918,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 139: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN COLON function_declaration_return_types OPEN_BRACE block_list CLOSE_BRACE 
+        case 140: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN COLON function_declaration_return_types OPEN_BRACE block_list CLOSE_BRACE 
             {
                 FunctionDeclaration RESULT = null;
                 int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-8).left;
@@ -2929,7 +2939,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 140: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN OPEN_BRACE block_list CLOSE_BRACE 
+        case 141: // function_declaration ::= identifier OPEN_PAREN function_declaration_argument CLOSE_PAREN OPEN_BRACE block_list CLOSE_BRACE 
             {
                 FunctionDeclaration RESULT = null;
                 int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-6).left;
@@ -2947,7 +2957,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 141: // procedure_call ::= identifier OPEN_PAREN expression_list CLOSE_PAREN 
+        case 142: // procedure_call ::= identifier OPEN_PAREN expression_list CLOSE_PAREN 
             {
                 ProcedureCall RESULT = null;
                 int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
@@ -2962,7 +2972,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 142: // procedure_call ::= identifier OPEN_PAREN CLOSE_PAREN 
+        case 143: // procedure_call ::= identifier OPEN_PAREN CLOSE_PAREN 
             {
                 ProcedureCall RESULT = null;
                 int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
@@ -2974,7 +2984,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 143: // use_block ::= USE identifier use_block 
+        case 144: // use_block ::= USE identifier use_block 
             {
                 List<UseStatement> RESULT = null;
                 int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
@@ -2989,7 +2999,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 144: // use_block ::= USE identifier SEMICOLON use_block 
+        case 145: // use_block ::= USE identifier SEMICOLON use_block 
             {
                 List<UseStatement> RESULT = null;
                 int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
@@ -3004,7 +3014,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 145: // use_block ::= empty 
+        case 146: // use_block ::= empty 
             {
                 List<UseStatement> RESULT = null;
                  RESULT = new LinkedList<UseStatement>(); 
@@ -3013,7 +3023,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 146: // field ::= typed_declaration_list 
+        case 147: // field ::= typed_declaration_list 
             {
                 List<TypedDeclaration> RESULT = null;
                 int tdleft = CUP$Parser$stack.peek().left;
@@ -3025,7 +3035,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 147: // field ::= typed_declaration 
+        case 148: // field ::= typed_declaration 
             {
                 List<TypedDeclaration> RESULT = null;
                 int tdleft = CUP$Parser$stack.peek().left;
@@ -3037,7 +3047,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 148: // class_declaration_body ::= field class_declaration_body 
+        case 149: // class_declaration_body ::= field class_declaration_body 
             {
                 Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                 int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
@@ -3052,7 +3062,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 149: // class_declaration_body ::= field SEMICOLON class_declaration_body 
+        case 150: // class_declaration_body ::= field SEMICOLON class_declaration_body 
             {
                 Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                 int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
@@ -3067,7 +3077,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 150: // class_declaration_body ::= function_declaration class_declaration_body 
+        case 151: // class_declaration_body ::= function_declaration class_declaration_body 
             {
                 Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                 int fleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
@@ -3082,7 +3092,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 151: // class_declaration_body ::= empty 
+        case 152: // class_declaration_body ::= empty 
             {
                 Pair<List<TypedDeclaration>,List<FunctionDeclaration>> RESULT = null;
                  Pair<List<TypedDeclaration>, List<FunctionDeclaration>> pair = new Pair<>(new LinkedList<>(), new LinkedList<>()); RESULT = pair; 
@@ -3091,7 +3101,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 152: // class_declaration ::= CLASS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
+        case 153: // class_declaration ::= CLASS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
             {
                 ClassDeclaration RESULT = null;
                 int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-3).left;
@@ -3106,7 +3116,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 153: // class_declaration ::= CLASS identifier EXTENDS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
+        case 154: // class_declaration ::= CLASS identifier EXTENDS identifier OPEN_BRACE class_declaration_body CLOSE_BRACE 
             {
                 ClassDeclaration RESULT = null;
                 int idleft = CUP$Parser$stack.elementAt(CUP$Parser$top-5).left;
@@ -3124,7 +3134,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 154: // program_body ::= global_variable program_body 
+        case 155: // program_body ::= global_variable program_body 
             {
                 Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                 int gleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
@@ -3139,7 +3149,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 155: // program_body ::= global_variable SEMICOLON program_body 
+        case 156: // program_body ::= global_variable SEMICOLON program_body 
             {
                 Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                 int gleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
@@ -3154,7 +3164,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 156: // program_body ::= function_declaration program_body 
+        case 157: // program_body ::= function_declaration program_body 
             {
                 Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                 int fdleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
@@ -3169,7 +3179,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 157: // program_body ::= class_declaration program_body 
+        case 158: // program_body ::= class_declaration program_body 
             {
                 Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                 int cleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
@@ -3184,7 +3194,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 158: // program_body ::= empty 
+        case 159: // program_body ::= empty 
             {
                 Triple<List<Assignment>,List<FunctionDeclaration>,List<ClassDeclaration>> RESULT = null;
                  Triple<List<Assignment>, List<FunctionDeclaration>, List<ClassDeclaration>> body = new Triple<>(new LinkedList<>(), new LinkedList<>(), new LinkedList<>()); RESULT = body; 
@@ -3193,7 +3203,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 159: // global_variable_assignable ::= typed_declaration_no_size 
+        case 160: // global_variable_assignable ::= typed_declaration_no_size 
             {
                 Assignable RESULT = null;
                 int tdleft = CUP$Parser$stack.peek().left;
@@ -3205,7 +3215,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 160: // global_variable_assignment ::= global_variable_assignable GETS expression 
+        case 161: // global_variable_assignment ::= global_variable_assignable GETS expression 
             {
                 Assignment RESULT = null;
                 int aleft = CUP$Parser$stack.elementAt(CUP$Parser$top-2).left;
@@ -3220,7 +3230,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 161: // global_variable ::= typed_declaration_list 
+        case 162: // global_variable ::= typed_declaration_list 
             {
                 List<Assignment> RESULT = null;
                 int lstleft = CUP$Parser$stack.peek().left;
@@ -3232,7 +3242,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 162: // global_variable ::= global_variable_assignment 
+        case 163: // global_variable ::= global_variable_assignment 
             {
                 List<Assignment> RESULT = null;
                 int aleft = CUP$Parser$stack.peek().left;
@@ -3244,7 +3254,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 163: // global_variable ::= typed_declaration 
+        case 164: // global_variable ::= typed_declaration 
             {
                 List<Assignment> RESULT = null;
                 int tdleft = CUP$Parser$stack.peek().left;
@@ -3256,7 +3266,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 164: // program ::= use_block program_body 
+        case 165: // program ::= use_block program_body 
             {
                 Program RESULT = null;
                 int uleft = CUP$Parser$stack.elementAt(CUP$Parser$top-1).left;
@@ -3271,7 +3281,7 @@ class CUP$Parser$actions {
             return CUP$Parser$result;
 
         /*. . . . . . . . . . . . . . . . . . . .*/
-        case 165: // program ::= error 
+        case 166: // program ::= error 
             {
                 Program RESULT = null;
 
diff --git a/Compiler/src/com/bwz6jk2227esl89ahj34/ast/visit/MIRGenerateVisitor.java b/Compiler/src/com/bwz6jk2227esl89ahj34/ast/visit/MIRGenerateVisitor.java
index 64c5a0c..bfd99f5 100644
--- a/Compiler/src/com/bwz6jk2227esl89ahj34/ast/visit/MIRGenerateVisitor.java
+++ b/Compiler/src/com/bwz6jk2227esl89ahj34/ast/visit/MIRGenerateVisitor.java
@@ -1057,7 +1057,7 @@ public class MIRGenerateVisitor implements NodeVisitor {
             stmts.add((IRStmt) generatedNodes.pop());
         }
         stmts.add(new IRReturn());
-        return new IRFuncDecl("_I_init_" + name, new IRSeq(stmts));
+        return new IRFuncDecl("_I_init_" + name.replace('-', '$'), new IRSeq(stmts));
     }
 
 
diff --git a/Compiler/src/com/bwz6jk2227esl89ahj34/ast/visit/TypeCheckVisitor.java b/Compiler/src/com/bwz6jk2227esl89ahj34/ast/visit/TypeCheckVisitor.java
index fe8d989..9b61121 100644
--- a/Compiler/src/com/bwz6jk2227esl89ahj34/ast/visit/TypeCheckVisitor.java
+++ b/Compiler/src/com/bwz6jk2227esl89ahj34/ast/visit/TypeCheckVisitor.java
@@ -564,6 +564,9 @@ public class TypeCheckVisitor implements NodeVisitor {
      * Checks that the given BlockList is guaranteed to return by the end
      */
     public static boolean checkFunctionBlockList(BlockList blockList) {
+        if (blockList.getBlocks().size() == 0) {
+            return false;
+        }
         Block lastBlock = blockList.getBlocks().get(blockList.getBlocks().size() - 1);
 
         if (lastBlock instanceof ReturnStatement) {
@@ -1138,7 +1141,12 @@ public class TypeCheckVisitor implements NodeVisitor {
 
         // Look for an interface file for this file, doesn't need to exist
         Interface interface4120 = new Interface();
-        String filename = moduleName.substring(0, moduleName.length() - 3);
+        String filename;
+        if (moduleName.contains(".")) {
+            filename = moduleName.substring(0, moduleName.length() - 3);
+        } else {
+            filename = moduleName;
+        }
         if (filename.contains("/")) {
             filename = filename.substring(filename.lastIndexOf('/') + 1);
         }
@@ -1166,6 +1174,10 @@ public class TypeCheckVisitor implements NodeVisitor {
                 definition.setMethods(newMethodList);
             }
 
+            for (UseStatement useStatement : interface4120.getUseBlock()) {
+                useStatement.accept(this);
+            }
+
             // TODO: also check that the function declarations match?
         } else if (!err.contains("not found")) {
             // Some error other than interface file not found
diff --git a/parser/ParserSym.java b/parser/ParserSym.java
index ab98b89..120cef5 100644
--- a/parser/ParserSym.java
+++ b/parser/ParserSym.java
@@ -10,6 +10,7 @@ public class ParserSym {
   /* terminals */
   public static final int EXTENDS = 45;
   public static final int NEW = 46;
+  public static final int INSTANCEOF = 52;
   public static final int UNDERSCORE = 40;
   public static final int LT = 22;
   public static final int INTEGER_LITERAL = 5;
@@ -20,6 +21,7 @@ public class ParserSym {
   public static final int BREAK = 13;
   public static final int ELSE = 11;
   public static final int IF = 10;
+  public static final int CAST = 51;
   public static final int NULL = 48;
   public static final int CHARACTER_LITERAL = 4;
   public static final int HIGH_MULT = 41;
@@ -110,7 +112,9 @@ public class ParserSym {
   "PERIOD",
   "NULL",
   "THIS",
-  "FOR"
+  "FOR",
+  "CAST",
+  "INSTANCEOF"
   };
 }
 
diff --git a/parser/xi.cup b/parser/xi.cup
index eed17e4..6165850 100755
--- a/parser/xi.cup
+++ b/parser/xi.cup
@@ -87,7 +87,7 @@ nonterminal Assignment assignment;
 nonterminal IfStatement if_statement;
 nonterminal WhileStatement while_statement;
 nonterminal ReturnStatement return_statement;
-nonterminal BlockList for_loop; 
+nonterminal BlockList for_loop;
 nonterminal Block block;
 nonterminal BlockList block_list;
 nonterminal BlockList block_scope;
@@ -102,15 +102,15 @@ nonterminal List<SimpleEntry<Identifier, VariableType>> function_declaration_arg
 nonterminal FunctionDeclaration function_declaration;
 
 nonterminal ProcedureCall procedure_call;
-nonterminal List<TypedDeclaration> typed_declaration_list; 
-nonterminal List<TypedDeclaration> field; 
+nonterminal List<TypedDeclaration> typed_declaration_list;
+nonterminal List<TypedDeclaration> field;
 nonterminal Pair<List<TypedDeclaration>, List<FunctionDeclaration>> class_declaration_body;
-nonterminal ClassDeclaration class_declaration; 
+nonterminal ClassDeclaration class_declaration;
 nonterminal Triple<List<Assignment>, List<FunctionDeclaration>, List<ClassDeclaration>> program_body;
-nonterminal Expression object_expression; 
-nonterminal ObjectFunctionCall object_function_call; 
-nonterminal ObjectField object_field; 
-nonterminal List<Assignment> global_variable; 
+nonterminal Expression object_expression;
+nonterminal ObjectFunctionCall object_function_call;
+nonterminal ObjectField object_field;
+nonterminal List<Assignment> global_variable;
 nonterminal Assignable global_variable_assignable;
 nonterminal Assignment global_variable_assignment;
 
@@ -261,7 +261,7 @@ object_expression ::= identifier:id {: RESULT = id; RESULT.setLocation(id); :}
                     | NEW identifier:id {: RESULT = new ObjectInstantiation(id); RESULT.setLocation(id); :}
                     | function_call:fc {: RESULT = fc;  RESULT.setLocation(fc); :}
                     | object_function_call:ofc {: RESULT = ofc;RESULT.setLocation(ofc); :}
-                    | assignment_lhs_array_brackets:ai {: RESULT = ai; RESULT.setLocation(ai); :} 
+                    | assignment_lhs_array_brackets:ai {: RESULT = ai; RESULT.setLocation(ai); :}
                     | object_field:of {: RESULT = of; RESULT.setLocation(of); :}
                     | THIS {: RESULT = new This(); RESULT.setLocation(parser.stack.peek()); :}
                     | identifier:i CAST object_expression:e {: RESULT = new CastedExpression(i, e); :}
@@ -269,10 +269,10 @@ object_expression ::= identifier:id {: RESULT = id; RESULT.setLocation(id); :}
                     ;
 
 object_function_call ::= object_expression:e PERIOD function_call:fc {: RESULT = new ObjectFunctionCall(fc.getIdentifier(), e, fc.getArguments()); RESULT.setLocation(e); :}
-                       ; 
+                       ;
 
 object_field ::= object_expression:e PERIOD identifier:id {: RESULT = new ObjectField(e, id); RESULT.setLocation(e); :}
-               ; 
+               ;
 
 assignment_lhs ::= identifier:id {: RESULT = id; RESULT.setLocation(parser.cur_token); :}
                  | assignment_lhs_array_brackets:a {: RESULT = a; RESULT.setLocation(parser.cur_token); :}
@@ -307,7 +307,7 @@ return_statement ::= RETURN expression_list:lst {: RESULT = new ReturnStatement(
 
 for_loop ::= FOR OPEN_PAREN assignment_lhs:al GETS expression:e SEMICOLON expression:t SEMICOLON statement:s CLOSE_PAREN  block:b {: List<Assignable> lst = new LinkedList<>(); lst.add(0, al); List<Block> blocks = new LinkedList<Block>(); blocks.add(new Assignment(lst, e)); List<Block> body_blocks = new LinkedList<>(); body_blocks.add(b); body_blocks.add(s); BlockList body = new BlockList(body_blocks); blocks.add(new WhileStatement(t, body)); RESULT = new BlockList(blocks); RESULT.setLocation(parser.cur_token); :}
                      | FOR OPEN_PAREN assignment_lhs:al GETS expression:e SEMICOLON expression:t CLOSE_PAREN  block:b {: List<Assignable> lst = new LinkedList<>(); lst.add(0, al); List<Block> blocks = new LinkedList<Block>(); blocks.add(new Assignment(lst, e)); blocks.add(new WhileStatement(t, b)); RESULT = new BlockList(blocks); RESULT.setLocation(parser.cur_token); :}
-                     ; 
+                     ;
 
 statement_no_semicolon ::= if_statement:s {: RESULT = s; RESULT.setLocation(s); :}
                          | while_statement:s {: RESULT = s; RESULT.setLocation(s); :}
@@ -328,14 +328,15 @@ block ::= block_scope:bl {: RESULT = bl; RESULT.setLocation(bl); :}
         | statement:s {: RESULT = s; RESULT.setLocation(s); :}
         ;
 
-// x,y:int 
+// x,y:int
 typed_declaration_list ::= identifier:id COMMA typed_declaration:td {: List<TypedDeclaration> f = new LinkedList<>(); f.add(td); f.add(new TypedDeclaration(id, td.getDeclarationType(), td.getArraySizes())); RESULT = f; RESULT.get(0).setLocation(id); :}
-              | identifier:id COMMA typed_declaration_list:f {: TypedDeclaration temp = f.get(f.size()-1); f.add(new TypedDeclaration(id, temp.getDeclarationType(), temp.getArraySizes())); RESULT = f; RESULT.get(0).setLocation(id); :} 
-              ; 
+              | identifier:id COMMA typed_declaration_list:f {: TypedDeclaration temp = f.get(f.size()-1); f.add(new TypedDeclaration(id, temp.getDeclarationType(), temp.getArraySizes())); RESULT = f; RESULT.get(0).setLocation(id); :}
+              ;
 
 block_list ::= block:b block_list:bl {: bl.getBlocks().add(0, b); RESULT = bl; :}
              | typed_declaration_list:f block_list:bl {: for(TypedDeclaration td : f) { bl.getBlocks().add(0, td); } RESULT = bl; :}
              | RETURN {: List<Block> bl = new LinkedList<>(); bl.add(0,new ReturnStatement(new LinkedList<>())); RESULT = new BlockList(bl); :}
+             | RETURN SEMICOLON {: List<Block> bl = new LinkedList<>(); bl.add(0,new ReturnStatement(new LinkedList<>())); RESULT = new BlockList(bl); :}
              | for_loop:f block_list:bl {: bl.getBlocks().add(0, f); RESULT = bl; :}
              | empty  {: List<Block> bl = new LinkedList<>(); RESULT = new BlockList(bl); :}
              ;
@@ -379,7 +380,7 @@ class_declaration_body ::= field:f class_declaration_body:c {: for(TypedDeclarat
                        | field:f SEMICOLON class_declaration_body:c {: for(TypedDeclaration td : f) { c.part1().add(0, td); } RESULT = c ; :}
                        | function_declaration:f class_declaration_body:c {: c.part2().add(0, f); RESULT = c; :}
                        | empty {: Pair<List<TypedDeclaration>, List<FunctionDeclaration>> pair = new Pair<>(new LinkedList<>(), new LinkedList<>()); RESULT = pair; :}
-                       ; 
+                       ;
 
 class_declaration ::= CLASS identifier:id OPEN_BRACE class_declaration_body:body CLOSE_BRACE {: List<MethodDeclaration> methods = new LinkedList<>(); for(FunctionDeclaration fd : body.part2()) { methods.add(new MethodDeclaration(id, fd)); } RESULT = new ClassDeclaration(id, body.part1(), methods, Optional.empty()); :}
                     | CLASS identifier:id EXTENDS identifier:id2 OPEN_BRACE class_declaration_body:body CLOSE_BRACE {: List<MethodDeclaration> methods = new LinkedList<>(); for(FunctionDeclaration fd : body.part2()) { methods.add(new MethodDeclaration(id, fd)); } RESULT = new ClassDeclaration(id, body.part1(), methods, Optional.of(id2)); :}
@@ -387,22 +388,22 @@ class_declaration ::= CLASS identifier:id OPEN_BRACE class_declaration_body:body
 
 program_body ::= global_variable:g program_body:p {: for (Assignment ga : g) { p.getA().add(0, ga); } RESULT = p; :}
                | global_variable:g SEMICOLON program_body:p {: for (Assignment ga : g) { p.getA().add(0, ga); } RESULT = p; :}
-               | function_declaration:fd program_body:p {: p.getB().add(fd); RESULT = p; :} 
+               | function_declaration:fd program_body:p {: p.getB().add(fd); RESULT = p; :}
                | class_declaration:c program_body:p {: p.getC().add(c); RESULT = p; :}
                | empty {: Triple<List<Assignment>, List<FunctionDeclaration>, List<ClassDeclaration>> body = new Triple<>(new LinkedList<>(), new LinkedList<>(), new LinkedList<>()); RESULT = body; :}
-               ; 
+               ;
 
 
 global_variable_assignable ::= typed_declaration_no_size:td {: RESULT = td; RESULT.setLocation(parser.cur_token); :}
                  ;
 
 global_variable_assignment ::= global_variable_assignable:a GETS expression:e {:  RESULT = new Assignment(a, e); RESULT.setLocation(parser.cur_token); :}// x = expression
-                             ; 
+                             ;
 
-global_variable ::= typed_declaration_list:lst {: List<Assignment> assignments = new LinkedList<>(); for (TypedDeclaration td : lst) { if (td.getDeclarationType() instanceof IntType) { assignments.add(new Assignment(td, new IntegerLiteral("0"))); } else if (td.getDeclarationType() instanceof BoolType) { assignments.add(new Assignment(td, new BooleanLiteral(false))); } else { assignments.add(new Assignment(td, new Null())); } } RESULT = assignments; :} 
+global_variable ::= typed_declaration_list:lst {: List<Assignment> assignments = new LinkedList<>(); for (TypedDeclaration td : lst) { if (td.getDeclarationType() instanceof IntType) { assignments.add(new Assignment(td, new IntegerLiteral("0"))); } else if (td.getDeclarationType() instanceof BoolType) { assignments.add(new Assignment(td, new BooleanLiteral(false))); } else { assignments.add(new Assignment(td, new Null())); } } RESULT = assignments; :}
                   | global_variable_assignment:a {: List<Assignment> assignables = new LinkedList<>(); assignables.add(a); RESULT = assignables; :}
                   | typed_declaration:td {:  List<Assignment> assignments = new LinkedList<>(); if (td.getDeclarationType() instanceof IntType) { assignments.add(new Assignment(td, new IntegerLiteral("0"))); } else if (td.getDeclarationType() instanceof BoolType) { assignments.add(new Assignment(td, new BooleanLiteral(false))); } else { assignments.add(new Assignment(td, new Null())); } RESULT = assignments; :}
-                  ; 
+                  ;
 
 program ::= use_block:u program_body:b {: RESULT = new Program(u, b.getA(), b.getB(), b.getC()); RESULT.setLocation(parser.cur_token); :}
           | error
-- 
2.7.4 (Apple Git-66)

