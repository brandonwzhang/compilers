package com.bwz6jk2227esl89ahj34.ast.parse;

import com.bwz6jk2227esl89ahj34.ast.FunctionDeclaration;
import com.bwz6jk2227esl89ahj34.ast.FunctionType;
import com.bwz6jk2227esl89ahj34.ast.Identifier;
import com.bwz6jk2227esl89ahj34.ast.type.PrimitiveType;
import com.bwz6jk2227esl89ahj34.ast.type.VariableType;
import com.bwz6jk2227esl89ahj34.ast.type.VariableTypeList;
import com.bwz6jk2227esl89ahj34.util.Util;
import java_cup.runtime.Symbol;

import java.io.FileReader;
import java.util.AbstractMap.SimpleEntry;
import java.util.LinkedList;
import java.util.List;

class InterfaceParser;

parser code {:

    /**
     * Parses an interface file and adds the declarations to a given list
     * @param libPath       a String of the path to the interface files
     * @param interfaceName a String of the name of the interface
     * @param declarations  a List<FunctionDeclaration> to store the parsed function declarations that must be empty
     * @return              a String of the error or null if no error
     */
    public static String parseInterface(String libPath, String interfaceName, List<FunctionDeclaration> declarations) {
        assert(declarations.size() == 0);
        try {
            FileReader reader = new FileReader(libPath + interfaceName + ".ixi");
            Lexer lexer = new Lexer(reader);
            InterfaceParser parser = new InterfaceParser(lexer);
            Symbol result = parser.parse();
            if (parser.hasSyntaxError) {
                // Encountered parsing error, return error message
                return parser.syntaxErrMessage;
            }
            declarations.addAll((List<FunctionDeclaration>) result.value);
        } catch(Exception e) {
            return "Interface " + interfaceName + " not found";
        }
        return null;
    }

    public boolean hasSyntaxError = false;
    public String syntaxErrMessage = "";

    public void syntax_error(java_cup.runtime.Symbol cur_token){
        hasSyntaxError = true;
        syntaxErrMessage = cur_token.left + ":" + cur_token.right +
          " error: Unexpected token " + Util.symbolTranslation.get(cur_token.sym);
        if (cur_token.value != null) {
            syntaxErrMessage += " " + cur_token.value;
        }
        done_parsing();
    }
:}

terminal String IDENTIFIER;
terminal String STRING_LITERAL;
terminal Character CHARACTER_LITERAL;
terminal String INTEGER_LITERAL;
terminal TRUE, FALSE;
terminal INT, BOOL;

terminal IF, ELSE, WHILE, BREAK, RETURN, USE, PLUS, MINUS, TIMES,
  DIVIDE, MODULO, NOT, LT, LEQ, GT, GEQ, AND, OR, EQUAL, NOT_EQUAL, GETS,
  OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAREN, CLOSE_PAREN, OPEN_BRACE, CLOSE_BRACE,
  COLON, COMMA, SEMICOLON, UNDERSCORE, HIGH_MULT, NEGATIVE_INT_BOUND, LENGTH, CLASS, EXTENDS;

nonterminal empty;

nonterminal PrimitiveType primitive_type;
nonterminal VariableType var_type;
nonterminal Integer array_no_size_type;

nonterminal List<VariableType> function_declaration_return_types;
nonterminal SimpleEntry<Identifier, VariableType> function_declaration_argument_single;
nonterminal List<SimpleEntry<Identifier, VariableType>> function_declaration_argument_list;
nonterminal List<SimpleEntry<Identifier, VariableType>> function_declaration_argument;

nonterminal FunctionDeclaration function_declaration;
nonterminal FunctionDeclaration function_declaration_line;
nonterminal List<FunctionDeclaration> function_declaration_list;

start with function_declaration_list;
empty ::= ;

primitive_type ::= INT {: RESULT = PrimitiveType.INT; :}
                 | BOOL {: RESULT = PrimitiveType.BOOL; :}
                 ;

array_no_size_type ::= OPEN_BRACKET CLOSE_BRACKET array_no_size_type:anst {: RESULT = anst + 1; :}
                     | empty {: RESULT = 0; :}
                     ;

var_type ::= primitive_type:pt array_no_size_type: anst {: RESULT = new VariableType(pt, anst); :}
       ;

function_declaration_return_types ::= var_type:t COMMA function_declaration_return_types:lst {: lst.add(0,t); RESULT = lst; :}
       | var_type:t  {: List<VariableType> lst = new LinkedList<>(); lst.add(0, t); RESULT = lst; :}
       ;

function_declaration_argument_single ::= IDENTIFIER:i COLON var_type:t {: RESULT = new SimpleEntry<Identifier, VariableType>(new Identifier(i), t); :}
                                       ;

function_declaration_argument_list ::= function_declaration_argument_single:fdas COMMA function_declaration_argument_list:lst {: lst.add(0, fdas); RESULT = lst; :}
                                     | function_declaration_argument_single:fdas {: List<SimpleEntry<Identifier, VariableType>> lst = new LinkedList<>(); lst.add(0, fdas); RESULT = lst; :}
                                     ;

function_declaration_argument ::= function_declaration_argument_list:lst {: RESULT = lst; :}
                                | empty {: RESULT = new LinkedList<>(); :}
                                ;

function_declaration ::= IDENTIFIER:id OPEN_PAREN function_declaration_argument:argPairs CLOSE_PAREN COLON function_declaration_return_types:t {: List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(new Identifier(id), new FunctionType(argTypes, new VariableTypeList(t)), args, null); :}
                       | IDENTIFIER:id OPEN_PAREN function_declaration_argument:argPairs CLOSE_PAREN {: List<Identifier> args = new LinkedList<>(); List<VariableType> argTypes = new LinkedList<>(); for (SimpleEntry<Identifier, VariableType> se : argPairs) { args.add(se.getKey()); argTypes.add(se.getValue()); } RESULT = new FunctionDeclaration(new Identifier(id), new FunctionType(argTypes, new VariableTypeList(new LinkedList<>())), args, null); :}
                       ;

function_declaration_line ::= function_declaration:fd {: RESULT = fd; :}
                            | function_declaration:fd SEMICOLON {: RESULT = fd; :}
                            ;
function_declaration_list ::= function_declaration_line:fd function_declaration_list:lst {: lst.add(0, fd); RESULT = lst; :}
                            | function_declaration_line:fd {: RESULT = new LinkedList<FunctionDeclaration>(); RESULT.add(fd); :}
                            ;
