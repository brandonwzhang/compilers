
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package com.bwz6jk2227esl89ahj34;


/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\003\002\000\002\011" +
    "\003\000\002\011\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\005\000\002\010\004\000" +
    "\002\010\004\000\002\012\006\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\004\000\002" +
    "\013\005\000\002\013\005\000\002\017\003\000\002\017" +
    "\003\000\002\022\006\000\002\022\003\000\002\023\005" +
    "\000\002\023\003\000\002\020\004\000\002\021\005\000" +
    "\002\021\003\000\002\024\005\000\002\025\005\000\002" +
    "\025\003\000\002\026\006\000\002\026\005\000\002\026" +
    "\006\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\005\000\002\030\003\000\002\031\005\000" +
    "\002\031\005\000\002\032\007\000\002\032\011\000\002" +
    "\033\007\000\002\034\004\000\002\034\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\037\003\000\002\037\004\000" +
    "\002\043\006\000\002\035\005\000\002\035\003\000\002" +
    "\035\003\000\002\036\004\000\002\036\003\000\002\041" +
    "\011\000\002\041\007\000\002\042\004\000\002\042\003" +
    "\000\002\045\006\000\002\045\005\000\002\004\005\000" +
    "\002\004\003\000\002\002\004" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\010\002\000\004\000\021\005\001\002\000" +
    "\006\002\000\004\013\001\002\000\004\004\011\001\002" +
    "\000\004\002\010\001\002\000\006\002\uffaa\004\uffaa\001" +
    "\002\000\004\002\001\001\002\000\010\002\000\004\000" +
    "\021\005\001\002\000\006\002\uffab\004\uffab\001\002\000" +
    "\004\044\020\001\002\000\004\002\uffa9\001\002\000\006" +
    "\002\000\004\013\001\002\000\004\002\uffae\001\002\000" +
    "\004\002\uffaf\001\002\000\004\004\021\001\002\000\004" +
    "\050\141\001\002\000\004\045\026\001\002\000\006\045" +
    "\uffce\051\024\001\002\000\004\004\021\001\002\000\004" +
    "\045\uffcf\001\002\000\004\050\030\001\002\000\006\002" +
    "\uffb0\004\uffb0\001\002\000\006\012\035\013\032\001\002" +
    "\000\002\001\002\000\010\042\uffd8\045\uffd8\051\uffd8\001" +
    "\002\000\010\042\041\045\000\051\000\001\002\000\004" +
    "\051\036\001\002\000\010\042\uffd9\045\uffd9\051\uffd9\001" +
    "\002\000\006\012\035\013\032\001\002\000\002\001\002" +
    "\000\006\045\uffd3\051\uffd3\001\002\000\030\004\063\005" +
    "\061\006\047\007\055\010\054\011\062\022\051\024\056" +
    "\030\057\043\053\046\060\001\002\000\006\045\uffd6\051" +
    "\uffd6\001\002\000\006\045\uffd4\051\uffd4\001\002\000\050" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\042\uffe1\043\uffe1\045\uffe1\047\uffe1\051\uffe1\054\uffe1\001" +
    "\002\000\042\023\113\024\104\025\075\026\105\027\100" +
    "\031\102\032\112\033\103\034\107\035\110\036\074\037" +
    "\076\040\111\042\101\043\136\054\077\001\002\000\050" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\042\uffe0\043\uffe0\045\uffe0\047\uffe0\051\uffe0\054\uffe0\001" +
    "\002\000\050\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\042\uffe7\043\uffe7\045\uffe7\047\uffe7\051\uffe7" +
    "\054\uffe7\001\002\000\050\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\045\uffe5\047" +
    "\uffe5\051\uffe5\054\uffe5\001\002\000\004\044\133\001\002" +
    "\000\050\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\042\uffe3\043\uffe3\045\uffe3\047\uffe3\051\uffe3\054" +
    "\uffe3\001\002\000\010\042\131\045\000\051\000\001\002" +
    "\000\050\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\040\uffff\042\uffff\043\uffff\045\uffff\047\uffff\051\uffff\054" +
    "\uffff\001\002\000\050\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\045\uffe2\047\uffe2" +
    "\051\uffe2\054\uffe2\001\002\000\026\004\063\005\061\006" +
    "\047\007\055\010\054\011\062\022\051\024\056\030\057" +
    "\046\060\001\002\000\026\004\063\005\061\006\047\007" +
    "\055\010\054\011\062\022\051\024\056\030\057\046\060" +
    "\001\002\000\026\004\063\005\061\006\047\007\055\010" +
    "\054\011\062\022\051\024\056\030\057\046\060\001\002" +
    "\000\050\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\042\uffe8\043\uffe8\045\uffe8\047\uffe8\051\uffe8\054" +
    "\uffe8\001\002\000\050\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\042\ufffe\043\ufffe\045\ufffe\047\ufffe" +
    "\051\ufffe\054\ufffe\001\002\000\052\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044" +
    "\066\045\uffe9\047\uffe9\051\uffe9\054\uffe9\001\002\000\050" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\042\uffe4\043\uffe4\045\uffe4\047\uffe4\051\uffe4\054\uffe4\001" +
    "\002\000\050\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\043\uffe6\045\uffe6\047\uffe6\051\uffe6" +
    "\054\uffe6\001\002\000\030\004\063\005\061\006\047\007" +
    "\055\010\054\011\062\022\051\024\056\030\057\045\071" +
    "\046\060\001\002\000\044\023\113\024\104\025\075\026" +
    "\105\027\100\031\102\032\112\033\103\034\107\035\110" +
    "\036\074\037\076\040\111\042\101\045\uffde\051\073\054" +
    "\077\001\002\000\004\045\072\001\002\000\050\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc" +
    "\043\uffcc\045\uffcc\047\uffcc\051\uffcc\054\uffcc\001\002\000" +
    "\050\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\042\uffcd\043\uffcd\045\uffcd\047\uffcd\051\uffcd\054\uffcd" +
    "\001\002\000\026\004\063\005\061\006\047\007\055\010" +
    "\054\011\062\022\051\024\056\030\057\046\060\001\002" +
    "\000\026\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\022\ufff6\024\ufff6\030\ufff6\046\ufff6\001\002\000\026" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\022" +
    "\ufffb\024\ufffb\030\ufffb\046\ufffb\001\002\000\026\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\022\ufff5\024" +
    "\ufff5\030\ufff5\046\ufff5\001\002\000\026\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\022\ufff8\024\ufff8\030" +
    "\ufff8\046\ufff8\001\002\000\026\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\022\ufff9\024\ufff9\030\ufff9\046" +
    "\ufff9\001\002\000\026\004\063\005\061\006\047\007\055" +
    "\010\054\011\062\022\051\024\056\030\057\046\060\001" +
    "\002\000\026\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\022\ufff3\024\ufff3\030\ufff3\046\ufff3\001\002\000" +
    "\026\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\022\ufff1\024\ufff1\030\ufff1\046\ufff1\001\002\000\026\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\022\ufffc" +
    "\024\ufffc\030\ufffc\046\ufffc\001\002\000\026\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\022\ufffa\024\ufffa" +
    "\030\ufffa\046\ufffa\001\002\000\026\004\063\005\061\006" +
    "\047\007\055\010\054\011\062\022\051\024\056\030\057" +
    "\046\060\001\002\000\026\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\022\ufff0\024\ufff0\030\ufff0\046\ufff0" +
    "\001\002\000\026\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\022\ufff7\024\ufff7\030\ufff7\046\ufff7\001\002" +
    "\000\026\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\022\ufff4\024\ufff4\030\ufff4\046\ufff4\001\002\000\026" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\022" +
    "\ufff2\024\ufff2\030\ufff2\046\ufff2\001\002\000\026\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\022\ufffd\024" +
    "\ufffd\030\ufffd\046\ufffd\001\002\000\050\023\113\024\104" +
    "\025\075\026\105\027\100\031\102\032\112\033\103\034" +
    "\107\035\110\036\074\037\076\040\111\042\101\043\uffed" +
    "\045\uffed\047\uffed\051\uffed\054\077\001\002\000\042\023" +
    "\113\024\104\025\075\026\105\027\100\031\102\032\112" +
    "\033\103\034\107\035\110\036\074\037\076\040\111\042" +
    "\101\043\116\054\077\001\002\000\050\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043\uffea" +
    "\045\uffea\047\uffea\051\uffea\054\uffea\001\002\000\006\045" +
    "\uffdf\047\uffdf\001\002\000\044\023\113\024\104\025\075" +
    "\026\105\027\100\031\102\032\112\033\103\034\107\035" +
    "\110\036\074\037\076\040\111\042\101\047\uffde\051\125" +
    "\054\077\001\002\000\004\047\124\001\002\000\004\047" +
    "\123\001\002\000\050\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\042\uffda\043\uffda\045\uffda\047\uffda" +
    "\051\uffda\054\uffda\001\002\000\050\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\045" +
    "\uffdb\047\uffdb\051\uffdb\054\uffdb\001\002\000\030\004\063" +
    "\005\061\006\047\007\055\010\054\011\062\022\051\024" +
    "\056\030\057\046\060\047\uffdc\001\002\000\004\047\uffdd" +
    "\001\002\000\050\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\042\101\043\uffec\045\uffec\047\uffec\051" +
    "\uffec\054\uffec\001\002\000\050\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\042\101\043\uffeb\045\uffeb" +
    "\047\uffeb\051\uffeb\054\uffeb\001\002\000\004\043\053\001" +
    "\002\000\006\045\uffd5\051\uffd5\001\002\000\026\004\063" +
    "\005\061\006\047\007\055\010\054\011\062\022\051\024" +
    "\056\030\057\046\060\001\002\000\042\023\113\024\104" +
    "\025\075\026\105\027\100\031\102\032\112\033\103\034" +
    "\107\035\110\036\074\037\076\040\111\042\101\045\135" +
    "\054\077\001\002\000\050\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\045\uffcb\047" +
    "\uffcb\051\uffcb\054\uffcb\001\002\000\010\042\041\045\000" +
    "\051\000\001\002\000\006\045\uffd7\051\uffd7\001\002\000" +
    "\006\002\uffb1\004\uffb1\001\002\000\006\012\035\013\032" +
    "\001\002\000\006\045\uffd0\051\uffd0\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\010\002\005\003\006\004\003\001\001\000" +
    "\010\003\015\041\014\042\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\006\004\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\015\041\014\042" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\022\025\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\022\025\024\001\001" +
    "\000\002\001\001\000\004\044\026\001\001\000\002\001" +
    "\001\000\010\017\032\020\033\021\030\001\001\000\004" +
    "\044\137\001\001\000\002\001\001\000\010\003\042\022" +
    "\037\023\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\032\020\033\021\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\043\010\045\011\051" +
    "\012\064\013\063\014\044\026\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\042" +
    "\023\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\043\010\045\011\051\012\064\013\063\014\127" +
    "\026\047\001\001\000\020\007\043\010\045\011\051\012" +
    "\064\013\063\014\126\026\047\001\001\000\024\007\043" +
    "\010\045\011\051\012\064\013\063\014\117\015\120\016" +
    "\121\026\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\043\010\045\011\051\012\064\013\063\014\066" +
    "\015\067\026\047\001\001\000\004\005\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\043\010\045\011\051\012\064\013\063\014\066\015" +
    "\116\026\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\043\010\045\011\051\012\064\013\063\014\114" +
    "\026\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\043\010\045" +
    "\011\051\012\064\013\063\014\113\026\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\105\001\001\000" +
    "\004\005\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\043" +
    "\010\045\011\051\012\064\013\063\014\117\015\116\016" +
    "\125\026\047\001\001\000\002\001\001\000\004\005\105" +
    "\001\001\000\004\005\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\043\010\045\011\051\012\064" +
    "\013\063\014\133\026\047\001\001\000\004\005\105\001" +
    "\001\000\002\001\001\000\010\003\042\022\136\023\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\032\020\141\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 88. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // empty ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // boolean_literal ::= TRUE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // boolean_literal ::= FALSE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_literal",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // binary_operator ::= PLUS 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // binary_operator ::= MINUS 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // binary_operator ::= TIMES 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // binary_operator ::= DIVIDE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // binary_operator ::= MODULO 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // binary_operator ::= HIGH_MULT 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // binary_operator ::= AND 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // binary_operator ::= OR 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // binary_operator ::= EQUAL 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // binary_operator ::= NOT_EQUAL 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // binary_operator ::= LT 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // binary_operator ::= LEQ 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // binary_operator ::= GT 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // binary_operator ::= GEQ 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // unary_operator ::= NOT 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // unary_operator ::= MINUS 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // binary_operator_expression ::= expression binary_operator expression 
            {
                String RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Object e2 = CUP$parser$stack.peek().<Object> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator_expression",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // unary_operator_expression ::= NOT expression 
            {
                String RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Object e = CUP$parser$stack.peek().<Object> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator_expression",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // unary_operator_expression ::= MINUS expression 
            {
                String RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Object e = CUP$parser$stack.peek().<Object> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator_expression",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // array_index ::= expression OPEN_BRACKET expression CLOSE_BRACKET 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_index",8, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // expression ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // expression ::= STRING_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // expression ::= CHARACTER_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // expression ::= array_index 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // expression ::= function_call 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // expression ::= array_literal 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // expression ::= boolean_literal 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // expression ::= INTEGER_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // expression ::= binary_operator_expression 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // expression ::= unary_operator_expression 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // expression_list ::= expression COMMA expression_list 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // expression_list ::= expression 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // expression_list_trailing_comma ::= expression COMMA expression_list_trailing_comma 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // expression_list_trailing_comma ::= expression COMMA 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list_trailing_comma",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // array_literal ::= OPEN_BRACE expression_list CLOSE_BRACE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // array_literal ::= OPEN_BRACE expression_list_trailing_comma CLOSE_BRACE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literal",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // basic_type ::= INT 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_type",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // basic_type ::= BOOL 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_type",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // array_sized ::= OPEN_BRACKET expression CLOSE_BRACKET array_sized 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_sized",16, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // array_sized ::= array_empty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_sized",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // array_empty ::= OPEN_BRACKET CLOSE_BRACKET array_empty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_empty",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // array_empty ::= empty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("array_empty",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // type ::= basic_type array_sized 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // types ::= type COMMA types 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("types",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // types ::= type 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("types",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // typed_declaration ::= IDENTIFIER COLON type 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typed_declaration",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // typed_declaration_list ::= typed_declaration COMMA typed_declaration_list 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // typed_declaration_list ::= typed_declaration 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typed_declaration_list",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // function_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // function_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // function_call ::= LENGTH OPEN_PAREN expression CLOSE_PAREN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // assignment_lhs ::= IDENTIFIER 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // assignment_lhs ::= typed_declaration 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // assignment_lhs ::= UNDERSCORE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // assignment_lhs_list ::= assignment_lhs COMMA assignment_lhs_list 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_list",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // assignment_lhs_list ::= assignment_lhs 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_lhs_list",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // assignment ::= assignment_lhs GETS expression 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // assignment ::= assignment_lhs_list GETS function_call 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",24, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // if_statement ::= IF OPEN_PAREN expression CLOSE_PAREN block ELSE block 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",24, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // while_statement ::= WHILE OPEN_PAREN expression CLOSE_PAREN block 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",25, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // return_statement ::= RETURN expression_list 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // return_statement ::= RETURN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // statement_no_semicolon ::= if_statement 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // statement_no_semicolon ::= while_statement 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // statement_no_semicolon ::= procedure_call 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // statement_no_semicolon ::= typed_declaration_list 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // statement_no_semicolon ::= assignment 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_no_semicolon",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // statement ::= statement_no_semicolon 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // statement ::= statement_no_semicolon SEMICOLON 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",29, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // function_block ::= OPEN_BRACE blocks return_statement CLOSE_BRACE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",33, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // block ::= OPEN_BRACE blocks CLOSE_BRACE 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // block ::= function_block 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // block ::= statement 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // blocks ::= block blocks 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // blocks ::= empty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // function_declaration ::= IDENTIFIER OPEN_PAREN typed_declaration_list CLOSE_PAREN COLON types function_body 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",31, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // function_declaration ::= IDENTIFIER OPEN_PAREN typed_declaration_list CLOSE_PAREN function_body 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",31, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // function_declarations ::= function_declaration function_declarations 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declarations",32, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // function_declarations ::= empty 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declarations",32, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // procedure_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",35, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // procedure_call ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                String RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",35, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // use_block ::= USE IDENTIFIER use_block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // use_block ::= empty 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_block",2, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // program ::= use_block function_declarations 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
